/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { BalanceSheetFilter, Bill, BillsSort, CreateBillResponse, CreateCreditNoteResponse, CreateCustomerResponse, CreateInvoiceItemResponse, CreateInvoiceResponse, CreateJournalEntryResponse, CreateLedgerAccountResponse, CreatePaymentResponse, CreatePurchaseOrderResponse, CreateSupplierResponse, CreateTaxRateResponse, CreditNote, Customer, CustomersFilter, DeleteBillResponse, DeleteCreditNoteResponse, DeleteCustomerResponse, DeleteInvoiceResponse, DeleteJournalEntryResponse, DeleteLedgerAccountResponse, DeletePaymentResponse, DeletePurchaseOrderResponse, DeleteSupplierResponse, DeleteTaxRateResponse, GetBalanceSheetResponse, GetBillResponse, GetBillsResponse, GetCompanyInfoResponse, GetCreditNoteResponse, GetCreditNotesResponse, GetCustomerResponse, GetCustomersResponse, GetInvoiceItemResponse, GetInvoiceItemsResponse, GetInvoiceResponse, GetInvoicesResponse, GetJournalEntriesResponse, GetJournalEntryResponse, GetLedgerAccountResponse, GetLedgerAccountsResponse, GetPaymentResponse, GetPaymentsResponse, GetProfitAndLossResponse, GetPurchaseOrderResponse, GetPurchaseOrdersResponse, GetSupplierResponse, GetSuppliersResponse, GetTaxRateResponse, GetTaxRatesResponse, Invoice, InvoiceItem, InvoiceItemsFilter, InvoicesSort, JournalEntry, LedgerAccount, PassThroughQuery, Payment, PaymentsFilter, ProfitAndLossFilter, PurchaseOrder, Supplier, SuppliersFilter, TaxRate, TaxRatesFilter, UpdateBillResponse, UpdateCreditNoteResponse, UpdateCustomerResponse, UpdateInvoiceItemsResponse, UpdateInvoiceResponse, UpdateJournalEntryResponse, UpdateLedgerAccountResponse, UpdatePaymentResponse, UpdatePurchaseOrderResponse, UpdateSupplierResponse, UpdateTaxRateResponse } from '../models';
import * as runtime from '../runtime';
export interface AccountingApiBalanceSheetOneRequest {
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    passThrough?: PassThroughQuery;
    filter?: BalanceSheetFilter;
    raw?: boolean;
}
export interface AccountingApiBillsAddRequest {
    bill: Bill;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiBillsAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    sort?: BillsSort;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiBillsDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiBillsOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface AccountingApiBillsUpdateRequest {
    id: string;
    bill: Bill;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiCompanyInfoOneRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    fields?: string | null;
}
export interface AccountingApiCreditNotesAddRequest {
    creditNote: CreditNote;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiCreditNotesAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiCreditNotesDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiCreditNotesOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface AccountingApiCreditNotesUpdateRequest {
    id: string;
    creditNote: CreditNote;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiCustomersAddRequest {
    customer: Customer;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiCustomersAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    filter?: CustomersFilter;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiCustomersDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiCustomersOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface AccountingApiCustomersUpdateRequest {
    id: string;
    customer: Customer;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiInvoiceItemsAddRequest {
    invoiceItem: InvoiceItem;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiInvoiceItemsAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    filter?: InvoiceItemsFilter;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiInvoiceItemsDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiInvoiceItemsOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface AccountingApiInvoiceItemsUpdateRequest {
    id: string;
    invoiceItem: InvoiceItem;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiInvoicesAddRequest {
    invoice: Invoice;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiInvoicesAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    sort?: InvoicesSort;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiInvoicesDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiInvoicesOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface AccountingApiInvoicesUpdateRequest {
    id: string;
    invoice: Invoice;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiJournalEntriesAddRequest {
    journalEntry: JournalEntry;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiJournalEntriesAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiJournalEntriesDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiJournalEntriesOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface AccountingApiJournalEntriesUpdateRequest {
    id: string;
    journalEntry: JournalEntry;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiLedgerAccountsAddRequest {
    ledgerAccount: LedgerAccount;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiLedgerAccountsAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiLedgerAccountsDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiLedgerAccountsOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface AccountingApiLedgerAccountsUpdateRequest {
    id: string;
    ledgerAccount: LedgerAccount;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiPaymentsAddRequest {
    payment: Payment;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiPaymentsAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    filter?: PaymentsFilter;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiPaymentsDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiPaymentsOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface AccountingApiPaymentsUpdateRequest {
    id: string;
    payment: Payment;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiProfitAndLossOneRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    filter?: ProfitAndLossFilter;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiPurchaseOrdersAddRequest {
    purchaseOrder: PurchaseOrder;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiPurchaseOrdersAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    passThrough?: PassThroughQuery;
    limit?: number;
}
export interface AccountingApiPurchaseOrdersDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiPurchaseOrdersOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiPurchaseOrdersUpdateRequest {
    id: string;
    purchaseOrder: PurchaseOrder;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiSuppliersAddRequest {
    supplier: Supplier;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiSuppliersAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    filter?: SuppliersFilter;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiSuppliersDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiSuppliersOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface AccountingApiSuppliersUpdateRequest {
    id: string;
    supplier: Supplier;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiTaxRatesAddRequest {
    taxRate: TaxRate;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface AccountingApiTaxRatesAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    filter?: TaxRatesFilter;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface AccountingApiTaxRatesDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface AccountingApiTaxRatesOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface AccountingApiTaxRatesUpdateRequest {
    id: string;
    taxRate: TaxRate;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
/**
 *
 */
export declare class AccountingApi extends runtime.BaseAPI {
    /**
     * Get BalanceSheet
     * Get BalanceSheet
     */
    balanceSheetOneRaw(requestParameters: AccountingApiBalanceSheetOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetBalanceSheetResponse>>;
    /**
     * Get BalanceSheet
     * Get BalanceSheet
     */
    balanceSheetOne(requestParameters?: AccountingApiBalanceSheetOneRequest, initOverrides?: RequestInit): Promise<GetBalanceSheetResponse>;
    /**
     * Create Bill
     * Create Bill
     */
    billsAddRaw(requestParameters: AccountingApiBillsAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateBillResponse>>;
    /**
     * Create Bill
     * Create Bill
     */
    billsAdd(requestParameters: AccountingApiBillsAddRequest, initOverrides?: RequestInit): Promise<CreateBillResponse>;
    /**
     * List Bills
     * List Bills
     */
    billsAllRaw(requestParameters: AccountingApiBillsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetBillsResponse>>;
    /**
     * List Bills
     * List Bills
     */
    billsAll(requestParameters?: AccountingApiBillsAllRequest, initOverrides?: RequestInit): Promise<GetBillsResponse>;
    /**
     * Delete Bill
     * Delete Bill
     */
    billsDeleteRaw(requestParameters: AccountingApiBillsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteBillResponse>>;
    /**
     * Delete Bill
     * Delete Bill
     */
    billsDelete(requestParameters: AccountingApiBillsDeleteRequest, initOverrides?: RequestInit): Promise<DeleteBillResponse>;
    /**
     * Get Bill
     * Get Bill
     */
    billsOneRaw(requestParameters: AccountingApiBillsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetBillResponse>>;
    /**
     * Get Bill
     * Get Bill
     */
    billsOne(requestParameters: AccountingApiBillsOneRequest, initOverrides?: RequestInit): Promise<GetBillResponse>;
    /**
     * Update Bill
     * Update Bill
     */
    billsUpdateRaw(requestParameters: AccountingApiBillsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateBillResponse>>;
    /**
     * Update Bill
     * Update Bill
     */
    billsUpdate(requestParameters: AccountingApiBillsUpdateRequest, initOverrides?: RequestInit): Promise<UpdateBillResponse>;
    /**
     * Get company info
     * Get company info
     */
    companyInfoOneRaw(requestParameters: AccountingApiCompanyInfoOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCompanyInfoResponse>>;
    /**
     * Get company info
     * Get company info
     */
    companyInfoOne(requestParameters?: AccountingApiCompanyInfoOneRequest, initOverrides?: RequestInit): Promise<GetCompanyInfoResponse>;
    /**
     * Create Credit Note
     * Create Credit Note
     */
    creditNotesAddRaw(requestParameters: AccountingApiCreditNotesAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateCreditNoteResponse>>;
    /**
     * Create Credit Note
     * Create Credit Note
     */
    creditNotesAdd(requestParameters: AccountingApiCreditNotesAddRequest, initOverrides?: RequestInit): Promise<CreateCreditNoteResponse>;
    /**
     * List Credit Notes
     * List Credit Notes
     */
    creditNotesAllRaw(requestParameters: AccountingApiCreditNotesAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCreditNotesResponse>>;
    /**
     * List Credit Notes
     * List Credit Notes
     */
    creditNotesAll(requestParameters?: AccountingApiCreditNotesAllRequest, initOverrides?: RequestInit): Promise<GetCreditNotesResponse>;
    /**
     * Delete Credit Note
     * Delete Credit Note
     */
    creditNotesDeleteRaw(requestParameters: AccountingApiCreditNotesDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteCreditNoteResponse>>;
    /**
     * Delete Credit Note
     * Delete Credit Note
     */
    creditNotesDelete(requestParameters: AccountingApiCreditNotesDeleteRequest, initOverrides?: RequestInit): Promise<DeleteCreditNoteResponse>;
    /**
     * Get Credit Note
     * Get Credit Note
     */
    creditNotesOneRaw(requestParameters: AccountingApiCreditNotesOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCreditNoteResponse>>;
    /**
     * Get Credit Note
     * Get Credit Note
     */
    creditNotesOne(requestParameters: AccountingApiCreditNotesOneRequest, initOverrides?: RequestInit): Promise<GetCreditNoteResponse>;
    /**
     * Update Credit Note
     * Update Credit Note
     */
    creditNotesUpdateRaw(requestParameters: AccountingApiCreditNotesUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateCreditNoteResponse>>;
    /**
     * Update Credit Note
     * Update Credit Note
     */
    creditNotesUpdate(requestParameters: AccountingApiCreditNotesUpdateRequest, initOverrides?: RequestInit): Promise<UpdateCreditNoteResponse>;
    /**
     * Create Customer
     * Create Customer
     */
    customersAddRaw(requestParameters: AccountingApiCustomersAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateCustomerResponse>>;
    /**
     * Create Customer
     * Create Customer
     */
    customersAdd(requestParameters: AccountingApiCustomersAddRequest, initOverrides?: RequestInit): Promise<CreateCustomerResponse>;
    /**
     * List Customers
     * List Customers
     */
    customersAllRaw(requestParameters: AccountingApiCustomersAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCustomersResponse>>;
    /**
     * List Customers
     * List Customers
     */
    customersAll(requestParameters?: AccountingApiCustomersAllRequest, initOverrides?: RequestInit): Promise<GetCustomersResponse>;
    /**
     * Delete Customer
     * Delete Customer
     */
    customersDeleteRaw(requestParameters: AccountingApiCustomersDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteCustomerResponse>>;
    /**
     * Delete Customer
     * Delete Customer
     */
    customersDelete(requestParameters: AccountingApiCustomersDeleteRequest, initOverrides?: RequestInit): Promise<DeleteCustomerResponse>;
    /**
     * Get Customer
     * Get Customer
     */
    customersOneRaw(requestParameters: AccountingApiCustomersOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCustomerResponse>>;
    /**
     * Get Customer
     * Get Customer
     */
    customersOne(requestParameters: AccountingApiCustomersOneRequest, initOverrides?: RequestInit): Promise<GetCustomerResponse>;
    /**
     * Update Customer
     * Update Customer
     */
    customersUpdateRaw(requestParameters: AccountingApiCustomersUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateCustomerResponse>>;
    /**
     * Update Customer
     * Update Customer
     */
    customersUpdate(requestParameters: AccountingApiCustomersUpdateRequest, initOverrides?: RequestInit): Promise<UpdateCustomerResponse>;
    /**
     * Create Invoice Item
     * Create Invoice Item
     */
    invoiceItemsAddRaw(requestParameters: AccountingApiInvoiceItemsAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateInvoiceItemResponse>>;
    /**
     * Create Invoice Item
     * Create Invoice Item
     */
    invoiceItemsAdd(requestParameters: AccountingApiInvoiceItemsAddRequest, initOverrides?: RequestInit): Promise<CreateInvoiceItemResponse>;
    /**
     * List Invoice Items
     * List Invoice Items
     */
    invoiceItemsAllRaw(requestParameters: AccountingApiInvoiceItemsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetInvoiceItemsResponse>>;
    /**
     * List Invoice Items
     * List Invoice Items
     */
    invoiceItemsAll(requestParameters?: AccountingApiInvoiceItemsAllRequest, initOverrides?: RequestInit): Promise<GetInvoiceItemsResponse>;
    /**
     * Delete Invoice Item
     * Delete Invoice Item
     */
    invoiceItemsDeleteRaw(requestParameters: AccountingApiInvoiceItemsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteTaxRateResponse>>;
    /**
     * Delete Invoice Item
     * Delete Invoice Item
     */
    invoiceItemsDelete(requestParameters: AccountingApiInvoiceItemsDeleteRequest, initOverrides?: RequestInit): Promise<DeleteTaxRateResponse>;
    /**
     * Get Invoice Item
     * Get Invoice Item
     */
    invoiceItemsOneRaw(requestParameters: AccountingApiInvoiceItemsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetInvoiceItemResponse>>;
    /**
     * Get Invoice Item
     * Get Invoice Item
     */
    invoiceItemsOne(requestParameters: AccountingApiInvoiceItemsOneRequest, initOverrides?: RequestInit): Promise<GetInvoiceItemResponse>;
    /**
     * Update Invoice Item
     * Update Invoice Item
     */
    invoiceItemsUpdateRaw(requestParameters: AccountingApiInvoiceItemsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateInvoiceItemsResponse>>;
    /**
     * Update Invoice Item
     * Update Invoice Item
     */
    invoiceItemsUpdate(requestParameters: AccountingApiInvoiceItemsUpdateRequest, initOverrides?: RequestInit): Promise<UpdateInvoiceItemsResponse>;
    /**
     * Create Invoice
     * Create Invoice
     */
    invoicesAddRaw(requestParameters: AccountingApiInvoicesAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateInvoiceResponse>>;
    /**
     * Create Invoice
     * Create Invoice
     */
    invoicesAdd(requestParameters: AccountingApiInvoicesAddRequest, initOverrides?: RequestInit): Promise<CreateInvoiceResponse>;
    /**
     * List Invoices
     * List Invoices
     */
    invoicesAllRaw(requestParameters: AccountingApiInvoicesAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetInvoicesResponse>>;
    /**
     * List Invoices
     * List Invoices
     */
    invoicesAll(requestParameters?: AccountingApiInvoicesAllRequest, initOverrides?: RequestInit): Promise<GetInvoicesResponse>;
    /**
     * Delete Invoice
     * Delete Invoice
     */
    invoicesDeleteRaw(requestParameters: AccountingApiInvoicesDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteInvoiceResponse>>;
    /**
     * Delete Invoice
     * Delete Invoice
     */
    invoicesDelete(requestParameters: AccountingApiInvoicesDeleteRequest, initOverrides?: RequestInit): Promise<DeleteInvoiceResponse>;
    /**
     * Get Invoice
     * Get Invoice
     */
    invoicesOneRaw(requestParameters: AccountingApiInvoicesOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetInvoiceResponse>>;
    /**
     * Get Invoice
     * Get Invoice
     */
    invoicesOne(requestParameters: AccountingApiInvoicesOneRequest, initOverrides?: RequestInit): Promise<GetInvoiceResponse>;
    /**
     * Update Invoice
     * Update Invoice
     */
    invoicesUpdateRaw(requestParameters: AccountingApiInvoicesUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateInvoiceResponse>>;
    /**
     * Update Invoice
     * Update Invoice
     */
    invoicesUpdate(requestParameters: AccountingApiInvoicesUpdateRequest, initOverrides?: RequestInit): Promise<UpdateInvoiceResponse>;
    /**
     * Create Journal Entry
     * Create Journal Entry
     */
    journalEntriesAddRaw(requestParameters: AccountingApiJournalEntriesAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateJournalEntryResponse>>;
    /**
     * Create Journal Entry
     * Create Journal Entry
     */
    journalEntriesAdd(requestParameters: AccountingApiJournalEntriesAddRequest, initOverrides?: RequestInit): Promise<CreateJournalEntryResponse>;
    /**
     * List Journal Entries
     * List Journal Entries
     */
    journalEntriesAllRaw(requestParameters: AccountingApiJournalEntriesAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetJournalEntriesResponse>>;
    /**
     * List Journal Entries
     * List Journal Entries
     */
    journalEntriesAll(requestParameters?: AccountingApiJournalEntriesAllRequest, initOverrides?: RequestInit): Promise<GetJournalEntriesResponse>;
    /**
     * Delete Journal Entry
     * Delete Journal Entry
     */
    journalEntriesDeleteRaw(requestParameters: AccountingApiJournalEntriesDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteJournalEntryResponse>>;
    /**
     * Delete Journal Entry
     * Delete Journal Entry
     */
    journalEntriesDelete(requestParameters: AccountingApiJournalEntriesDeleteRequest, initOverrides?: RequestInit): Promise<DeleteJournalEntryResponse>;
    /**
     * Get Journal Entry
     * Get Journal Entry
     */
    journalEntriesOneRaw(requestParameters: AccountingApiJournalEntriesOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetJournalEntryResponse>>;
    /**
     * Get Journal Entry
     * Get Journal Entry
     */
    journalEntriesOne(requestParameters: AccountingApiJournalEntriesOneRequest, initOverrides?: RequestInit): Promise<GetJournalEntryResponse>;
    /**
     * Update Journal Entry
     * Update Journal Entry
     */
    journalEntriesUpdateRaw(requestParameters: AccountingApiJournalEntriesUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateJournalEntryResponse>>;
    /**
     * Update Journal Entry
     * Update Journal Entry
     */
    journalEntriesUpdate(requestParameters: AccountingApiJournalEntriesUpdateRequest, initOverrides?: RequestInit): Promise<UpdateJournalEntryResponse>;
    /**
     * Create Ledger Account
     * Create Ledger Account
     */
    ledgerAccountsAddRaw(requestParameters: AccountingApiLedgerAccountsAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateLedgerAccountResponse>>;
    /**
     * Create Ledger Account
     * Create Ledger Account
     */
    ledgerAccountsAdd(requestParameters: AccountingApiLedgerAccountsAddRequest, initOverrides?: RequestInit): Promise<CreateLedgerAccountResponse>;
    /**
     * List Ledger Accounts
     * List Ledger Accounts
     */
    ledgerAccountsAllRaw(requestParameters: AccountingApiLedgerAccountsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetLedgerAccountsResponse>>;
    /**
     * List Ledger Accounts
     * List Ledger Accounts
     */
    ledgerAccountsAll(requestParameters?: AccountingApiLedgerAccountsAllRequest, initOverrides?: RequestInit): Promise<GetLedgerAccountsResponse>;
    /**
     * Delete Ledger Account
     * Delete Ledger Account
     */
    ledgerAccountsDeleteRaw(requestParameters: AccountingApiLedgerAccountsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteLedgerAccountResponse>>;
    /**
     * Delete Ledger Account
     * Delete Ledger Account
     */
    ledgerAccountsDelete(requestParameters: AccountingApiLedgerAccountsDeleteRequest, initOverrides?: RequestInit): Promise<DeleteLedgerAccountResponse>;
    /**
     * Get Ledger Account
     * Get Ledger Account
     */
    ledgerAccountsOneRaw(requestParameters: AccountingApiLedgerAccountsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetLedgerAccountResponse>>;
    /**
     * Get Ledger Account
     * Get Ledger Account
     */
    ledgerAccountsOne(requestParameters: AccountingApiLedgerAccountsOneRequest, initOverrides?: RequestInit): Promise<GetLedgerAccountResponse>;
    /**
     * Update Ledger Account
     * Update Ledger Account
     */
    ledgerAccountsUpdateRaw(requestParameters: AccountingApiLedgerAccountsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateLedgerAccountResponse>>;
    /**
     * Update Ledger Account
     * Update Ledger Account
     */
    ledgerAccountsUpdate(requestParameters: AccountingApiLedgerAccountsUpdateRequest, initOverrides?: RequestInit): Promise<UpdateLedgerAccountResponse>;
    /**
     * Create Payment
     * Create Payment
     */
    paymentsAddRaw(requestParameters: AccountingApiPaymentsAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreatePaymentResponse>>;
    /**
     * Create Payment
     * Create Payment
     */
    paymentsAdd(requestParameters: AccountingApiPaymentsAddRequest, initOverrides?: RequestInit): Promise<CreatePaymentResponse>;
    /**
     * List Payments
     * List Payments
     */
    paymentsAllRaw(requestParameters: AccountingApiPaymentsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetPaymentsResponse>>;
    /**
     * List Payments
     * List Payments
     */
    paymentsAll(requestParameters?: AccountingApiPaymentsAllRequest, initOverrides?: RequestInit): Promise<GetPaymentsResponse>;
    /**
     * Delete Payment
     * Delete Payment
     */
    paymentsDeleteRaw(requestParameters: AccountingApiPaymentsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeletePaymentResponse>>;
    /**
     * Delete Payment
     * Delete Payment
     */
    paymentsDelete(requestParameters: AccountingApiPaymentsDeleteRequest, initOverrides?: RequestInit): Promise<DeletePaymentResponse>;
    /**
     * Get Payment
     * Get Payment
     */
    paymentsOneRaw(requestParameters: AccountingApiPaymentsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetPaymentResponse>>;
    /**
     * Get Payment
     * Get Payment
     */
    paymentsOne(requestParameters: AccountingApiPaymentsOneRequest, initOverrides?: RequestInit): Promise<GetPaymentResponse>;
    /**
     * Update Payment
     * Update Payment
     */
    paymentsUpdateRaw(requestParameters: AccountingApiPaymentsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdatePaymentResponse>>;
    /**
     * Update Payment
     * Update Payment
     */
    paymentsUpdate(requestParameters: AccountingApiPaymentsUpdateRequest, initOverrides?: RequestInit): Promise<UpdatePaymentResponse>;
    /**
     * Get Profit and Loss
     * Get Profit and Loss
     */
    profitAndLossOneRaw(requestParameters: AccountingApiProfitAndLossOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetProfitAndLossResponse>>;
    /**
     * Get Profit and Loss
     * Get Profit and Loss
     */
    profitAndLossOne(requestParameters?: AccountingApiProfitAndLossOneRequest, initOverrides?: RequestInit): Promise<GetProfitAndLossResponse>;
    /**
     * Create Purchase Order
     * Create Purchase Order
     */
    purchaseOrdersAddRaw(requestParameters: AccountingApiPurchaseOrdersAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreatePurchaseOrderResponse>>;
    /**
     * Create Purchase Order
     * Create Purchase Order
     */
    purchaseOrdersAdd(requestParameters: AccountingApiPurchaseOrdersAddRequest, initOverrides?: RequestInit): Promise<CreatePurchaseOrderResponse>;
    /**
     * List Purchase Orders
     * List Purchase Orders
     */
    purchaseOrdersAllRaw(requestParameters: AccountingApiPurchaseOrdersAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetPurchaseOrdersResponse>>;
    /**
     * List Purchase Orders
     * List Purchase Orders
     */
    purchaseOrdersAll(requestParameters?: AccountingApiPurchaseOrdersAllRequest, initOverrides?: RequestInit): Promise<GetPurchaseOrdersResponse>;
    /**
     * Delete Purchase Order
     * Delete Purchase Order
     */
    purchaseOrdersDeleteRaw(requestParameters: AccountingApiPurchaseOrdersDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeletePurchaseOrderResponse>>;
    /**
     * Delete Purchase Order
     * Delete Purchase Order
     */
    purchaseOrdersDelete(requestParameters: AccountingApiPurchaseOrdersDeleteRequest, initOverrides?: RequestInit): Promise<DeletePurchaseOrderResponse>;
    /**
     * Get Purchase Order
     * Get Purchase Order
     */
    purchaseOrdersOneRaw(requestParameters: AccountingApiPurchaseOrdersOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetPurchaseOrderResponse>>;
    /**
     * Get Purchase Order
     * Get Purchase Order
     */
    purchaseOrdersOne(requestParameters: AccountingApiPurchaseOrdersOneRequest, initOverrides?: RequestInit): Promise<GetPurchaseOrderResponse>;
    /**
     * Update Purchase Order
     * Update Purchase Order
     */
    purchaseOrdersUpdateRaw(requestParameters: AccountingApiPurchaseOrdersUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdatePurchaseOrderResponse>>;
    /**
     * Update Purchase Order
     * Update Purchase Order
     */
    purchaseOrdersUpdate(requestParameters: AccountingApiPurchaseOrdersUpdateRequest, initOverrides?: RequestInit): Promise<UpdatePurchaseOrderResponse>;
    /**
     * Create Supplier
     * Create Supplier
     */
    suppliersAddRaw(requestParameters: AccountingApiSuppliersAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateSupplierResponse>>;
    /**
     * Create Supplier
     * Create Supplier
     */
    suppliersAdd(requestParameters: AccountingApiSuppliersAddRequest, initOverrides?: RequestInit): Promise<CreateSupplierResponse>;
    /**
     * List Suppliers
     * List Suppliers
     */
    suppliersAllRaw(requestParameters: AccountingApiSuppliersAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetSuppliersResponse>>;
    /**
     * List Suppliers
     * List Suppliers
     */
    suppliersAll(requestParameters?: AccountingApiSuppliersAllRequest, initOverrides?: RequestInit): Promise<GetSuppliersResponse>;
    /**
     * Delete Supplier
     * Delete Supplier
     */
    suppliersDeleteRaw(requestParameters: AccountingApiSuppliersDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteSupplierResponse>>;
    /**
     * Delete Supplier
     * Delete Supplier
     */
    suppliersDelete(requestParameters: AccountingApiSuppliersDeleteRequest, initOverrides?: RequestInit): Promise<DeleteSupplierResponse>;
    /**
     * Get Supplier
     * Get Supplier
     */
    suppliersOneRaw(requestParameters: AccountingApiSuppliersOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetSupplierResponse>>;
    /**
     * Get Supplier
     * Get Supplier
     */
    suppliersOne(requestParameters: AccountingApiSuppliersOneRequest, initOverrides?: RequestInit): Promise<GetSupplierResponse>;
    /**
     * Update Supplier
     * Update Supplier
     */
    suppliersUpdateRaw(requestParameters: AccountingApiSuppliersUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateSupplierResponse>>;
    /**
     * Update Supplier
     * Update Supplier
     */
    suppliersUpdate(requestParameters: AccountingApiSuppliersUpdateRequest, initOverrides?: RequestInit): Promise<UpdateSupplierResponse>;
    /**
     * Create Tax Rate
     * Create Tax Rate
     */
    taxRatesAddRaw(requestParameters: AccountingApiTaxRatesAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateTaxRateResponse>>;
    /**
     * Create Tax Rate
     * Create Tax Rate
     */
    taxRatesAdd(requestParameters: AccountingApiTaxRatesAddRequest, initOverrides?: RequestInit): Promise<CreateTaxRateResponse>;
    /**
     * List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
     * List Tax Rates
     */
    taxRatesAllRaw(requestParameters: AccountingApiTaxRatesAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetTaxRatesResponse>>;
    /**
     * List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
     * List Tax Rates
     */
    taxRatesAll(requestParameters?: AccountingApiTaxRatesAllRequest, initOverrides?: RequestInit): Promise<GetTaxRatesResponse>;
    /**
     * Delete Tax Rate
     * Delete Tax Rate
     */
    taxRatesDeleteRaw(requestParameters: AccountingApiTaxRatesDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteTaxRateResponse>>;
    /**
     * Delete Tax Rate
     * Delete Tax Rate
     */
    taxRatesDelete(requestParameters: AccountingApiTaxRatesDeleteRequest, initOverrides?: RequestInit): Promise<DeleteTaxRateResponse>;
    /**
     * Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
     * Get Tax Rate
     */
    taxRatesOneRaw(requestParameters: AccountingApiTaxRatesOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetTaxRateResponse>>;
    /**
     * Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
     * Get Tax Rate
     */
    taxRatesOne(requestParameters: AccountingApiTaxRatesOneRequest, initOverrides?: RequestInit): Promise<GetTaxRateResponse>;
    /**
     * Update Tax Rate
     * Update Tax Rate
     */
    taxRatesUpdateRaw(requestParameters: AccountingApiTaxRatesUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateTaxRateResponse>>;
    /**
     * Update Tax Rate
     * Update Tax Rate
     */
    taxRatesUpdate(requestParameters: AccountingApiTaxRatesUpdateRequest, initOverrides?: RequestInit): Promise<UpdateTaxRateResponse>;
}
