/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CreateDepartmentResponse, CreateEmployeeResponse, CreateHrisCompanyResponse, CreateTimeOffRequestResponse, DeleteDepartmentResponse, DeleteEmployeeResponse, DeleteHrisCompanyResponse, DeleteTimeOffRequestResponse, Department, Employee, EmployeesFilter, EmployeesSort, GetDepartmentResponse, GetDepartmentsResponse, GetEmployeePayrollResponse, GetEmployeePayrollsResponse, GetEmployeeResponse, GetEmployeeSchedulesResponse, GetEmployeesResponse, GetHrisCompaniesResponse, GetHrisCompanyResponse, GetPayrollResponse, GetPayrollsResponse, GetTimeOffRequestResponse, GetTimeOffRequestsResponse, HrisCompany, PassThroughQuery, PayrollsFilter, TimeOffRequest, TimeOffRequestsFilter, UpdateDepartmentResponse, UpdateEmployeeResponse, UpdateHrisCompanyResponse, UpdateTimeOffRequestResponse } from '../models';
import * as runtime from '../runtime';
export interface HrisApiCompaniesAddRequest {
    company: HrisCompany;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface HrisApiCompaniesAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface HrisApiCompaniesDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface HrisApiCompaniesOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface HrisApiCompaniesUpdateRequest {
    id: string;
    company: HrisCompany;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface HrisApiDepartmentsAddRequest {
    department: Department;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface HrisApiDepartmentsAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface HrisApiDepartmentsDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface HrisApiDepartmentsOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface HrisApiDepartmentsUpdateRequest {
    id: string;
    department: Department;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface HrisApiEmployeePayrollsAllRequest {
    employeeId: string;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    filter?: PayrollsFilter;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface HrisApiEmployeePayrollsOneRequest {
    payrollId: string;
    employeeId: string;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    fields?: string | null;
}
export interface HrisApiEmployeeSchedulesAllRequest {
    employeeId: string;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface HrisApiEmployeesAddRequest {
    employee: Employee;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface HrisApiEmployeesAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    filter?: EmployeesFilter;
    sort?: EmployeesSort;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface HrisApiEmployeesDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface HrisApiEmployeesOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface HrisApiEmployeesUpdateRequest {
    id: string;
    employee: Employee;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface HrisApiPayrollsAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    filter?: PayrollsFilter;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface HrisApiPayrollsOneRequest {
    payrollId: string;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    fields?: string | null;
}
export interface HrisApiTimeOffRequestsAddRequest {
    timeOffRequest: TimeOffRequest;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface HrisApiTimeOffRequestsAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    filter?: TimeOffRequestsFilter;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface HrisApiTimeOffRequestsDeleteRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface HrisApiTimeOffRequestsOneRequest {
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface HrisApiTimeOffRequestsUpdateRequest {
    id: string;
    timeOffRequest: TimeOffRequest;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
/**
 *
 */
export declare class HrisApi extends runtime.BaseAPI {
    /**
     * Create Company
     * Create Company
     */
    companiesAddRaw(requestParameters: HrisApiCompaniesAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateHrisCompanyResponse>>;
    /**
     * Create Company
     * Create Company
     */
    companiesAdd(requestParameters: HrisApiCompaniesAddRequest, initOverrides?: RequestInit): Promise<CreateHrisCompanyResponse>;
    /**
     * List Companies
     * List Companies
     */
    companiesAllRaw(requestParameters: HrisApiCompaniesAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetHrisCompaniesResponse>>;
    /**
     * List Companies
     * List Companies
     */
    companiesAll(requestParameters?: HrisApiCompaniesAllRequest, initOverrides?: RequestInit): Promise<GetHrisCompaniesResponse>;
    /**
     * Delete Company
     * Delete Company
     */
    companiesDeleteRaw(requestParameters: HrisApiCompaniesDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteHrisCompanyResponse>>;
    /**
     * Delete Company
     * Delete Company
     */
    companiesDelete(requestParameters: HrisApiCompaniesDeleteRequest, initOverrides?: RequestInit): Promise<DeleteHrisCompanyResponse>;
    /**
     * Get Company
     * Get Company
     */
    companiesOneRaw(requestParameters: HrisApiCompaniesOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetHrisCompanyResponse>>;
    /**
     * Get Company
     * Get Company
     */
    companiesOne(requestParameters: HrisApiCompaniesOneRequest, initOverrides?: RequestInit): Promise<GetHrisCompanyResponse>;
    /**
     * Update Company
     * Update Company
     */
    companiesUpdateRaw(requestParameters: HrisApiCompaniesUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateHrisCompanyResponse>>;
    /**
     * Update Company
     * Update Company
     */
    companiesUpdate(requestParameters: HrisApiCompaniesUpdateRequest, initOverrides?: RequestInit): Promise<UpdateHrisCompanyResponse>;
    /**
     * Create Department
     * Create Department
     */
    departmentsAddRaw(requestParameters: HrisApiDepartmentsAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateDepartmentResponse>>;
    /**
     * Create Department
     * Create Department
     */
    departmentsAdd(requestParameters: HrisApiDepartmentsAddRequest, initOverrides?: RequestInit): Promise<CreateDepartmentResponse>;
    /**
     * List Departments
     * List Departments
     */
    departmentsAllRaw(requestParameters: HrisApiDepartmentsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetDepartmentsResponse>>;
    /**
     * List Departments
     * List Departments
     */
    departmentsAll(requestParameters?: HrisApiDepartmentsAllRequest, initOverrides?: RequestInit): Promise<GetDepartmentsResponse>;
    /**
     * Delete Department
     * Delete Department
     */
    departmentsDeleteRaw(requestParameters: HrisApiDepartmentsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteDepartmentResponse>>;
    /**
     * Delete Department
     * Delete Department
     */
    departmentsDelete(requestParameters: HrisApiDepartmentsDeleteRequest, initOverrides?: RequestInit): Promise<DeleteDepartmentResponse>;
    /**
     * Get Department
     * Get Department
     */
    departmentsOneRaw(requestParameters: HrisApiDepartmentsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetDepartmentResponse>>;
    /**
     * Get Department
     * Get Department
     */
    departmentsOne(requestParameters: HrisApiDepartmentsOneRequest, initOverrides?: RequestInit): Promise<GetDepartmentResponse>;
    /**
     * Update Department
     * Update Department
     */
    departmentsUpdateRaw(requestParameters: HrisApiDepartmentsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateDepartmentResponse>>;
    /**
     * Update Department
     * Update Department
     */
    departmentsUpdate(requestParameters: HrisApiDepartmentsUpdateRequest, initOverrides?: RequestInit): Promise<UpdateDepartmentResponse>;
    /**
     * List payrolls for employee
     * List Employee Payrolls
     */
    employeePayrollsAllRaw(requestParameters: HrisApiEmployeePayrollsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetEmployeePayrollsResponse>>;
    /**
     * List payrolls for employee
     * List Employee Payrolls
     */
    employeePayrollsAll(requestParameters: HrisApiEmployeePayrollsAllRequest, initOverrides?: RequestInit): Promise<GetEmployeePayrollsResponse>;
    /**
     * Get payroll for employee
     * Get Employee Payroll
     */
    employeePayrollsOneRaw(requestParameters: HrisApiEmployeePayrollsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetEmployeePayrollResponse>>;
    /**
     * Get payroll for employee
     * Get Employee Payroll
     */
    employeePayrollsOne(requestParameters: HrisApiEmployeePayrollsOneRequest, initOverrides?: RequestInit): Promise<GetEmployeePayrollResponse>;
    /**
     * List schedules for employee, a schedule is a work pattern, not the actual worked hours, for an employee.
     * List Employee Schedules
     */
    employeeSchedulesAllRaw(requestParameters: HrisApiEmployeeSchedulesAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetEmployeeSchedulesResponse>>;
    /**
     * List schedules for employee, a schedule is a work pattern, not the actual worked hours, for an employee.
     * List Employee Schedules
     */
    employeeSchedulesAll(requestParameters: HrisApiEmployeeSchedulesAllRequest, initOverrides?: RequestInit): Promise<GetEmployeeSchedulesResponse>;
    /**
     * Create Employee
     * Create Employee
     */
    employeesAddRaw(requestParameters: HrisApiEmployeesAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateEmployeeResponse>>;
    /**
     * Create Employee
     * Create Employee
     */
    employeesAdd(requestParameters: HrisApiEmployeesAddRequest, initOverrides?: RequestInit): Promise<CreateEmployeeResponse>;
    /**
     * List Employees
     * List Employees
     */
    employeesAllRaw(requestParameters: HrisApiEmployeesAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetEmployeesResponse>>;
    /**
     * List Employees
     * List Employees
     */
    employeesAll(requestParameters?: HrisApiEmployeesAllRequest, initOverrides?: RequestInit): Promise<GetEmployeesResponse>;
    /**
     * Delete Employee
     * Delete Employee
     */
    employeesDeleteRaw(requestParameters: HrisApiEmployeesDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteEmployeeResponse>>;
    /**
     * Delete Employee
     * Delete Employee
     */
    employeesDelete(requestParameters: HrisApiEmployeesDeleteRequest, initOverrides?: RequestInit): Promise<DeleteEmployeeResponse>;
    /**
     * Get Employee
     * Get Employee
     */
    employeesOneRaw(requestParameters: HrisApiEmployeesOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetEmployeeResponse>>;
    /**
     * Get Employee
     * Get Employee
     */
    employeesOne(requestParameters: HrisApiEmployeesOneRequest, initOverrides?: RequestInit): Promise<GetEmployeeResponse>;
    /**
     * Update Employee
     * Update Employee
     */
    employeesUpdateRaw(requestParameters: HrisApiEmployeesUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateEmployeeResponse>>;
    /**
     * Update Employee
     * Update Employee
     */
    employeesUpdate(requestParameters: HrisApiEmployeesUpdateRequest, initOverrides?: RequestInit): Promise<UpdateEmployeeResponse>;
    /**
     * List Payroll
     * List Payroll
     */
    payrollsAllRaw(requestParameters: HrisApiPayrollsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetPayrollsResponse>>;
    /**
     * List Payroll
     * List Payroll
     */
    payrollsAll(requestParameters?: HrisApiPayrollsAllRequest, initOverrides?: RequestInit): Promise<GetPayrollsResponse>;
    /**
     * Get Payroll
     * Get Payroll
     */
    payrollsOneRaw(requestParameters: HrisApiPayrollsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetPayrollResponse>>;
    /**
     * Get Payroll
     * Get Payroll
     */
    payrollsOne(requestParameters: HrisApiPayrollsOneRequest, initOverrides?: RequestInit): Promise<GetPayrollResponse>;
    /**
     * Create Time Off Request
     * Create Time Off Request
     */
    timeOffRequestsAddRaw(requestParameters: HrisApiTimeOffRequestsAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateTimeOffRequestResponse>>;
    /**
     * Create Time Off Request
     * Create Time Off Request
     */
    timeOffRequestsAdd(requestParameters: HrisApiTimeOffRequestsAddRequest, initOverrides?: RequestInit): Promise<CreateTimeOffRequestResponse>;
    /**
     * List Time Off Requests
     * List Time Off Requests
     */
    timeOffRequestsAllRaw(requestParameters: HrisApiTimeOffRequestsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetTimeOffRequestsResponse>>;
    /**
     * List Time Off Requests
     * List Time Off Requests
     */
    timeOffRequestsAll(requestParameters?: HrisApiTimeOffRequestsAllRequest, initOverrides?: RequestInit): Promise<GetTimeOffRequestsResponse>;
    /**
     * Delete Time Off Request
     * Delete Time Off Request
     */
    timeOffRequestsDeleteRaw(requestParameters: HrisApiTimeOffRequestsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteTimeOffRequestResponse>>;
    /**
     * Delete Time Off Request
     * Delete Time Off Request
     */
    timeOffRequestsDelete(requestParameters: HrisApiTimeOffRequestsDeleteRequest, initOverrides?: RequestInit): Promise<DeleteTimeOffRequestResponse>;
    /**
     * Get Time Off Request
     * Get Time Off Request
     */
    timeOffRequestsOneRaw(requestParameters: HrisApiTimeOffRequestsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetTimeOffRequestResponse>>;
    /**
     * Get Time Off Request
     * Get Time Off Request
     */
    timeOffRequestsOne(requestParameters: HrisApiTimeOffRequestsOneRequest, initOverrides?: RequestInit): Promise<GetTimeOffRequestResponse>;
    /**
     * Update Time Off Request
     * Update Time Off Request
     */
    timeOffRequestsUpdateRaw(requestParameters: HrisApiTimeOffRequestsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateTimeOffRequestResponse>>;
    /**
     * Update Time Off Request
     * Update Time Off Request
     */
    timeOffRequestsUpdate(requestParameters: HrisApiTimeOffRequestsUpdateRequest, initOverrides?: RequestInit): Promise<UpdateTimeOffRequestResponse>;
}
