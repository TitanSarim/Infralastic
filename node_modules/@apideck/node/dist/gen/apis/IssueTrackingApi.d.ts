/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CollectionsSort, CollectionTicketComment, CommentsSort, CreateCommentResponse, CreateTicketResponse, DeleteCommentResponse, DeleteTicketResponse, GetCollectionResponse, GetCollectionsResponse, GetCollectionTagsResponse, GetCollectionUserResponse, GetCollectionUsersResponse, GetCommentResponse, GetCommentsResponse, GetTicketResponse, GetTicketsResponse, IssuesFilter, PassThroughQuery, Ticket, TicketsSort, UpdateCommentResponse, UpdateTicketResponse } from '../models';
import * as runtime from '../runtime';
export interface IssueTrackingApiCollectionTagsAllRequest {
    collectionId: string;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface IssueTrackingApiCollectionTicketCommentsAddRequest {
    collectionId: string;
    ticketId: string;
    ticketComment: CollectionTicketComment;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface IssueTrackingApiCollectionTicketCommentsAllRequest {
    collectionId: string;
    ticketId: string;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    sort?: CommentsSort;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface IssueTrackingApiCollectionTicketCommentsDeleteRequest {
    id: string;
    collectionId: string;
    ticketId: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface IssueTrackingApiCollectionTicketCommentsOneRequest {
    id: string;
    collectionId: string;
    ticketId: string;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    fields?: string | null;
}
export interface IssueTrackingApiCollectionTicketCommentsUpdateRequest {
    id: string;
    collectionId: string;
    ticketId: string;
    ticketComment: CollectionTicketComment;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface IssueTrackingApiCollectionTicketsAddRequest {
    collectionId: string;
    ticket: Ticket;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
}
export interface IssueTrackingApiCollectionTicketsAllRequest {
    collectionId: string;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    sort?: TicketsSort;
    filter?: IssuesFilter;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface IssueTrackingApiCollectionTicketsDeleteRequest {
    ticketId: string;
    collectionId: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface IssueTrackingApiCollectionTicketsOneRequest {
    ticketId: string;
    collectionId: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface IssueTrackingApiCollectionTicketsUpdateRequest {
    ticketId: string;
    collectionId: string;
    ticket: Ticket;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
}
export interface IssueTrackingApiCollectionUsersAllRequest {
    collectionId: string;
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface IssueTrackingApiCollectionUsersOneRequest {
    collectionId: string;
    id: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
export interface IssueTrackingApiCollectionsAllRequest {
    raw?: boolean;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    cursor?: string | null;
    limit?: number;
    sort?: CollectionsSort;
    passThrough?: PassThroughQuery;
    fields?: string | null;
}
export interface IssueTrackingApiCollectionsOneRequest {
    collectionId: string;
    consumerId?: string;
    appId?: string;
    serviceId?: string;
    raw?: boolean;
    fields?: string | null;
}
/**
 *
 */
export declare class IssueTrackingApi extends runtime.BaseAPI {
    /**
     * List Tags
     * List Tags
     */
    collectionTagsAllRaw(requestParameters: IssueTrackingApiCollectionTagsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCollectionTagsResponse>>;
    /**
     * List Tags
     * List Tags
     */
    collectionTagsAll(requestParameters: IssueTrackingApiCollectionTagsAllRequest, initOverrides?: RequestInit): Promise<GetCollectionTagsResponse>;
    /**
     * Create Comment
     * Create Comment
     */
    ticketCommentsAddRaw(requestParameters: IssueTrackingApiCollectionTicketCommentsAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateCommentResponse>>;
    /**
     * Create Comment
     * Create Comment
     */
    ticketCommentsAdd(requestParameters: IssueTrackingApiCollectionTicketCommentsAddRequest, initOverrides?: RequestInit): Promise<CreateCommentResponse>;
    /**
     * List Comments
     * List Comments
     */
    ticketCommentsAllRaw(requestParameters: IssueTrackingApiCollectionTicketCommentsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCommentsResponse>>;
    /**
     * List Comments
     * List Comments
     */
    ticketCommentsAll(requestParameters: IssueTrackingApiCollectionTicketCommentsAllRequest, initOverrides?: RequestInit): Promise<GetCommentsResponse>;
    /**
     * Delete Comment
     * Delete Comment
     */
    ticketCommentsDeleteRaw(requestParameters: IssueTrackingApiCollectionTicketCommentsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteCommentResponse>>;
    /**
     * Delete Comment
     * Delete Comment
     */
    ticketCommentsDelete(requestParameters: IssueTrackingApiCollectionTicketCommentsDeleteRequest, initOverrides?: RequestInit): Promise<DeleteCommentResponse>;
    /**
     * Get Comment
     * Get Comment
     */
    ticketCommentsOneRaw(requestParameters: IssueTrackingApiCollectionTicketCommentsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCommentResponse>>;
    /**
     * Get Comment
     * Get Comment
     */
    ticketCommentsOne(requestParameters: IssueTrackingApiCollectionTicketCommentsOneRequest, initOverrides?: RequestInit): Promise<GetCommentResponse>;
    /**
     * Update Comment
     * Update Comment
     */
    ticketCommentsUpdateRaw(requestParameters: IssueTrackingApiCollectionTicketCommentsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateCommentResponse>>;
    /**
     * Update Comment
     * Update Comment
     */
    ticketCommentsUpdate(requestParameters: IssueTrackingApiCollectionTicketCommentsUpdateRequest, initOverrides?: RequestInit): Promise<UpdateCommentResponse>;
    /**
     * Create Ticket
     * Create Ticket
     */
    ticketsAddRaw(requestParameters: IssueTrackingApiCollectionTicketsAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateTicketResponse>>;
    /**
     * Create Ticket
     * Create Ticket
     */
    ticketsAdd(requestParameters: IssueTrackingApiCollectionTicketsAddRequest, initOverrides?: RequestInit): Promise<CreateTicketResponse>;
    /**
     * List Tickets
     * List Tickets
     */
    ticketsAllRaw(requestParameters: IssueTrackingApiCollectionTicketsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetTicketsResponse>>;
    /**
     * List Tickets
     * List Tickets
     */
    ticketsAll(requestParameters: IssueTrackingApiCollectionTicketsAllRequest, initOverrides?: RequestInit): Promise<GetTicketsResponse>;
    /**
     * Delete Ticket
     * Delete Ticket
     */
    ticketsDeleteRaw(requestParameters: IssueTrackingApiCollectionTicketsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteTicketResponse>>;
    /**
     * Delete Ticket
     * Delete Ticket
     */
    ticketsDelete(requestParameters: IssueTrackingApiCollectionTicketsDeleteRequest, initOverrides?: RequestInit): Promise<DeleteTicketResponse>;
    /**
     * Get Ticket
     * Get Ticket
     */
    ticketsOneRaw(requestParameters: IssueTrackingApiCollectionTicketsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetTicketResponse>>;
    /**
     * Get Ticket
     * Get Ticket
     */
    ticketsOne(requestParameters: IssueTrackingApiCollectionTicketsOneRequest, initOverrides?: RequestInit): Promise<GetTicketResponse>;
    /**
     * Update Ticket
     * Update Ticket
     */
    ticketsUpdateRaw(requestParameters: IssueTrackingApiCollectionTicketsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateTicketResponse>>;
    /**
     * Update Ticket
     * Update Ticket
     */
    ticketsUpdate(requestParameters: IssueTrackingApiCollectionTicketsUpdateRequest, initOverrides?: RequestInit): Promise<UpdateTicketResponse>;
    /**
     * List Users
     * List Users
     */
    collectionUsersAllRaw(requestParameters: IssueTrackingApiCollectionUsersAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCollectionUsersResponse>>;
    /**
     * List Users
     * List Users
     */
    collectionUsersAll(requestParameters: IssueTrackingApiCollectionUsersAllRequest, initOverrides?: RequestInit): Promise<GetCollectionUsersResponse>;
    /**
     * Get user
     * Get user
     */
    collectionUsersOneRaw(requestParameters: IssueTrackingApiCollectionUsersOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCollectionUserResponse>>;
    /**
     * Get user
     * Get user
     */
    collectionUsersOne(requestParameters: IssueTrackingApiCollectionUsersOneRequest, initOverrides?: RequestInit): Promise<GetCollectionUserResponse>;
    /**
     * List Collections
     * List Collections
     */
    collectionsAllRaw(requestParameters: IssueTrackingApiCollectionsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCollectionsResponse>>;
    /**
     * List Collections
     * List Collections
     */
    collectionsAll(requestParameters?: IssueTrackingApiCollectionsAllRequest, initOverrides?: RequestInit): Promise<GetCollectionsResponse>;
    /**
     * Get Collection
     * Get Collection
     */
    collectionsOneRaw(requestParameters: IssueTrackingApiCollectionsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCollectionResponse>>;
    /**
     * Get Collection
     * Get Collection
     */
    collectionsOne(requestParameters: IssueTrackingApiCollectionsOneRequest, initOverrides?: RequestInit): Promise<GetCollectionResponse>;
}
