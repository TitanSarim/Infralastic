/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Connection, ConnectionImportData, Consumer, ConsumerRequestCountsInDateRangeResponse, CreateConnectionResponse, CreateConsumerResponse, CreateSessionResponse, DeleteConsumerResponse, GetConnectionResponse, GetConnectionsResponse, GetConsumerResponse, GetConsumersResponse, GetLogsResponse, LogsFilter, Session, UpdateConnectionResponse, UpdateConsumerRequest, UpdateConsumerResponse } from '../models';
import * as runtime from '../runtime';
export interface VaultApiConnectionSettingsAllRequest {
    unifiedApi: string;
    serviceId: string;
    resource: string;
    consumerId?: string;
    appId?: string;
}
export interface VaultApiConnectionSettingsUpdateRequest {
    serviceId: string;
    unifiedApi: string;
    resource: string;
    connection: Connection;
    consumerId?: string;
    appId?: string;
}
export interface VaultApiConnectionsAllRequest {
    consumerId?: string;
    appId?: string;
    api?: string;
    configured?: boolean;
}
export interface VaultApiConnectionsDeleteRequest {
    serviceId: string;
    unifiedApi: string;
    consumerId?: string;
    appId?: string;
}
export interface VaultApiConnectionsImportRequest {
    serviceId: string;
    unifiedApi: string;
    connection: ConnectionImportData;
    consumerId?: string;
    appId?: string;
}
export interface VaultApiConnectionsOneRequest {
    serviceId: string;
    unifiedApi: string;
    consumerId?: string;
    appId?: string;
}
export interface VaultApiConnectionsUpdateRequest {
    serviceId: string;
    unifiedApi: string;
    connection: Connection;
    consumerId?: string;
    appId?: string;
}
export interface VaultApiConsumerRequestCountsAllRequest {
    consumerId: string;
    startDatetime: string;
    endDatetime: string;
    appId?: string;
}
export interface VaultApiConsumersAddRequest {
    consumer: Consumer;
    appId?: string;
}
export interface VaultApiConsumersAllRequest {
    appId?: string;
    cursor?: string | null;
    limit?: number;
}
export interface VaultApiConsumersDeleteRequest {
    consumerId: string;
    appId?: string;
}
export interface VaultApiConsumersOneRequest {
    consumerId: string;
    appId?: string;
}
export interface VaultApiConsumersUpdateRequest {
    consumerId: string;
    consumer: UpdateConsumerRequest;
    appId?: string;
}
export interface VaultApiLogsAllRequest {
    appId?: string;
    consumerId?: string;
    filter?: LogsFilter;
    cursor?: string | null;
    limit?: number;
}
export interface VaultApiSessionsCreateRequest {
    consumerId?: string;
    appId?: string;
    session?: Session;
}
/**
 *
 */
export declare class VaultApi extends runtime.BaseAPI {
    /**
     * This endpoint returns custom settings and their defaults required by connection for a given resource.
     * Get resource settings
     */
    connectionSettingsAllRaw(requestParameters: VaultApiConnectionSettingsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetConnectionResponse>>;
    /**
     * This endpoint returns custom settings and their defaults required by connection for a given resource.
     * Get resource settings
     */
    connectionSettingsAll(requestParameters: VaultApiConnectionSettingsAllRequest, initOverrides?: RequestInit): Promise<GetConnectionResponse>;
    /**
     * Update default values for a connection\'s resource settings
     * Update settings
     */
    connectionSettingsUpdateRaw(requestParameters: VaultApiConnectionSettingsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateConnectionResponse>>;
    /**
     * Update default values for a connection\'s resource settings
     * Update settings
     */
    connectionSettingsUpdate(requestParameters: VaultApiConnectionSettingsUpdateRequest, initOverrides?: RequestInit): Promise<UpdateConnectionResponse>;
    /**
     * This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
     * Get all connections
     */
    connectionsAllRaw(requestParameters: VaultApiConnectionsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetConnectionsResponse>>;
    /**
     * This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
     * Get all connections
     */
    connectionsAll(requestParameters?: VaultApiConnectionsAllRequest, initOverrides?: RequestInit): Promise<GetConnectionsResponse>;
    /**
     * Deletes a connection
     * Deletes a connection
     */
    connectionsDeleteRaw(requestParameters: VaultApiConnectionsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Deletes a connection
     * Deletes a connection
     */
    connectionsDelete(requestParameters: VaultApiConnectionsDeleteRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Import an authorized connection.
     * Import connection
     */
    connectionsImportRaw(requestParameters: VaultApiConnectionsImportRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateConnectionResponse>>;
    /**
     * Import an authorized connection.
     * Import connection
     */
    connectionsImport(requestParameters: VaultApiConnectionsImportRequest, initOverrides?: RequestInit): Promise<CreateConnectionResponse>;
    /**
     * Get a connection
     * Get connection
     */
    connectionsOneRaw(requestParameters: VaultApiConnectionsOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetConnectionResponse>>;
    /**
     * Get a connection
     * Get connection
     */
    connectionsOne(requestParameters: VaultApiConnectionsOneRequest, initOverrides?: RequestInit): Promise<GetConnectionResponse>;
    /**
     * Update a connection
     * Update connection
     */
    connectionsUpdateRaw(requestParameters: VaultApiConnectionsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateConnectionResponse>>;
    /**
     * Update a connection
     * Update connection
     */
    connectionsUpdate(requestParameters: VaultApiConnectionsUpdateRequest, initOverrides?: RequestInit): Promise<UpdateConnectionResponse>;
    /**
     * Get consumer request counts within a given datetime range.
     * Consumer request counts
     */
    consumerRequestCountsAllRaw(requestParameters: VaultApiConsumerRequestCountsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ConsumerRequestCountsInDateRangeResponse>>;
    /**
     * Get consumer request counts within a given datetime range.
     * Consumer request counts
     */
    consumerRequestCountsAll(requestParameters: VaultApiConsumerRequestCountsAllRequest, initOverrides?: RequestInit): Promise<ConsumerRequestCountsInDateRangeResponse>;
    /**
     * Create a consumer
     * Create consumer
     */
    consumersAddRaw(requestParameters: VaultApiConsumersAddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateConsumerResponse>>;
    /**
     * Create a consumer
     * Create consumer
     */
    consumersAdd(requestParameters: VaultApiConsumersAddRequest, initOverrides?: RequestInit): Promise<CreateConsumerResponse>;
    /**
     * This endpoint includes all application consumers, along with an aggregated count of requests made.
     * Get all consumers
     */
    consumersAllRaw(requestParameters: VaultApiConsumersAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetConsumersResponse>>;
    /**
     * This endpoint includes all application consumers, along with an aggregated count of requests made.
     * Get all consumers
     */
    consumersAll(requestParameters?: VaultApiConsumersAllRequest, initOverrides?: RequestInit): Promise<GetConsumersResponse>;
    /**
     * Delete consumer and all their connections, including credentials.
     * Delete consumer
     */
    consumersDeleteRaw(requestParameters: VaultApiConsumersDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteConsumerResponse>>;
    /**
     * Delete consumer and all their connections, including credentials.
     * Delete consumer
     */
    consumersDelete(requestParameters: VaultApiConsumersDeleteRequest, initOverrides?: RequestInit): Promise<DeleteConsumerResponse>;
    /**
     * Consumer detail including their aggregated counts with the connections they have authorized.
     * Get consumer
     */
    consumersOneRaw(requestParameters: VaultApiConsumersOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetConsumerResponse>>;
    /**
     * Consumer detail including their aggregated counts with the connections they have authorized.
     * Get consumer
     */
    consumersOne(requestParameters: VaultApiConsumersOneRequest, initOverrides?: RequestInit): Promise<GetConsumerResponse>;
    /**
     * Update consumer metadata such as name and email.
     * Update consumer
     */
    consumersUpdateRaw(requestParameters: VaultApiConsumersUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateConsumerResponse>>;
    /**
     * Update consumer metadata such as name and email.
     * Update consumer
     */
    consumersUpdate(requestParameters: VaultApiConsumersUpdateRequest, initOverrides?: RequestInit): Promise<UpdateConsumerResponse>;
    /**
     * This endpoint includes all consumer request logs.
     * Get all consumer request logs
     */
    logsAllRaw(requestParameters: VaultApiLogsAllRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetLogsResponse>>;
    /**
     * This endpoint includes all consumer request logs.
     * Get all consumer request logs
     */
    logsAll(requestParameters?: VaultApiLogsAllRequest, initOverrides?: RequestInit): Promise<GetLogsResponse>;
    /**
     * Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned URL to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
     * Create Session
     */
    sessionsCreateRaw(requestParameters: VaultApiSessionsCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateSessionResponse>>;
    /**
     * Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned URL to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
     * Create Session
     */
    sessionsCreate(requestParameters?: VaultApiSessionsCreateRequest, initOverrides?: RequestInit): Promise<CreateSessionResponse>;
}
