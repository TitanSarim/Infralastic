import fetch$1 from 'node-fetch-commonjs';
import { Readable } from 'stream';

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
var AccountingEventType;
(function (AccountingEventType) {
  AccountingEventType["Star"] = "*";
  AccountingEventType["accounting_customer_created"] = "accounting.customer.created";
  AccountingEventType["accounting_customer_updated"] = "accounting.customer.updated";
  AccountingEventType["accounting_customer_deleted"] = "accounting.customer.deleted";
  AccountingEventType["accounting_invoice_created"] = "accounting.invoice.created";
  AccountingEventType["accounting_invoice_updated"] = "accounting.invoice.updated";
  AccountingEventType["accounting_invoice_deleted"] = "accounting.invoice.deleted";
  AccountingEventType["accounting_invoice_item_created"] = "accounting.invoice_item.created";
  AccountingEventType["accounting_invoice_item_updated"] = "accounting.invoice_item.updated";
  AccountingEventType["accounting_invoice_item_deleted"] = "accounting.invoice_item.deleted";
  AccountingEventType["accounting_ledger_account_created"] = "accounting.ledger_account.created";
  AccountingEventType["accounting_ledger_account_updated"] = "accounting.ledger_account.updated";
  AccountingEventType["accounting_ledger_account_deleted"] = "accounting.ledger_account.deleted";
  AccountingEventType["accounting_tax_rate_created"] = "accounting.tax_rate.created";
  AccountingEventType["accounting_tax_rate_updated"] = "accounting.tax_rate.updated";
  AccountingEventType["accounting_tax_rate_deleted"] = "accounting.tax_rate.deleted";
  AccountingEventType["accounting_bill_created"] = "accounting.bill.created";
  AccountingEventType["accounting_bill_updated"] = "accounting.bill.updated";
  AccountingEventType["accounting_bill_deleted"] = "accounting.bill.deleted";
  AccountingEventType["accounting_payment_created"] = "accounting.payment.created";
  AccountingEventType["accounting_payment_updated"] = "accounting.payment.updated";
  AccountingEventType["accounting_payment_deleted"] = "accounting.payment.deleted";
  AccountingEventType["accounting_supplier_created"] = "accounting.supplier.created";
  AccountingEventType["accounting_supplier_updated"] = "accounting.supplier.updated";
  AccountingEventType["accounting_supplier_deleted"] = "accounting.supplier.deleted";
  AccountingEventType["accounting_purchase_order_created"] = "accounting.purchase-order.created";
  AccountingEventType["accounting_purchase_order_updated"] = "accounting.purchase-order.updated";
  AccountingEventType["accounting_purchase_order_deleted"] = "accounting.purchase-order.deleted";
})(AccountingEventType || (AccountingEventType = {}));
function AccountingEventTypeFromJSON(json) {
  return AccountingEventTypeFromJSONTyped(json);
}
function AccountingEventTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function AccountingEventTypeToJSON(value) {
  return value;
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
const BASE_PATH = /*#__PURE__*/'https://unify.apideck.com'.replace(/\/+$/, '');
const isBlob = value => typeof Blob !== 'undefined' && value instanceof Blob;
/**
 * This is the base class for all generated API classes.
 */
class BaseAPI {
  constructor(configuration = new Configuration()) {
    this.configuration = configuration;
    this.fetchApi = async (url, init) => {
      let fetchParams = {
        url,
        init
      };
      for (const middleware of this.middleware) {
        if (middleware.pre) {
          fetchParams = (await middleware.pre({
            fetch: this.fetchApi,
            ...fetchParams
          })) || fetchParams;
        }
      }
      let response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);
      for (const middleware of this.middleware) {
        if (middleware.post) {
          response = (await middleware.post({
            fetch: this.fetchApi,
            url: fetchParams.url,
            init: fetchParams.init,
            response: response.clone()
          })) || response;
        }
      }
      return response;
    };
    this.middleware = configuration.middleware;
  }
  withMiddleware(...middlewares) {
    const next = this.clone();
    next.middleware = next.middleware.concat(...middlewares);
    return next;
  }
  withPreMiddleware(...preMiddlewares) {
    const middlewares = preMiddlewares.map(pre => ({
      pre
    }));
    return this.withMiddleware(...middlewares);
  }
  withPostMiddleware(...postMiddlewares) {
    const middlewares = postMiddlewares.map(post => ({
      post
    }));
    return this.withMiddleware(...middlewares);
  }
  async request(context, initOverrides) {
    const {
      url,
      init
    } = this.createFetchParams(context, initOverrides);
    const response = await this.fetchApi(url, init);
    if (response.status >= 200 && response.status < 300) {
      return response;
    }
    throw response;
  }
  createFetchParams(context, initOverrides) {
    let url = this.configuration.basePath + context.path;
    if (context.query !== undefined && Object.keys(context.query).length !== 0) {
      // only add the querystring to the URL if there are query parameters.
      // this is done to avoid urls ending with a "?" character which buggy webservers
      // do not handle correctly sometimes.
      url += '?' + this.configuration.queryParamsStringify(context.query);
    }
    const body = typeof FormData !== 'undefined' && context.body instanceof FormData || context.body instanceof URLSearchParams || isBlob(context.body) ? context.body : JSON.stringify(context.body);
    const headers = Object.assign({}, this.configuration.headers, context.headers);
    const init = {
      method: context.method,
      headers: headers,
      body,
      credentials: this.configuration.credentials,
      ...initOverrides
    };
    return {
      url,
      init
    };
  }
  /**
   * Create a shallow clone of `this` by constructing a new instance
   * and then shallow cloning data members.
   */
  clone() {
    const constructor = this.constructor;
    const next = new constructor(this.configuration);
    next.middleware = this.middleware.slice();
    return next;
  }
}
class RequiredError extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = 'RequiredError';
  }
}
const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|'
};
class Configuration {
  constructor(configuration = {}) {
    this.configuration = configuration;
  }
  get basePath() {
    return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;
  }
  get fetchApi() {
    return this.configuration.fetchApi;
  }
  get middleware() {
    return this.configuration.middleware || [];
  }
  get queryParamsStringify() {
    return this.configuration.queryParamsStringify || querystring;
  }
  get username() {
    return this.configuration.username;
  }
  get password() {
    return this.configuration.password;
  }
  get apiKey() {
    const apiKey = this.configuration.apiKey;
    if (apiKey) {
      return typeof apiKey === 'function' ? apiKey : () => apiKey;
    }
    return undefined;
  }
  get accessToken() {
    const accessToken = this.configuration.accessToken;
    if (accessToken) {
      return typeof accessToken === 'function' ? accessToken : async () => accessToken;
    }
    return undefined;
  }
  get headers() {
    return this.configuration.headers;
  }
  get credentials() {
    return this.configuration.credentials;
  }
}
function exists(json, key) {
  const value = json[key];
  return value !== null && value !== undefined;
}
function querystring(params, prefix = '') {
  return Object.keys(params).map(key => {
    const fullKey = prefix + (prefix.length ? `[${key}]` : key);
    const value = params[key];
    if (value instanceof Array) {
      const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue))).join(`&${encodeURIComponent(fullKey)}=`);
      return `${encodeURIComponent(fullKey)}=${multiValue}`;
    }
    if (value instanceof Date) {
      return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;
    }
    if (value instanceof Object) {
      return querystring(value, fullKey);
    }
    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
  }).filter(part => part.length > 0).join('&');
}
function mapValues(data, fn) {
  return Object.keys(data).reduce((acc, key) => ({
    ...acc,
    [key]: fn(data[key])
  }), {});
}
function canConsumeForm(consumes) {
  for (const consume of consumes) {
    if ('multipart/form-data' === consume.contentType) {
      return true;
    }
  }
  return false;
}
class JSONApiResponse {
  constructor(raw, transformer = jsonValue => jsonValue) {
    this.raw = raw;
    this.transformer = transformer;
  }
  async value() {
    return this.transformer(await this.raw.json());
  }
}
class VoidApiResponse {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return undefined;
  }
}
class BlobApiResponse {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return await this.raw.blob();
  }
}
class TextApiResponse {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return await this.raw.text();
  }
}

/* tslint:disable */
function ActivitiesFilterFromJSON(json) {
  return ActivitiesFilterFromJSONTyped(json);
}
function ActivitiesFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    updated_since: !exists(json, 'updated_since') ? undefined : new Date(json['updated_since'])
  };
}
function ActivitiesFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    updated_since: value.updated_since === undefined ? undefined : new Date(value.updated_since).toISOString()
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ActivityAttendeeStatus;
(function (ActivityAttendeeStatus) {
  ActivityAttendeeStatus["accepted"] = "accepted";
  ActivityAttendeeStatus["tentative"] = "tentative";
  ActivityAttendeeStatus["declined"] = "declined";
})(ActivityAttendeeStatus || (ActivityAttendeeStatus = {}));
function ActivityAttendeeFromJSON(json) {
  return ActivityAttendeeFromJSONTyped(json);
}
function ActivityAttendeeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    middle_name: !exists(json, 'middle_name') ? undefined : json['middle_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    prefix: !exists(json, 'prefix') ? undefined : json['prefix'],
    suffix: !exists(json, 'suffix') ? undefined : json['suffix'],
    email_address: !exists(json, 'email_address') ? undefined : json['email_address'],
    is_organizer: !exists(json, 'is_organizer') ? undefined : json['is_organizer'],
    status: !exists(json, 'status') ? undefined : json['status'],
    user_id: !exists(json, 'user_id') ? undefined : json['user_id'],
    contact_id: !exists(json, 'contact_id') ? undefined : json['contact_id'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function ActivityAttendeeToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    first_name: value.first_name,
    middle_name: value.middle_name,
    last_name: value.last_name,
    prefix: value.prefix,
    suffix: value.suffix,
    email_address: value.email_address,
    is_organizer: value.is_organizer,
    status: value.status
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var AddressType;
(function (AddressType) {
  AddressType["primary"] = "primary";
  AddressType["secondary"] = "secondary";
  AddressType["home"] = "home";
  AddressType["office"] = "office";
  AddressType["shipping"] = "shipping";
  AddressType["billing"] = "billing";
  AddressType["other"] = "other";
})(AddressType || (AddressType = {}));
function AddressFromJSON(json) {
  return AddressFromJSONTyped(json);
}
function AddressFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    type: !exists(json, 'type') ? undefined : json['type'],
    string: !exists(json, 'string') ? undefined : json['string'],
    name: !exists(json, 'name') ? undefined : json['name'],
    line1: !exists(json, 'line1') ? undefined : json['line1'],
    line2: !exists(json, 'line2') ? undefined : json['line2'],
    line3: !exists(json, 'line3') ? undefined : json['line3'],
    line4: !exists(json, 'line4') ? undefined : json['line4'],
    street_number: !exists(json, 'street_number') ? undefined : json['street_number'],
    city: !exists(json, 'city') ? undefined : json['city'],
    state: !exists(json, 'state') ? undefined : json['state'],
    postal_code: !exists(json, 'postal_code') ? undefined : json['postal_code'],
    country: !exists(json, 'country') ? undefined : json['country'],
    latitude: !exists(json, 'latitude') ? undefined : json['latitude'],
    longitude: !exists(json, 'longitude') ? undefined : json['longitude'],
    county: !exists(json, 'county') ? undefined : json['county'],
    contact_name: !exists(json, 'contact_name') ? undefined : json['contact_name'],
    salutation: !exists(json, 'salutation') ? undefined : json['salutation'],
    phone_number: !exists(json, 'phone_number') ? undefined : json['phone_number'],
    fax: !exists(json, 'fax') ? undefined : json['fax'],
    email: !exists(json, 'email') ? undefined : json['email'],
    website: !exists(json, 'website') ? undefined : json['website'],
    notes: !exists(json, 'notes') ? undefined : json['notes'],
    row_version: !exists(json, 'row_version') ? undefined : json['row_version']
  };
}
function AddressToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    type: value.type,
    string: value.string,
    name: value.name,
    line1: value.line1,
    line2: value.line2,
    line3: value.line3,
    line4: value.line4,
    street_number: value.street_number,
    city: value.city,
    state: value.state,
    postal_code: value.postal_code,
    country: value.country,
    latitude: value.latitude,
    longitude: value.longitude,
    county: value.county,
    contact_name: value.contact_name,
    salutation: value.salutation,
    phone_number: value.phone_number,
    fax: value.fax,
    email: value.email,
    website: value.website,
    notes: value.notes,
    row_version: value.row_version
  };
}

/* tslint:disable */
function CustomFieldFromJSON(json) {
  return CustomFieldFromJSONTyped(json);
}
function CustomFieldFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    value: !exists(json, 'value') ? undefined : json['value']
  };
}
function CustomFieldToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    description: value.description,
    value: value.value
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ActivityType;
(function (ActivityType) {
  ActivityType["call"] = "call";
  ActivityType["meeting"] = "meeting";
  ActivityType["email"] = "email";
  ActivityType["note"] = "note";
  ActivityType["task"] = "task";
  ActivityType["deadline"] = "deadline";
  ActivityType["send_letter"] = "send-letter";
  ActivityType["send_quote"] = "send-quote";
  ActivityType["other"] = "other";
})(ActivityType || (ActivityType = {}));
/**
 * @export
 * @enum {string}
 */
var ActivityShowAs;
(function (ActivityShowAs) {
  ActivityShowAs["free"] = "free";
  ActivityShowAs["busy"] = "busy";
})(ActivityShowAs || (ActivityShowAs = {}));
function ActivityFromJSON(json) {
  return ActivityFromJSONTyped(json);
}
function ActivityFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: json['type'],
    id: !exists(json, 'id') ? undefined : json['id'],
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    activity_datetime: !exists(json, 'activity_datetime') ? undefined : json['activity_datetime'],
    duration_seconds: !exists(json, 'duration_seconds') ? undefined : json['duration_seconds'],
    user_id: !exists(json, 'user_id') ? undefined : json['user_id'],
    account_id: !exists(json, 'account_id') ? undefined : json['account_id'],
    contact_id: !exists(json, 'contact_id') ? undefined : json['contact_id'],
    company_id: !exists(json, 'company_id') ? undefined : json['company_id'],
    opportunity_id: !exists(json, 'opportunity_id') ? undefined : json['opportunity_id'],
    lead_id: !exists(json, 'lead_id') ? undefined : json['lead_id'],
    owner_id: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    campaign_id: !exists(json, 'campaign_id') ? undefined : json['campaign_id'],
    case_id: !exists(json, 'case_id') ? undefined : json['case_id'],
    asset_id: !exists(json, 'asset_id') ? undefined : json['asset_id'],
    contract_id: !exists(json, 'contract_id') ? undefined : json['contract_id'],
    product_id: !exists(json, 'product_id') ? undefined : json['product_id'],
    solution_id: !exists(json, 'solution_id') ? undefined : json['solution_id'],
    custom_object_id: !exists(json, 'custom_object_id') ? undefined : json['custom_object_id'],
    title: !exists(json, 'title') ? undefined : json['title'],
    description: !exists(json, 'description') ? undefined : json['description'],
    note: !exists(json, 'note') ? undefined : json['note'],
    location: !exists(json, 'location') ? undefined : json['location'],
    location_address: !exists(json, 'location_address') ? undefined : AddressFromJSON(json['location_address']),
    all_day_event: !exists(json, 'all_day_event') ? undefined : json['all_day_event'],
    _private: !exists(json, 'private') ? undefined : json['private'],
    group_event: !exists(json, 'group_event') ? undefined : json['group_event'],
    event_sub_type: !exists(json, 'event_sub_type') ? undefined : json['event_sub_type'],
    group_event_type: !exists(json, 'group_event_type') ? undefined : json['group_event_type'],
    child: !exists(json, 'child') ? undefined : json['child'],
    archived: !exists(json, 'archived') ? undefined : json['archived'],
    deleted: !exists(json, 'deleted') ? undefined : json['deleted'],
    show_as: !exists(json, 'show_as') ? undefined : json['show_as'],
    done: !exists(json, 'done') ? undefined : json['done'],
    start_datetime: !exists(json, 'start_datetime') ? undefined : json['start_datetime'],
    end_datetime: !exists(json, 'end_datetime') ? undefined : json['end_datetime'],
    duration_minutes: !exists(json, 'duration_minutes') ? undefined : json['duration_minutes'],
    activity_date: !exists(json, 'activity_date') ? undefined : json['activity_date'],
    end_date: !exists(json, 'end_date') ? undefined : json['end_date'],
    recurrent: !exists(json, 'recurrent') ? undefined : json['recurrent'],
    reminder_datetime: !exists(json, 'reminder_datetime') ? undefined : json['reminder_datetime'],
    reminder_set: !exists(json, 'reminder_set') ? undefined : json['reminder_set'],
    video_conference_url: !exists(json, 'video_conference_url') ? undefined : json['video_conference_url'],
    video_conference_id: !exists(json, 'video_conference_id') ? undefined : json['video_conference_id'],
    custom_fields: !exists(json, 'custom_fields') ? undefined : json['custom_fields'].map(CustomFieldFromJSON),
    attendees: !exists(json, 'attendees') ? undefined : json['attendees'].map(ActivityAttendeeFromJSON),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at']
  };
}
function ActivityToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    activity_datetime: value.activity_datetime,
    duration_seconds: value.duration_seconds,
    user_id: value.user_id,
    account_id: value.account_id,
    contact_id: value.contact_id,
    company_id: value.company_id,
    opportunity_id: value.opportunity_id,
    lead_id: value.lead_id,
    owner_id: value.owner_id,
    campaign_id: value.campaign_id,
    case_id: value.case_id,
    asset_id: value.asset_id,
    contract_id: value.contract_id,
    product_id: value.product_id,
    solution_id: value.solution_id,
    custom_object_id: value.custom_object_id,
    title: value.title,
    description: value.description,
    note: value.note,
    location: value.location,
    location_address: AddressToJSON(value.location_address),
    all_day_event: value.all_day_event,
    private: value._private,
    group_event: value.group_event,
    event_sub_type: value.event_sub_type,
    group_event_type: value.group_event_type,
    child: value.child,
    archived: value.archived,
    deleted: value.deleted,
    show_as: value.show_as,
    done: value.done,
    start_datetime: value.start_datetime,
    end_datetime: value.end_datetime,
    activity_date: value.activity_date,
    end_date: value.end_date,
    recurrent: value.recurrent,
    reminder_datetime: value.reminder_datetime,
    reminder_set: value.reminder_set,
    video_conference_url: value.video_conference_url,
    video_conference_id: value.video_conference_id,
    custom_fields: value.custom_fields === undefined ? undefined : value.custom_fields.map(CustomFieldToJSON),
    attendees: value.attendees === undefined ? undefined : value.attendees.map(ActivityAttendeeToJSON)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Status of the resource. Resources with status live or beta are callable.
 * @export
 * @enum {string}
 */
var ResourceStatus;
(function (ResourceStatus) {
  ResourceStatus["live"] = "live";
  ResourceStatus["beta"] = "beta";
  ResourceStatus["development"] = "development";
  ResourceStatus["upcoming"] = "upcoming";
  ResourceStatus["considering"] = "considering";
})(ResourceStatus || (ResourceStatus = {}));
function ResourceStatusFromJSON(json) {
  return ResourceStatusFromJSONTyped(json);
}
function ResourceStatusFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ResourceStatusToJSON(value) {
  return value;
}

/* tslint:disable */
function ApiResourcesFromJSON(json) {
  return ApiResourcesFromJSONTyped(json);
}
function ApiResourcesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    status: !exists(json, 'status') ? undefined : ResourceStatusFromJSON(json['status']),
    excluded_from_coverage: !exists(json, 'excluded_from_coverage') ? undefined : json['excluded_from_coverage']
  };
}
function ApiResourcesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    status: ResourceStatusToJSON(value.status),
    excluded_from_coverage: value.excluded_from_coverage
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Status of the API. APIs with status live or beta are callable.
 * @export
 * @enum {string}
 */
var ApiStatus;
(function (ApiStatus) {
  ApiStatus["live"] = "live";
  ApiStatus["beta"] = "beta";
  ApiStatus["development"] = "development";
  ApiStatus["considering"] = "considering";
})(ApiStatus || (ApiStatus = {}));
function ApiStatusFromJSON(json) {
  return ApiStatusFromJSONTyped(json);
}
function ApiStatusFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ApiStatusToJSON(value) {
  return value;
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ApiType;
(function (ApiType) {
  ApiType["platform"] = "platform";
  ApiType["unified"] = "unified";
})(ApiType || (ApiType = {}));
function ApiFromJSON(json) {
  return ApiFromJSONTyped(json);
}
function ApiFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    type: !exists(json, 'type') ? undefined : json['type'],
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    status: !exists(json, 'status') ? undefined : ApiStatusFromJSON(json['status']),
    spec_url: !exists(json, 'spec_url') ? undefined : json['spec_url'],
    api_reference_url: !exists(json, 'api_reference_url') ? undefined : json['api_reference_url'],
    postman_collection_id: !exists(json, 'postman_collection_id') ? undefined : json['postman_collection_id'],
    categories: !exists(json, 'categories') ? undefined : json['categories'],
    resources: !exists(json, 'resources') ? undefined : json['resources'].map(ApiResourcesFromJSON),
    events: !exists(json, 'events') ? undefined : json['events']
  };
}
function ApiToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    name: value.name,
    description: value.description,
    status: ApiStatusToJSON(value.status),
    spec_url: value.spec_url,
    api_reference_url: value.api_reference_url,
    postman_collection_id: value.postman_collection_id,
    categories: value.categories,
    resources: value.resources === undefined ? undefined : value.resources.map(ApiResourcesToJSON),
    events: value.events
  };
}

/* tslint:disable */
function ApiResourceLinkedResourcesFromJSON(json) {
  return ApiResourceLinkedResourcesFromJSONTyped(json);
}
function ApiResourceLinkedResourcesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    unified_property: !exists(json, 'unified_property') ? undefined : json['unified_property']
  };
}
function ApiResourceLinkedResourcesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    unified_property: value.unified_property
  };
}

/* tslint:disable */
function ApiResourceFromJSON(json) {
  return ApiResourceFromJSONTyped(json);
}
function ApiResourceFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    status: !exists(json, 'status') ? undefined : ResourceStatusFromJSON(json['status']),
    linked_resources: !exists(json, 'linked_resources') ? undefined : json['linked_resources'].map(ApiResourceLinkedResourcesFromJSON),
    schema: !exists(json, 'schema') ? undefined : json['schema']
  };
}
function ApiResourceToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    status: ResourceStatusToJSON(value.status),
    linked_resources: value.linked_resources === undefined ? undefined : value.linked_resources.map(ApiResourceLinkedResourcesToJSON),
    schema: value.schema
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var PaginationCoverageMode;
(function (PaginationCoverageMode) {
  PaginationCoverageMode["native"] = "native";
  PaginationCoverageMode["virtual"] = "virtual";
})(PaginationCoverageMode || (PaginationCoverageMode = {}));
function PaginationCoverageFromJSON(json) {
  return PaginationCoverageFromJSONTyped(json);
}
function PaginationCoverageFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    mode: !exists(json, 'mode') ? undefined : json['mode'],
    paging_support: !exists(json, 'paging_support') ? undefined : json['paging_support'],
    limit_support: !exists(json, 'limit_support') ? undefined : json['limit_support']
  };
}
function PaginationCoverageToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    mode: value.mode,
    paging_support: value.paging_support,
    limit_support: value.limit_support
  };
}

/* tslint:disable */
function SupportedPropertyChildPropertiesFromJSON(json) {
  return SupportedPropertyChildPropertiesFromJSONTyped(json);
}
function SupportedPropertyChildPropertiesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    unified_property: !exists(json, 'unified_property') ? undefined : SupportedPropertyFromJSON(json['unified_property'])
  };
}
function SupportedPropertyChildPropertiesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    unified_property: SupportedPropertyToJSON(value.unified_property)
  };
}

/* tslint:disable */
function SupportedPropertyFromJSON(json) {
  return SupportedPropertyFromJSONTyped(json);
}
function SupportedPropertyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    unified_property: !exists(json, 'unified_property') ? undefined : json['unified_property'],
    child_properties: !exists(json, 'child_properties') ? undefined : json['child_properties'].map(SupportedPropertyChildPropertiesFromJSON)
  };
}
function SupportedPropertyToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    unified_property: value.unified_property,
    child_properties: value.child_properties === undefined ? undefined : value.child_properties.map(SupportedPropertyChildPropertiesToJSON)
  };
}

/* tslint:disable */
function ApiResourceCoverageCoverageFromJSON(json) {
  return ApiResourceCoverageCoverageFromJSONTyped(json);
}
function ApiResourceCoverageCoverageFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    downstream_name: !exists(json, 'downstream_name') ? undefined : json['downstream_name'],
    pagination_supported: !exists(json, 'pagination_supported') ? undefined : json['pagination_supported'],
    pagination: !exists(json, 'pagination') ? undefined : PaginationCoverageFromJSON(json['pagination']),
    supported_operations: !exists(json, 'supported_operations') ? undefined : json['supported_operations'],
    supported_filters: !exists(json, 'supported_filters') ? undefined : json['supported_filters'],
    supported_sort_by: !exists(json, 'supported_sort_by') ? undefined : json['supported_sort_by'],
    supported_fields: !exists(json, 'supported_fields') ? undefined : json['supported_fields'].map(SupportedPropertyFromJSON),
    supported_list_fields: !exists(json, 'supported_list_fields') ? undefined : json['supported_list_fields'].map(SupportedPropertyFromJSON)
  };
}
function ApiResourceCoverageCoverageToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    downstream_id: value.downstream_id,
    downstream_name: value.downstream_name,
    pagination_supported: value.pagination_supported,
    pagination: PaginationCoverageToJSON(value.pagination),
    supported_operations: value.supported_operations,
    supported_filters: value.supported_filters,
    supported_sort_by: value.supported_sort_by,
    supported_fields: value.supported_fields === undefined ? undefined : value.supported_fields.map(SupportedPropertyToJSON),
    supported_list_fields: value.supported_list_fields === undefined ? undefined : value.supported_list_fields.map(SupportedPropertyToJSON)
  };
}

/* tslint:disable */
function ApiResourceCoverageFromJSON(json) {
  return ApiResourceCoverageFromJSONTyped(json);
}
function ApiResourceCoverageFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    status: !exists(json, 'status') ? undefined : ResourceStatusFromJSON(json['status']),
    coverage: !exists(json, 'coverage') ? undefined : json['coverage'].map(ApiResourceCoverageCoverageFromJSON)
  };
}
function ApiResourceCoverageToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    status: ResourceStatusToJSON(value.status),
    coverage: value.coverage === undefined ? undefined : value.coverage.map(ApiResourceCoverageCoverageToJSON)
  };
}

/* tslint:disable */
function ApisFilterFromJSON(json) {
  return ApisFilterFromJSONTyped(json);
}
function ApisFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status: !exists(json, 'status') ? undefined : ApiStatusFromJSON(json['status'])
  };
}
function ApisFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status: ApiStatusToJSON(value.status)
  };
}

/* tslint:disable */
function ApplicantSocialLinksFromJSON(json) {
  return ApplicantSocialLinksFromJSONTyped(json);
}
function ApplicantSocialLinksFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    url: json['url'],
    id: !exists(json, 'id') ? undefined : json['id'],
    type: !exists(json, 'type') ? undefined : json['type']
  };
}
function ApplicantSocialLinksToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    url: value.url,
    id: value.id,
    type: value.type
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ApplicantWebsitesType;
(function (ApplicantWebsitesType) {
  ApplicantWebsitesType["primary"] = "primary";
  ApplicantWebsitesType["secondary"] = "secondary";
  ApplicantWebsitesType["work"] = "work";
  ApplicantWebsitesType["personal"] = "personal";
  ApplicantWebsitesType["other"] = "other";
})(ApplicantWebsitesType || (ApplicantWebsitesType = {}));
function ApplicantWebsitesFromJSON(json) {
  return ApplicantWebsitesFromJSONTyped(json);
}
function ApplicantWebsitesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    url: json['url'],
    id: !exists(json, 'id') ? undefined : json['id'],
    type: !exists(json, 'type') ? undefined : json['type']
  };
}
function ApplicantWebsitesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    url: value.url,
    id: value.id,
    type: value.type
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var EmailType;
(function (EmailType) {
  EmailType["primary"] = "primary";
  EmailType["secondary"] = "secondary";
  EmailType["work"] = "work";
  EmailType["personal"] = "personal";
  EmailType["billing"] = "billing";
  EmailType["other"] = "other";
})(EmailType || (EmailType = {}));
function EmailFromJSON(json) {
  return EmailFromJSONTyped(json);
}
function EmailFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    email: json['email'],
    id: !exists(json, 'id') ? undefined : json['id'],
    type: !exists(json, 'type') ? undefined : json['type']
  };
}
function EmailToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    email: value.email,
    id: value.id,
    type: value.type
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var PhoneNumberType;
(function (PhoneNumberType) {
  PhoneNumberType["primary"] = "primary";
  PhoneNumberType["secondary"] = "secondary";
  PhoneNumberType["home"] = "home";
  PhoneNumberType["work"] = "work";
  PhoneNumberType["office"] = "office";
  PhoneNumberType["mobile"] = "mobile";
  PhoneNumberType["assistant"] = "assistant";
  PhoneNumberType["fax"] = "fax";
  PhoneNumberType["direct_dial_in"] = "direct-dial-in";
  PhoneNumberType["personal"] = "personal";
  PhoneNumberType["other"] = "other";
})(PhoneNumberType || (PhoneNumberType = {}));
function PhoneNumberFromJSON(json) {
  return PhoneNumberFromJSONTyped(json);
}
function PhoneNumberFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    number: json['number'],
    id: !exists(json, 'id') ? undefined : json['id'],
    country_code: !exists(json, 'country_code') ? undefined : json['country_code'],
    area_code: !exists(json, 'area_code') ? undefined : json['area_code'],
    extension: !exists(json, 'extension') ? undefined : json['extension'],
    type: !exists(json, 'type') ? undefined : json['type']
  };
}
function PhoneNumberToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    number: value.number,
    id: value.id,
    country_code: value.country_code,
    area_code: value.area_code,
    extension: value.extension,
    type: value.type
  };
}

function TagsFromJSON(json) {
  return TagsFromJSONTyped(json);
}
function TagsFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function TagsToJSON(value) {
  return value;
}

/* tslint:disable */
function ApplicantFromJSON(json) {
  return ApplicantFromJSONTyped(json);
}
function ApplicantFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    position_id: !exists(json, 'position_id') ? undefined : json['position_id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    middle_name: !exists(json, 'middle_name') ? undefined : json['middle_name'],
    initials: !exists(json, 'initials') ? undefined : json['initials'],
    birthday: !exists(json, 'birthday') ? undefined : json['birthday'] === null ? null : new Date(json['birthday']),
    cover_letter: !exists(json, 'cover_letter') ? undefined : json['cover_letter'],
    job_url: !exists(json, 'job_url') ? undefined : json['job_url'],
    photo_url: !exists(json, 'photo_url') ? undefined : json['photo_url'],
    headline: !exists(json, 'headline') ? undefined : json['headline'],
    title: !exists(json, 'title') ? undefined : json['title'],
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON),
    custom_fields: !exists(json, 'custom_fields') ? undefined : json['custom_fields'].map(CustomFieldFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    websites: !exists(json, 'websites') ? undefined : json['websites'].map(ApplicantWebsitesFromJSON),
    social_links: !exists(json, 'social_links') ? undefined : json['social_links'].map(ApplicantSocialLinksFromJSON),
    stage_id: !exists(json, 'stage_id') ? undefined : json['stage_id'],
    recruiter_id: !exists(json, 'recruiter_id') ? undefined : json['recruiter_id'],
    coordinator_id: !exists(json, 'coordinator_id') ? undefined : json['coordinator_id'],
    application_ids: !exists(json, 'application_ids') ? undefined : json['application_ids'],
    applications: !exists(json, 'applications') ? undefined : json['applications'],
    followers: !exists(json, 'followers') ? undefined : json['followers'],
    sources: !exists(json, 'sources') ? undefined : json['sources'],
    source_id: !exists(json, 'source_id') ? undefined : json['source_id'],
    confidential: !exists(json, 'confidential') ? undefined : json['confidential'],
    anonymized: !exists(json, 'anonymized') ? undefined : json['anonymized'],
    tags: !exists(json, 'tags') ? undefined : TagsFromJSON(json['tags']),
    archived: !exists(json, 'archived') ? undefined : json['archived'],
    last_interaction_at: !exists(json, 'last_interaction_at') ? undefined : json['last_interaction_at'] === null ? null : new Date(json['last_interaction_at']),
    owner_id: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    sourced_by: !exists(json, 'sourced_by') ? undefined : json['sourced_by'],
    cv_url: !exists(json, 'cv_url') ? undefined : json['cv_url'],
    record_url: !exists(json, 'record_url') ? undefined : json['record_url'],
    rejected_at: !exists(json, 'rejected_at') ? undefined : json['rejected_at'] === null ? null : new Date(json['rejected_at']),
    deleted: !exists(json, 'deleted') ? undefined : json['deleted'],
    deleted_by: !exists(json, 'deleted_by') ? undefined : json['deleted_by'],
    deleted_at: !exists(json, 'deleted_at') ? undefined : json['deleted_at'] === null ? null : new Date(json['deleted_at']),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function ApplicantToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    position_id: value.position_id,
    name: value.name,
    first_name: value.first_name,
    last_name: value.last_name,
    middle_name: value.middle_name,
    initials: value.initials,
    birthday: value.birthday === undefined ? undefined : value.birthday === null ? null : new Date(value.birthday).toISOString().substr(0, 10),
    cover_letter: value.cover_letter,
    photo_url: value.photo_url,
    headline: value.headline,
    title: value.title,
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON),
    custom_fields: value.custom_fields === undefined ? undefined : value.custom_fields.map(CustomFieldToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    websites: value.websites === undefined ? undefined : value.websites.map(ApplicantWebsitesToJSON),
    social_links: value.social_links === undefined ? undefined : value.social_links.map(ApplicantSocialLinksToJSON),
    stage_id: value.stage_id,
    recruiter_id: value.recruiter_id,
    coordinator_id: value.coordinator_id,
    application_ids: value.application_ids,
    applications: value.applications,
    followers: value.followers,
    sources: value.sources,
    confidential: value.confidential,
    anonymized: value.anonymized,
    tags: TagsToJSON(value.tags),
    archived: value.archived,
    owner_id: value.owner_id,
    record_url: value.record_url,
    deleted: value.deleted
  };
}

/* tslint:disable */
function ApplicantsFilterFromJSON(json) {
  return ApplicantsFilterFromJSONTyped(json);
}
function ApplicantsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    job_id: !exists(json, 'job_id') ? undefined : json['job_id']
  };
}
function ApplicantsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    job_id: value.job_id
  };
}

/* tslint:disable */
function ApplicationStageFromJSON(json) {
  return ApplicationStageFromJSONTyped(json);
}
function ApplicationStageFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function ApplicationStageToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ApplicationStatus;
(function (ApplicationStatus) {
  ApplicationStatus["open"] = "open";
  ApplicationStatus["rejected"] = "rejected";
  ApplicationStatus["hired"] = "hired";
  ApplicationStatus["converted"] = "converted";
  ApplicationStatus["other"] = "other";
})(ApplicationStatus || (ApplicationStatus = {}));
function ApplicationFromJSON(json) {
  return ApplicationFromJSONTyped(json);
}
function ApplicationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    applicant_id: json['applicant_id'],
    job_id: json['job_id'],
    id: !exists(json, 'id') ? undefined : json['id'],
    status: !exists(json, 'status') ? undefined : json['status'],
    stage: !exists(json, 'stage') ? undefined : ApplicationStageFromJSON(json['stage']),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function ApplicationToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    applicant_id: value.applicant_id,
    job_id: value.job_id,
    status: value.status,
    stage: ApplicationStageToJSON(value.stage)
  };
}

/* tslint:disable */
function AssigneeFromJSON(json) {
  return AssigneeFromJSONTyped(json);
}
function AssigneeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    username: !exists(json, 'username') ? undefined : json['username']
  };
}
function AssigneeToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id
  };
}

/* tslint:disable */
function AtsActivityFromJSON(json) {
  return AtsActivityFromJSONTyped(json);
}
function AtsActivityFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function AtsActivityToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {};
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
var AtsEventType;
(function (AtsEventType) {
  AtsEventType["Star"] = "*";
  AtsEventType["ats_job_created"] = "ats.job.created";
  AtsEventType["ats_job_updated"] = "ats.job.updated";
  AtsEventType["ats_job_deleted"] = "ats.job.deleted";
  AtsEventType["ats_applicant_created"] = "ats.applicant.created";
  AtsEventType["ats_applicant_updated"] = "ats.applicant.updated";
  AtsEventType["ats_applicant_deleted"] = "ats.applicant.deleted";
  AtsEventType["ats_application_created"] = "ats.application.created";
  AtsEventType["ats_application_updated"] = "ats.application.updated";
  AtsEventType["ats_application_deleted"] = "ats.application.deleted";
})(AtsEventType || (AtsEventType = {}));
function AtsEventTypeFromJSON(json) {
  return AtsEventTypeFromJSONTyped(json);
}
function AtsEventTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function AtsEventTypeToJSON(value) {
  return value;
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Type of authorization used by the connector
 * @export
 * @enum {string}
 */
var AuthType;
(function (AuthType) {
  AuthType["oauth2"] = "oauth2";
  AuthType["apiKey"] = "apiKey";
  AuthType["basic"] = "basic";
  AuthType["custom"] = "custom";
  AuthType["none"] = "none";
})(AuthType || (AuthType = {}));
function AuthTypeFromJSON(json) {
  return AuthTypeFromJSONTyped(json);
}
function AuthTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function AuthTypeToJSON(value) {
  return value;
}

/* tslint:disable */
function BadRequestResponseFromJSON(json) {
  return BadRequestResponseFromJSONTyped(json);
}
function BadRequestResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    error: !exists(json, 'error') ? undefined : json['error'],
    type_name: !exists(json, 'type_name') ? undefined : json['type_name'],
    message: !exists(json, 'message') ? undefined : json['message'],
    detail: !exists(json, 'detail') ? undefined : json['detail'],
    ref: !exists(json, 'ref') ? undefined : json['ref']
  };
}
function BadRequestResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    error: value.error,
    type_name: value.type_name,
    message: value.message,
    detail: value.detail,
    ref: value.ref
  };
}

/* tslint:disable */
function BalanceSheetAssetsCurrentAssetsAccountsFromJSON(json) {
  return BalanceSheetAssetsCurrentAssetsAccountsFromJSONTyped(json);
}
function BalanceSheetAssetsCurrentAssetsAccountsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    value: !exists(json, 'value') ? undefined : json['value']
  };
}
function BalanceSheetAssetsCurrentAssetsAccountsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    value: value.value
  };
}

/* tslint:disable */
function BalanceSheetAssetsCurrentAssetsFromJSON(json) {
  return BalanceSheetAssetsCurrentAssetsFromJSONTyped(json);
}
function BalanceSheetAssetsCurrentAssetsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    total: json['total'],
    accounts: json['accounts'].map(BalanceSheetAssetsCurrentAssetsAccountsFromJSON)
  };
}
function BalanceSheetAssetsCurrentAssetsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    accounts: value.accounts.map(BalanceSheetAssetsCurrentAssetsAccountsToJSON)
  };
}

/* tslint:disable */
function BalanceSheetAssetsFixedAssetsAccountsFromJSON(json) {
  return BalanceSheetAssetsFixedAssetsAccountsFromJSONTyped(json);
}
function BalanceSheetAssetsFixedAssetsAccountsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    value: !exists(json, 'value') ? undefined : json['value']
  };
}
function BalanceSheetAssetsFixedAssetsAccountsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    value: value.value
  };
}

/* tslint:disable */
function BalanceSheetAssetsFixedAssetsFromJSON(json) {
  return BalanceSheetAssetsFixedAssetsFromJSONTyped(json);
}
function BalanceSheetAssetsFixedAssetsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    total: json['total'],
    accounts: json['accounts'].map(BalanceSheetAssetsFixedAssetsAccountsFromJSON)
  };
}
function BalanceSheetAssetsFixedAssetsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    accounts: value.accounts.map(BalanceSheetAssetsFixedAssetsAccountsToJSON)
  };
}

/* tslint:disable */
function BalanceSheetAssetsFromJSON(json) {
  return BalanceSheetAssetsFromJSONTyped(json);
}
function BalanceSheetAssetsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    total: json['total'],
    current_assets: BalanceSheetAssetsCurrentAssetsFromJSON(json['current_assets']),
    fixed_assets: BalanceSheetAssetsFixedAssetsFromJSON(json['fixed_assets'])
  };
}
function BalanceSheetAssetsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    current_assets: BalanceSheetAssetsCurrentAssetsToJSON(value.current_assets),
    fixed_assets: BalanceSheetAssetsFixedAssetsToJSON(value.fixed_assets)
  };
}

/* tslint:disable */
function BalanceSheetEquityItemsFromJSON(json) {
  return BalanceSheetEquityItemsFromJSONTyped(json);
}
function BalanceSheetEquityItemsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    value: !exists(json, 'value') ? undefined : json['value']
  };
}
function BalanceSheetEquityItemsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    value: value.value
  };
}

/* tslint:disable */
function BalanceSheetEquityFromJSON(json) {
  return BalanceSheetEquityFromJSONTyped(json);
}
function BalanceSheetEquityFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    total: json['total'],
    items: json['items'].map(BalanceSheetEquityItemsFromJSON)
  };
}
function BalanceSheetEquityToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    items: value.items.map(BalanceSheetEquityItemsToJSON)
  };
}

/* tslint:disable */
function BalanceSheetLiabilitiesAccountsFromJSON(json) {
  return BalanceSheetLiabilitiesAccountsFromJSONTyped(json);
}
function BalanceSheetLiabilitiesAccountsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    value: !exists(json, 'value') ? undefined : json['value']
  };
}
function BalanceSheetLiabilitiesAccountsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    value: value.value
  };
}

/* tslint:disable */
function BalanceSheetLiabilitiesFromJSON(json) {
  return BalanceSheetLiabilitiesFromJSONTyped(json);
}
function BalanceSheetLiabilitiesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    total: json['total'],
    accounts: json['accounts'].map(BalanceSheetLiabilitiesAccountsFromJSON)
  };
}
function BalanceSheetLiabilitiesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    accounts: value.accounts.map(BalanceSheetLiabilitiesAccountsToJSON)
  };
}

/* tslint:disable */
function BalanceSheetFromJSON(json) {
  return BalanceSheetFromJSONTyped(json);
}
function BalanceSheetFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    report_name: json['report_name'],
    start_date: json['start_date'],
    assets: BalanceSheetAssetsFromJSON(json['assets']),
    liabilities: BalanceSheetLiabilitiesFromJSON(json['liabilities']),
    equity: BalanceSheetEquityFromJSON(json['equity']),
    id: !exists(json, 'id') ? undefined : json['id'],
    end_date: !exists(json, 'end_date') ? undefined : json['end_date'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function BalanceSheetToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    report_name: value.report_name,
    start_date: value.start_date,
    assets: BalanceSheetAssetsToJSON(value.assets),
    liabilities: BalanceSheetLiabilitiesToJSON(value.liabilities),
    equity: BalanceSheetEquityToJSON(value.equity),
    end_date: value.end_date
  };
}

/* tslint:disable */
function BalanceSheetFilterFromJSON(json) {
  return BalanceSheetFilterFromJSONTyped(json);
}
function BalanceSheetFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    start_date: !exists(json, 'start_date') ? undefined : json['start_date'],
    end_date: !exists(json, 'end_date') ? undefined : json['end_date']
  };
}
function BalanceSheetFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    start_date: value.start_date,
    end_date: value.end_date
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 * @export
 * @enum {string}
 */
var Currency;
(function (Currency) {
  Currency["UNKNOWN_CURRENCY"] = "UNKNOWN_CURRENCY";
  Currency["AED"] = "AED";
  Currency["AFN"] = "AFN";
  Currency["ALL"] = "ALL";
  Currency["AMD"] = "AMD";
  Currency["ANG"] = "ANG";
  Currency["AOA"] = "AOA";
  Currency["ARS"] = "ARS";
  Currency["AUD"] = "AUD";
  Currency["AWG"] = "AWG";
  Currency["AZN"] = "AZN";
  Currency["BAM"] = "BAM";
  Currency["BBD"] = "BBD";
  Currency["BDT"] = "BDT";
  Currency["BGN"] = "BGN";
  Currency["BHD"] = "BHD";
  Currency["BIF"] = "BIF";
  Currency["BMD"] = "BMD";
  Currency["BND"] = "BND";
  Currency["BOB"] = "BOB";
  Currency["BOV"] = "BOV";
  Currency["BRL"] = "BRL";
  Currency["BSD"] = "BSD";
  Currency["BTN"] = "BTN";
  Currency["BWP"] = "BWP";
  Currency["BYR"] = "BYR";
  Currency["BZD"] = "BZD";
  Currency["CAD"] = "CAD";
  Currency["CDF"] = "CDF";
  Currency["CHE"] = "CHE";
  Currency["CHF"] = "CHF";
  Currency["CHW"] = "CHW";
  Currency["CLF"] = "CLF";
  Currency["CLP"] = "CLP";
  Currency["CNY"] = "CNY";
  Currency["COP"] = "COP";
  Currency["COU"] = "COU";
  Currency["CRC"] = "CRC";
  Currency["CUC"] = "CUC";
  Currency["CUP"] = "CUP";
  Currency["CVE"] = "CVE";
  Currency["CZK"] = "CZK";
  Currency["DJF"] = "DJF";
  Currency["DKK"] = "DKK";
  Currency["DOP"] = "DOP";
  Currency["DZD"] = "DZD";
  Currency["EGP"] = "EGP";
  Currency["ERN"] = "ERN";
  Currency["ETB"] = "ETB";
  Currency["EUR"] = "EUR";
  Currency["FJD"] = "FJD";
  Currency["FKP"] = "FKP";
  Currency["GBP"] = "GBP";
  Currency["GEL"] = "GEL";
  Currency["GHS"] = "GHS";
  Currency["GIP"] = "GIP";
  Currency["GMD"] = "GMD";
  Currency["GNF"] = "GNF";
  Currency["GTQ"] = "GTQ";
  Currency["GYD"] = "GYD";
  Currency["HKD"] = "HKD";
  Currency["HNL"] = "HNL";
  Currency["HRK"] = "HRK";
  Currency["HTG"] = "HTG";
  Currency["HUF"] = "HUF";
  Currency["IDR"] = "IDR";
  Currency["ILS"] = "ILS";
  Currency["INR"] = "INR";
  Currency["IQD"] = "IQD";
  Currency["IRR"] = "IRR";
  Currency["ISK"] = "ISK";
  Currency["JMD"] = "JMD";
  Currency["JOD"] = "JOD";
  Currency["JPY"] = "JPY";
  Currency["KES"] = "KES";
  Currency["KGS"] = "KGS";
  Currency["KHR"] = "KHR";
  Currency["KMF"] = "KMF";
  Currency["KPW"] = "KPW";
  Currency["KRW"] = "KRW";
  Currency["KWD"] = "KWD";
  Currency["KYD"] = "KYD";
  Currency["KZT"] = "KZT";
  Currency["LAK"] = "LAK";
  Currency["LBP"] = "LBP";
  Currency["LKR"] = "LKR";
  Currency["LRD"] = "LRD";
  Currency["LSL"] = "LSL";
  Currency["LTL"] = "LTL";
  Currency["LVL"] = "LVL";
  Currency["LYD"] = "LYD";
  Currency["MAD"] = "MAD";
  Currency["MDL"] = "MDL";
  Currency["MGA"] = "MGA";
  Currency["MKD"] = "MKD";
  Currency["MMK"] = "MMK";
  Currency["MNT"] = "MNT";
  Currency["MOP"] = "MOP";
  Currency["MRO"] = "MRO";
  Currency["MUR"] = "MUR";
  Currency["MVR"] = "MVR";
  Currency["MWK"] = "MWK";
  Currency["MXN"] = "MXN";
  Currency["MXV"] = "MXV";
  Currency["MYR"] = "MYR";
  Currency["MZN"] = "MZN";
  Currency["NAD"] = "NAD";
  Currency["NGN"] = "NGN";
  Currency["NIO"] = "NIO";
  Currency["NOK"] = "NOK";
  Currency["NPR"] = "NPR";
  Currency["NZD"] = "NZD";
  Currency["OMR"] = "OMR";
  Currency["PAB"] = "PAB";
  Currency["PEN"] = "PEN";
  Currency["PGK"] = "PGK";
  Currency["PHP"] = "PHP";
  Currency["PKR"] = "PKR";
  Currency["PLN"] = "PLN";
  Currency["PYG"] = "PYG";
  Currency["QAR"] = "QAR";
  Currency["RON"] = "RON";
  Currency["RSD"] = "RSD";
  Currency["RUB"] = "RUB";
  Currency["RWF"] = "RWF";
  Currency["SAR"] = "SAR";
  Currency["SBD"] = "SBD";
  Currency["SCR"] = "SCR";
  Currency["SDG"] = "SDG";
  Currency["SEK"] = "SEK";
  Currency["SGD"] = "SGD";
  Currency["SHP"] = "SHP";
  Currency["SLL"] = "SLL";
  Currency["SOS"] = "SOS";
  Currency["SRD"] = "SRD";
  Currency["SSP"] = "SSP";
  Currency["STD"] = "STD";
  Currency["SVC"] = "SVC";
  Currency["SYP"] = "SYP";
  Currency["SZL"] = "SZL";
  Currency["THB"] = "THB";
  Currency["TJS"] = "TJS";
  Currency["TMT"] = "TMT";
  Currency["TND"] = "TND";
  Currency["TOP"] = "TOP";
  Currency["TRC"] = "TRC";
  Currency["TRY"] = "TRY";
  Currency["TTD"] = "TTD";
  Currency["TWD"] = "TWD";
  Currency["TZS"] = "TZS";
  Currency["UAH"] = "UAH";
  Currency["UGX"] = "UGX";
  Currency["USD"] = "USD";
  Currency["USN"] = "USN";
  Currency["USS"] = "USS";
  Currency["UYI"] = "UYI";
  Currency["UYU"] = "UYU";
  Currency["UZS"] = "UZS";
  Currency["VEF"] = "VEF";
  Currency["VND"] = "VND";
  Currency["VUV"] = "VUV";
  Currency["WST"] = "WST";
  Currency["XAF"] = "XAF";
  Currency["XAG"] = "XAG";
  Currency["XAU"] = "XAU";
  Currency["XBA"] = "XBA";
  Currency["XBB"] = "XBB";
  Currency["XBC"] = "XBC";
  Currency["XBD"] = "XBD";
  Currency["XCD"] = "XCD";
  Currency["XDR"] = "XDR";
  Currency["XOF"] = "XOF";
  Currency["XPD"] = "XPD";
  Currency["XPF"] = "XPF";
  Currency["XPT"] = "XPT";
  Currency["XTS"] = "XTS";
  Currency["XXX"] = "XXX";
  Currency["YER"] = "YER";
  Currency["ZAR"] = "ZAR";
  Currency["ZMK"] = "ZMK";
  Currency["ZMW"] = "ZMW";
  Currency["BTC"] = "BTC";
  Currency["ETH"] = "ETH";
})(Currency || (Currency = {}));
function CurrencyFromJSON(json) {
  return CurrencyFromJSONTyped(json);
}
function CurrencyFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function CurrencyToJSON(value) {
  return value;
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var BankAccountAccountType;
(function (BankAccountAccountType) {
  BankAccountAccountType["bank_account"] = "bank_account";
  BankAccountAccountType["credit_card"] = "credit_card";
  BankAccountAccountType["other"] = "other";
})(BankAccountAccountType || (BankAccountAccountType = {}));
function BankAccountFromJSON(json) {
  return BankAccountFromJSONTyped(json);
}
function BankAccountFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    bank_name: !exists(json, 'bank_name') ? undefined : json['bank_name'],
    account_number: !exists(json, 'account_number') ? undefined : json['account_number'],
    account_name: !exists(json, 'account_name') ? undefined : json['account_name'],
    account_type: !exists(json, 'account_type') ? undefined : json['account_type'],
    iban: !exists(json, 'iban') ? undefined : json['iban'],
    bic: !exists(json, 'bic') ? undefined : json['bic'],
    routing_number: !exists(json, 'routing_number') ? undefined : json['routing_number'],
    bsb_number: !exists(json, 'bsb_number') ? undefined : json['bsb_number'],
    branch_identifier: !exists(json, 'branch_identifier') ? undefined : json['branch_identifier'],
    bank_code: !exists(json, 'bank_code') ? undefined : json['bank_code'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency'])
  };
}
function BankAccountToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    bank_name: value.bank_name,
    account_number: value.account_number,
    account_name: value.account_name,
    account_type: value.account_type,
    iban: value.iban,
    bic: value.bic,
    routing_number: value.routing_number,
    bsb_number: value.bsb_number,
    branch_identifier: value.branch_identifier,
    bank_code: value.bank_code,
    currency: CurrencyToJSON(value.currency)
  };
}

/* tslint:disable */
function BenefitFromJSON(json) {
  return BenefitFromJSONTyped(json);
}
function BenefitFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name'],
    employee_deduction: !exists(json, 'employee_deduction') ? undefined : json['employee_deduction'],
    employer_contribution: !exists(json, 'employer_contribution') ? undefined : json['employer_contribution']
  };
}
function BenefitToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    employee_deduction: value.employee_deduction,
    employer_contribution: value.employer_contribution
  };
}

/* tslint:disable */
function LinkedInvoiceItemFromJSON(json) {
  return LinkedInvoiceItemFromJSONTyped(json);
}
function LinkedInvoiceItemFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    code: !exists(json, 'code') ? undefined : json['code'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function LinkedInvoiceItemToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    code: value.code,
    name: value.name
  };
}

/* tslint:disable */
function LinkedLedgerAccountFromJSON(json) {
  return LinkedLedgerAccountFromJSONTyped(json);
}
function LinkedLedgerAccountFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    nominal_code: !exists(json, 'nominal_code') ? undefined : json['nominal_code'],
    code: !exists(json, 'code') ? undefined : json['code']
  };
}
function LinkedLedgerAccountToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    nominal_code: value.nominal_code,
    code: value.code
  };
}

/* tslint:disable */
function LinkedTaxRateFromJSON(json) {
  return LinkedTaxRateFromJSONTyped(json);
}
function LinkedTaxRateFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    code: !exists(json, 'code') ? undefined : json['code'],
    name: !exists(json, 'name') ? undefined : json['name'],
    rate: !exists(json, 'rate') ? undefined : json['rate']
  };
}
function LinkedTaxRateToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    rate: value.rate
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var BillLineItemType;
(function (BillLineItemType) {
  BillLineItemType["item"] = "expense_item";
  BillLineItemType["account"] = "expense_account";
})(BillLineItemType || (BillLineItemType = {}));
function BillLineItemFromJSON(json) {
  return BillLineItemFromJSONTyped(json);
}
function BillLineItemFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    row_id: !exists(json, 'row_id') ? undefined : json['row_id'],
    code: !exists(json, 'code') ? undefined : json['code'],
    line_number: !exists(json, 'line_number') ? undefined : json['line_number'],
    description: !exists(json, 'description') ? undefined : json['description'],
    type: !exists(json, 'type') ? undefined : json['type'],
    tax_amount: !exists(json, 'tax_amount') ? undefined : json['tax_amount'],
    total_amount: !exists(json, 'total_amount') ? undefined : json['total_amount'],
    quantity: !exists(json, 'quantity') ? undefined : json['quantity'],
    unit_price: !exists(json, 'unit_price') ? undefined : json['unit_price'],
    unit_of_measure: !exists(json, 'unit_of_measure') ? undefined : json['unit_of_measure'],
    discount_percentage: !exists(json, 'discount_percentage') ? undefined : json['discount_percentage'],
    discount_amount: !exists(json, 'discount_amount') ? undefined : json['discount_amount'],
    location_id: !exists(json, 'location_id') ? undefined : json['location_id'],
    department_id: !exists(json, 'department_id') ? undefined : json['department_id'],
    item: !exists(json, 'item') ? undefined : LinkedInvoiceItemFromJSON(json['item']),
    tax_rate: !exists(json, 'tax_rate') ? undefined : LinkedTaxRateFromJSON(json['tax_rate']),
    ledger_account: !exists(json, 'ledger_account') ? undefined : LinkedLedgerAccountFromJSON(json['ledger_account']),
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at'])
  };
}
function BillLineItemToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    row_id: value.row_id,
    code: value.code,
    line_number: value.line_number,
    description: value.description,
    type: value.type,
    tax_amount: value.tax_amount,
    total_amount: value.total_amount,
    quantity: value.quantity,
    unit_price: value.unit_price,
    unit_of_measure: value.unit_of_measure,
    discount_percentage: value.discount_percentage,
    discount_amount: value.discount_amount,
    location_id: value.location_id,
    department_id: value.department_id,
    item: LinkedInvoiceItemToJSON(value.item),
    tax_rate: LinkedTaxRateToJSON(value.tax_rate),
    ledger_account: LinkedLedgerAccountToJSON(value.ledger_account),
    row_version: value.row_version
  };
}

/* tslint:disable */
function LinkedSupplierFromJSON(json) {
  return LinkedSupplierFromJSONTyped(json);
}
function LinkedSupplierFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    display_id: !exists(json, 'display_id') ? undefined : json['display_id'],
    display_name: !exists(json, 'display_name') ? undefined : json['display_name'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    address: !exists(json, 'address') ? undefined : AddressFromJSON(json['address'])
  };
}
function LinkedSupplierToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    display_name: value.display_name,
    address: AddressToJSON(value.address)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var BillStatus;
(function (BillStatus) {
  BillStatus["draft"] = "draft";
  BillStatus["submitted"] = "submitted";
  BillStatus["authorised"] = "authorised";
  BillStatus["partially_paid"] = "partially_paid";
  BillStatus["paid"] = "paid";
  BillStatus["void"] = "void";
  BillStatus["credit"] = "credit";
  BillStatus["deleted"] = "deleted";
})(BillStatus || (BillStatus = {}));
function BillFromJSON(json) {
  return BillFromJSONTyped(json);
}
function BillFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    bill_number: !exists(json, 'bill_number') ? undefined : json['bill_number'],
    supplier: !exists(json, 'supplier') ? undefined : LinkedSupplierFromJSON(json['supplier']),
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    currency_rate: !exists(json, 'currency_rate') ? undefined : json['currency_rate'],
    tax_inclusive: !exists(json, 'tax_inclusive') ? undefined : json['tax_inclusive'],
    bill_date: !exists(json, 'bill_date') ? undefined : new Date(json['bill_date']),
    due_date: !exists(json, 'due_date') ? undefined : new Date(json['due_date']),
    paid_date: !exists(json, 'paid_date') ? undefined : json['paid_date'] === null ? null : new Date(json['paid_date']),
    po_number: !exists(json, 'po_number') ? undefined : json['po_number'],
    reference: !exists(json, 'reference') ? undefined : json['reference'],
    line_items: !exists(json, 'line_items') ? undefined : json['line_items'].map(BillLineItemFromJSON),
    terms: !exists(json, 'terms') ? undefined : json['terms'],
    balance: !exists(json, 'balance') ? undefined : json['balance'],
    deposit: !exists(json, 'deposit') ? undefined : json['deposit'],
    sub_total: !exists(json, 'sub_total') ? undefined : json['sub_total'],
    total_tax: !exists(json, 'total_tax') ? undefined : json['total_tax'],
    total: !exists(json, 'total') ? undefined : json['total'],
    tax_code: !exists(json, 'tax_code') ? undefined : json['tax_code'],
    notes: !exists(json, 'notes') ? undefined : json['notes'],
    status: !exists(json, 'status') ? undefined : json['status'],
    ledger_account: !exists(json, 'ledger_account') ? undefined : LinkedLedgerAccountFromJSON(json['ledger_account']),
    payment_method: !exists(json, 'payment_method') ? undefined : json['payment_method'],
    channel: !exists(json, 'channel') ? undefined : json['channel'],
    language: !exists(json, 'language') ? undefined : json['language'],
    accounting_by_row: !exists(json, 'accounting_by_row') ? undefined : json['accounting_by_row'],
    bank_account: !exists(json, 'bank_account') ? undefined : BankAccountFromJSON(json['bank_account']),
    discount_percentage: !exists(json, 'discount_percentage') ? undefined : json['discount_percentage'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    row_version: !exists(json, 'row_version') ? undefined : json['row_version']
  };
}
function BillToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    bill_number: value.bill_number,
    supplier: LinkedSupplierToJSON(value.supplier),
    currency: CurrencyToJSON(value.currency),
    currency_rate: value.currency_rate,
    tax_inclusive: value.tax_inclusive,
    bill_date: value.bill_date === undefined ? undefined : new Date(value.bill_date).toISOString().substr(0, 10),
    due_date: value.due_date === undefined ? undefined : new Date(value.due_date).toISOString().substr(0, 10),
    paid_date: value.paid_date === undefined ? undefined : value.paid_date === null ? null : new Date(value.paid_date).toISOString().substr(0, 10),
    po_number: value.po_number,
    reference: value.reference,
    line_items: value.line_items === undefined ? undefined : value.line_items.map(BillLineItemToJSON),
    terms: value.terms,
    balance: value.balance,
    deposit: value.deposit,
    sub_total: value.sub_total,
    total_tax: value.total_tax,
    total: value.total,
    tax_code: value.tax_code,
    notes: value.notes,
    status: value.status,
    ledger_account: LinkedLedgerAccountToJSON(value.ledger_account),
    payment_method: value.payment_method,
    channel: value.channel,
    language: value.language,
    accounting_by_row: value.accounting_by_row,
    bank_account: BankAccountToJSON(value.bank_account),
    discount_percentage: value.discount_percentage,
    row_version: value.row_version
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The direction in which to sort the results
 * @export
 * @enum {string}
 */
var SortDirection;
(function (SortDirection) {
  SortDirection["asc"] = "asc";
  SortDirection["desc"] = "desc";
})(SortDirection || (SortDirection = {}));
function SortDirectionFromJSON(json) {
  return SortDirectionFromJSONTyped(json);
}
function SortDirectionFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function SortDirectionToJSON(value) {
  return value;
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var BillsSortBy;
(function (BillsSortBy) {
  BillsSortBy["updated_at"] = "updated_at";
})(BillsSortBy || (BillsSortBy = {}));
function BillsSortFromJSON(json) {
  return BillsSortFromJSONTyped(json);
}
function BillsSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function BillsSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

/* tslint:disable */
function BranchFromJSON(json) {
  return BranchFromJSONTyped(json);
}
function BranchFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function BranchToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name
  };
}

/* tslint:disable */
function CashDetailsFromJSON(json) {
  return CashDetailsFromJSONTyped(json);
}
function CashDetailsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    amount: !exists(json, 'amount') ? undefined : json['amount'],
    charge_back_amount: !exists(json, 'charge_back_amount') ? undefined : json['charge_back_amount']
  };
}
function CashDetailsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    amount: value.amount,
    charge_back_amount: value.charge_back_amount
  };
}

/* tslint:disable */
function CollectionFromJSON(json) {
  return CollectionFromJSONTyped(json);
}
function CollectionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    parent_id: !exists(json, 'parent_id') ? undefined : json['parent_id'],
    type: !exists(json, 'type') ? undefined : json['type'],
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function CollectionToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    parent_id: value.parent_id,
    type: value.type,
    name: value.name,
    description: value.description
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var CollectionsSortBy;
(function (CollectionsSortBy) {
  CollectionsSortBy["name"] = "name";
  CollectionsSortBy["created_at"] = "created_at";
  CollectionsSortBy["updated_at"] = "updated_at";
})(CollectionsSortBy || (CollectionsSortBy = {}));
function CollectionsSortFromJSON(json) {
  return CollectionsSortFromJSONTyped(json);
}
function CollectionsSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function CollectionsSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

/* tslint:disable */
function CollectionTagFromJSON(json) {
  return CollectionTagFromJSONTyped(json);
}
function CollectionTagFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function CollectionTagToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id
  };
}

/* tslint:disable */
function CollectionTicketCommentFromJSON(json) {
  return CollectionTicketCommentFromJSONTyped(json);
}
function CollectionTicketCommentFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    body: !exists(json, 'body') ? undefined : json['body'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function CollectionTicketCommentToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    body: value.body
  };
}

/* tslint:disable */
function CollectionUserFromJSON(json) {
  return CollectionUserFromJSONTyped(json);
}
function CollectionUserFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    email: !exists(json, 'email') ? undefined : json['email'],
    photo_url: !exists(json, 'photo_url') ? undefined : json['photo_url'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function CollectionUserToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    first_name: value.first_name,
    last_name: value.last_name,
    email: value.email,
    photo_url: value.photo_url
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var CommentsSortBy;
(function (CommentsSortBy) {
  CommentsSortBy["created_at"] = "created_at";
  CommentsSortBy["updated_at"] = "updated_at";
})(CommentsSortBy || (CommentsSortBy = {}));
function CommentsSortFromJSON(json) {
  return CommentsSortFromJSONTyped(json);
}
function CommentsSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function CommentsSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

/* tslint:disable */
function CompaniesFilterFromJSON(json) {
  return CompaniesFilterFromJSONTyped(json);
}
function CompaniesFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function CompaniesFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var CompaniesSortBy;
(function (CompaniesSortBy) {
  CompaniesSortBy["created_at"] = "created_at";
  CompaniesSortBy["updated_at"] = "updated_at";
  CompaniesSortBy["name"] = "name";
})(CompaniesSortBy || (CompaniesSortBy = {}));
function CompaniesSortFromJSON(json) {
  return CompaniesSortFromJSONTyped(json);
}
function CompaniesSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function CompaniesSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

/* tslint:disable */
function CompanyRowTypeFromJSON(json) {
  return CompanyRowTypeFromJSONTyped(json);
}
function CompanyRowTypeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function CompanyRowTypeToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name
  };
}

/* tslint:disable */
function SocialLinkFromJSON(json) {
  return SocialLinkFromJSONTyped(json);
}
function SocialLinkFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    url: json['url'],
    id: !exists(json, 'id') ? undefined : json['id'],
    type: !exists(json, 'type') ? undefined : json['type']
  };
}
function SocialLinkToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    url: value.url,
    id: value.id,
    type: value.type
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var WebsiteType;
(function (WebsiteType) {
  WebsiteType["primary"] = "primary";
  WebsiteType["secondary"] = "secondary";
  WebsiteType["work"] = "work";
  WebsiteType["personal"] = "personal";
  WebsiteType["other"] = "other";
})(WebsiteType || (WebsiteType = {}));
function WebsiteFromJSON(json) {
  return WebsiteFromJSONTyped(json);
}
function WebsiteFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    url: json['url'],
    id: !exists(json, 'id') ? undefined : json['id'],
    type: !exists(json, 'type') ? undefined : json['type']
  };
}
function WebsiteToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    url: value.url,
    id: value.id,
    type: value.type
  };
}

/* tslint:disable */
function CompanyFromJSON(json) {
  return CompanyFromJSONTyped(json);
}
function CompanyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    id: !exists(json, 'id') ? undefined : json['id'],
    interaction_count: !exists(json, 'interaction_count') ? undefined : json['interaction_count'],
    owner_id: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    image: !exists(json, 'image') ? undefined : json['image'],
    description: !exists(json, 'description') ? undefined : json['description'],
    vat_number: !exists(json, 'vat_number') ? undefined : json['vat_number'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    status: !exists(json, 'status') ? undefined : json['status'],
    fax: !exists(json, 'fax') ? undefined : json['fax'],
    annual_revenue: !exists(json, 'annual_revenue') ? undefined : json['annual_revenue'],
    number_of_employees: !exists(json, 'number_of_employees') ? undefined : json['number_of_employees'],
    industry: !exists(json, 'industry') ? undefined : json['industry'],
    ownership: !exists(json, 'ownership') ? undefined : json['ownership'],
    sales_tax_number: !exists(json, 'sales_tax_number') ? undefined : json['sales_tax_number'],
    payee_number: !exists(json, 'payee_number') ? undefined : json['payee_number'],
    abn_or_tfn: !exists(json, 'abn_or_tfn') ? undefined : json['abn_or_tfn'],
    abn_branch: !exists(json, 'abn_branch') ? undefined : json['abn_branch'],
    acn: !exists(json, 'acn') ? undefined : json['acn'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    parent_id: !exists(json, 'parent_id') ? undefined : json['parent_id'],
    bank_accounts: !exists(json, 'bank_accounts') ? undefined : json['bank_accounts'].map(BankAccountFromJSON),
    websites: !exists(json, 'websites') ? undefined : json['websites'].map(WebsiteFromJSON),
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    social_links: !exists(json, 'social_links') ? undefined : json['social_links'].map(SocialLinkFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON),
    row_type: !exists(json, 'row_type') ? undefined : CompanyRowTypeFromJSON(json['row_type']),
    custom_fields: !exists(json, 'custom_fields') ? undefined : json['custom_fields'].map(CustomFieldFromJSON),
    tags: !exists(json, 'tags') ? undefined : TagsFromJSON(json['tags']),
    read_only: !exists(json, 'read_only') ? undefined : json['read_only'],
    last_activity_at: !exists(json, 'last_activity_at') ? undefined : json['last_activity_at'] === null ? null : new Date(json['last_activity_at']),
    deleted: !exists(json, 'deleted') ? undefined : json['deleted'],
    salutation: !exists(json, 'salutation') ? undefined : json['salutation'],
    birthday: !exists(json, 'birthday') ? undefined : json['birthday'] === null ? null : new Date(json['birthday']),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function CompanyToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    owner_id: value.owner_id,
    image: value.image,
    description: value.description,
    vat_number: value.vat_number,
    currency: CurrencyToJSON(value.currency),
    status: value.status,
    fax: value.fax,
    annual_revenue: value.annual_revenue,
    number_of_employees: value.number_of_employees,
    industry: value.industry,
    ownership: value.ownership,
    sales_tax_number: value.sales_tax_number,
    payee_number: value.payee_number,
    abn_or_tfn: value.abn_or_tfn,
    abn_branch: value.abn_branch,
    acn: value.acn,
    first_name: value.first_name,
    last_name: value.last_name,
    bank_accounts: value.bank_accounts === undefined ? undefined : value.bank_accounts.map(BankAccountToJSON),
    websites: value.websites === undefined ? undefined : value.websites.map(WebsiteToJSON),
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    social_links: value.social_links === undefined ? undefined : value.social_links.map(SocialLinkToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON),
    row_type: CompanyRowTypeToJSON(value.row_type),
    custom_fields: value.custom_fields === undefined ? undefined : value.custom_fields.map(CustomFieldToJSON),
    tags: TagsToJSON(value.tags),
    read_only: value.read_only,
    salutation: value.salutation,
    birthday: value.birthday === undefined ? undefined : value.birthday === null ? null : new Date(value.birthday).toISOString().substr(0, 10)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var TaxRateStatus;
(function (TaxRateStatus) {
  TaxRateStatus["active"] = "active";
  TaxRateStatus["inactive"] = "inactive";
  TaxRateStatus["archived"] = "archived";
})(TaxRateStatus || (TaxRateStatus = {}));
function TaxRateFromJSON(json) {
  return TaxRateFromJSONTyped(json);
}
function TaxRateFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    code: !exists(json, 'code') ? undefined : json['code'],
    description: !exists(json, 'description') ? undefined : json['description'],
    effective_tax_rate: !exists(json, 'effective_tax_rate') ? undefined : json['effective_tax_rate'],
    total_tax_rate: !exists(json, 'total_tax_rate') ? undefined : json['total_tax_rate'],
    tax_payable_account_id: !exists(json, 'tax_payable_account_id') ? undefined : json['tax_payable_account_id'],
    tax_remitted_account_id: !exists(json, 'tax_remitted_account_id') ? undefined : json['tax_remitted_account_id'],
    components: !exists(json, 'components') ? undefined : json['components'],
    type: !exists(json, 'type') ? undefined : json['type'],
    report_tax_type: !exists(json, 'report_tax_type') ? undefined : json['report_tax_type'],
    original_tax_rate_id: !exists(json, 'original_tax_rate_id') ? undefined : json['original_tax_rate_id'],
    status: !exists(json, 'status') ? undefined : json['status'],
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function TaxRateToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    code: value.code,
    description: value.description,
    effective_tax_rate: value.effective_tax_rate,
    total_tax_rate: value.total_tax_rate,
    tax_payable_account_id: value.tax_payable_account_id,
    tax_remitted_account_id: value.tax_remitted_account_id,
    components: value.components,
    type: value.type,
    report_tax_type: value.report_tax_type,
    original_tax_rate_id: value.original_tax_rate_id,
    status: value.status,
    row_version: value.row_version
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var CompanyInfoStatus;
(function (CompanyInfoStatus) {
  CompanyInfoStatus["active"] = "active";
  CompanyInfoStatus["inactive"] = "inactive";
})(CompanyInfoStatus || (CompanyInfoStatus = {}));
/**
 * @export
 * @enum {string}
 */
var CompanyInfoFiscalYearStartMonth;
(function (CompanyInfoFiscalYearStartMonth) {
  CompanyInfoFiscalYearStartMonth["January"] = "January";
  CompanyInfoFiscalYearStartMonth["February"] = "February";
  CompanyInfoFiscalYearStartMonth["March"] = "March";
  CompanyInfoFiscalYearStartMonth["April"] = "April";
  CompanyInfoFiscalYearStartMonth["May"] = "May";
  CompanyInfoFiscalYearStartMonth["June"] = "June";
  CompanyInfoFiscalYearStartMonth["July"] = "July";
  CompanyInfoFiscalYearStartMonth["August"] = "August";
  CompanyInfoFiscalYearStartMonth["September"] = "September";
  CompanyInfoFiscalYearStartMonth["October"] = "October";
  CompanyInfoFiscalYearStartMonth["November"] = "November";
  CompanyInfoFiscalYearStartMonth["December"] = "December";
})(CompanyInfoFiscalYearStartMonth || (CompanyInfoFiscalYearStartMonth = {}));
function CompanyInfoFromJSON(json) {
  return CompanyInfoFromJSONTyped(json);
}
function CompanyInfoFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    status: !exists(json, 'status') ? undefined : json['status'],
    legal_name: !exists(json, 'legal_name') ? undefined : json['legal_name'],
    country: !exists(json, 'country') ? undefined : json['country'],
    sales_tax_number: !exists(json, 'sales_tax_number') ? undefined : json['sales_tax_number'],
    automated_sales_tax: !exists(json, 'automated_sales_tax') ? undefined : json['automated_sales_tax'],
    sales_tax_enabled: !exists(json, 'sales_tax_enabled') ? undefined : json['sales_tax_enabled'],
    default_sales_tax: !exists(json, 'default_sales_tax') ? undefined : TaxRateFromJSON(json['default_sales_tax']),
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    language: !exists(json, 'language') ? undefined : json['language'],
    fiscal_year_start_month: !exists(json, 'fiscal_year_start_month') ? undefined : json['fiscal_year_start_month'],
    company_start_date: !exists(json, 'company_start_date') ? undefined : new Date(json['company_start_date']),
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON),
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function CompanyInfoToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    company_name: value.company_name,
    status: value.status,
    legal_name: value.legal_name,
    country: value.country,
    sales_tax_number: value.sales_tax_number,
    automated_sales_tax: value.automated_sales_tax,
    sales_tax_enabled: value.sales_tax_enabled,
    default_sales_tax: TaxRateToJSON(value.default_sales_tax),
    currency: CurrencyToJSON(value.currency),
    language: value.language,
    fiscal_year_start_month: value.fiscal_year_start_month,
    company_start_date: value.company_start_date === undefined ? undefined : new Date(value.company_start_date).toISOString().substr(0, 10),
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON),
    row_version: value.row_version
  };
}

/* tslint:disable */
function DeductionFromJSON(json) {
  return DeductionFromJSONTyped(json);
}
function DeductionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name'],
    amount: !exists(json, 'amount') ? undefined : json['amount']
  };
}
function DeductionToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    amount: value.amount
  };
}

/* tslint:disable */
function TaxFromJSON(json) {
  return TaxFromJSONTyped(json);
}
function TaxFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name'],
    employer: !exists(json, 'employer') ? undefined : json['employer'],
    amount: !exists(json, 'amount') ? undefined : json['amount']
  };
}
function TaxToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    employer: value.employer,
    amount: value.amount
  };
}

/* tslint:disable */
function CompensationFromJSON(json) {
  return CompensationFromJSONTyped(json);
}
function CompensationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    employee_id: json['employee_id'],
    net_pay: !exists(json, 'net_pay') ? undefined : json['net_pay'],
    gross_pay: !exists(json, 'gross_pay') ? undefined : json['gross_pay'],
    taxes: !exists(json, 'taxes') ? undefined : json['taxes'] === null ? null : json['taxes'].map(TaxFromJSON),
    deductions: !exists(json, 'deductions') ? undefined : json['deductions'] === null ? null : json['deductions'].map(DeductionFromJSON),
    benefits: !exists(json, 'benefits') ? undefined : json['benefits'] === null ? null : json['benefits'].map(BenefitFromJSON)
  };
}
function CompensationToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    net_pay: value.net_pay,
    gross_pay: value.gross_pay,
    taxes: value.taxes === undefined ? undefined : value.taxes === null ? null : value.taxes.map(TaxToJSON),
    deductions: value.deductions === undefined ? undefined : value.deductions === null ? null : value.deductions.map(DeductionToJSON),
    benefits: value.benefits === undefined ? undefined : value.benefits === null ? null : value.benefits.map(BenefitToJSON)
  };
}

/* tslint:disable */
function SimpleFormFieldOptionFromJSON(json) {
  return SimpleFormFieldOptionFromJSONTyped(json);
}
function SimpleFormFieldOptionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    label: !exists(json, 'label') ? undefined : json['label'],
    value: !exists(json, 'value') ? undefined : json['value']
  };
}
function SimpleFormFieldOptionToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    label: value.label,
    value: value.value
  };
}

/* tslint:disable */
function FormFieldOptionFromJSON(json) {
  return FormFieldOptionFromJSONTyped(json);
}
function FormFieldOptionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    label: !exists(json, 'label') ? undefined : json['label'],
    value: !exists(json, 'value') ? undefined : json['value'],
    id: !exists(json, 'id') ? undefined : json['id'],
    options: !exists(json, 'options') ? undefined : json['options'].map(SimpleFormFieldOptionFromJSON)
  };
}
function FormFieldOptionToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    label: value.label,
    value: value.value,
    id: value.id,
    options: value.options === undefined ? undefined : value.options.map(SimpleFormFieldOptionToJSON)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ConnectionDefaultsTarget;
(function (ConnectionDefaultsTarget) {
  ConnectionDefaultsTarget["custom_fields"] = "custom_fields";
  ConnectionDefaultsTarget["resource"] = "resource";
})(ConnectionDefaultsTarget || (ConnectionDefaultsTarget = {}));
function ConnectionDefaultsFromJSON(json) {
  return ConnectionDefaultsFromJSONTyped(json);
}
function ConnectionDefaultsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    target: !exists(json, 'target') ? undefined : json['target'],
    id: !exists(json, 'id') ? undefined : json['id'],
    options: !exists(json, 'options') ? undefined : json['options'].map(FormFieldOptionFromJSON),
    value: !exists(json, 'value') ? undefined : json['value']
  };
}
function ConnectionDefaultsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    options: value.options === undefined ? undefined : value.options.map(FormFieldOptionToJSON),
    value: value.value
  };
}

/* tslint:disable */
function ConnectionConfigurationFromJSON(json) {
  return ConnectionConfigurationFromJSONTyped(json);
}
function ConnectionConfigurationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    resource: !exists(json, 'resource') ? undefined : json['resource'],
    defaults: !exists(json, 'defaults') ? undefined : json['defaults'].map(ConnectionDefaultsFromJSON)
  };
}
function ConnectionConfigurationToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    resource: value.resource,
    defaults: value.defaults === undefined ? undefined : value.defaults.map(ConnectionDefaultsToJSON)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * [Connection state flow](#section/Connection-state)
 * @export
 * @enum {string}
 */
var ConnectionState;
(function (ConnectionState) {
  ConnectionState["available"] = "available";
  ConnectionState["callable"] = "callable";
  ConnectionState["added"] = "added";
  ConnectionState["authorized"] = "authorized";
  ConnectionState["invalid"] = "invalid";
})(ConnectionState || (ConnectionState = {}));
function ConnectionStateFromJSON(json) {
  return ConnectionStateFromJSONTyped(json);
}
function ConnectionStateFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ConnectionStateToJSON(value) {
  return value;
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var FormFieldType;
(function (FormFieldType) {
  FormFieldType["text"] = "text";
  FormFieldType["checkbox"] = "checkbox";
  FormFieldType["tel"] = "tel";
  FormFieldType["email"] = "email";
  FormFieldType["url"] = "url";
  FormFieldType["textarea"] = "textarea";
  FormFieldType["select"] = "select";
  FormFieldType["filtered_select"] = "filtered-select";
  FormFieldType["multi_select"] = "multi-select";
  FormFieldType["datetime"] = "datetime";
  FormFieldType["date"] = "date";
  FormFieldType["time"] = "time";
  FormFieldType["number"] = "number";
})(FormFieldType || (FormFieldType = {}));
function FormFieldFromJSON(json) {
  return FormFieldFromJSONTyped(json);
}
function FormFieldFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    label: !exists(json, 'label') ? undefined : json['label'],
    placeholder: !exists(json, 'placeholder') ? undefined : json['placeholder'],
    description: !exists(json, 'description') ? undefined : json['description'],
    type: !exists(json, 'type') ? undefined : json['type'],
    required: !exists(json, 'required') ? undefined : json['required'],
    custom_field: !exists(json, 'custom_field') ? undefined : json['custom_field'],
    allow_custom_values: !exists(json, 'allow_custom_values') ? undefined : json['allow_custom_values'],
    disabled: !exists(json, 'disabled') ? undefined : json['disabled'],
    hidden: !exists(json, 'hidden') ? undefined : json['hidden'],
    sensitive: !exists(json, 'sensitive') ? undefined : json['sensitive'],
    prefix: !exists(json, 'prefix') ? undefined : json['prefix'],
    suffix: !exists(json, 'suffix') ? undefined : json['suffix'],
    options: !exists(json, 'options') ? undefined : json['options'].map(FormFieldOptionFromJSON)
  };
}
function FormFieldToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    label: value.label,
    placeholder: value.placeholder,
    description: value.description,
    type: value.type,
    required: value.required,
    custom_field: value.custom_field,
    allow_custom_values: value.allow_custom_values,
    disabled: value.disabled,
    hidden: value.hidden,
    sensitive: value.sensitive,
    prefix: value.prefix,
    suffix: value.suffix,
    options: value.options === undefined ? undefined : value.options.map(FormFieldOptionToJSON)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The current state of the Integration.
 * @export
 * @enum {string}
 */
var IntegrationState;
(function (IntegrationState) {
  IntegrationState["disabled"] = "disabled";
  IntegrationState["needs_configuration"] = "needs_configuration";
  IntegrationState["configured"] = "configured";
})(IntegrationState || (IntegrationState = {}));
function IntegrationStateFromJSON(json) {
  return IntegrationStateFromJSONTyped(json);
}
function IntegrationStateFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function IntegrationStateToJSON(value) {
  return value;
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
 * @export
 * @enum {string}
 */
var OAuthGrantType;
(function (OAuthGrantType) {
  OAuthGrantType["authorization_code"] = "authorization_code";
  OAuthGrantType["client_credentials"] = "client_credentials";
  OAuthGrantType["password"] = "password";
})(OAuthGrantType || (OAuthGrantType = {}));
function OAuthGrantTypeFromJSON(json) {
  return OAuthGrantTypeFromJSONTyped(json);
}
function OAuthGrantTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function OAuthGrantTypeToJSON(value) {
  return value;
}

/* tslint:disable */
function WebhookSubscriptionFromJSON(json) {
  return WebhookSubscriptionFromJSONTyped(json);
}
function WebhookSubscriptionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    unify_event_types: !exists(json, 'unify_event_types') ? undefined : json['unify_event_types'],
    downstream_event_types: !exists(json, 'downstream_event_types') ? undefined : json['downstream_event_types'],
    execute_url: !exists(json, 'execute_url') ? undefined : json['execute_url'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at']
  };
}
function WebhookSubscriptionToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    downstream_id: value.downstream_id,
    unify_event_types: value.unify_event_types,
    downstream_event_types: value.downstream_event_types,
    execute_url: value.execute_url,
    created_at: value.created_at
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ConnectionStatus;
(function (ConnectionStatus) {
  ConnectionStatus["live"] = "live";
  ConnectionStatus["upcoming"] = "upcoming";
  ConnectionStatus["requested"] = "requested";
})(ConnectionStatus || (ConnectionStatus = {}));
function ConnectionFromJSON(json) {
  return ConnectionFromJSONTyped(json);
}
function ConnectionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    service_id: !exists(json, 'service_id') ? undefined : json['service_id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    tag_line: !exists(json, 'tag_line') ? undefined : json['tag_line'],
    unified_api: !exists(json, 'unified_api') ? undefined : json['unified_api'],
    state: !exists(json, 'state') ? undefined : ConnectionStateFromJSON(json['state']),
    integration_state: !exists(json, 'integration_state') ? undefined : IntegrationStateFromJSON(json['integration_state']),
    auth_type: !exists(json, 'auth_type') ? undefined : AuthTypeFromJSON(json['auth_type']),
    oauth_grant_type: !exists(json, 'oauth_grant_type') ? undefined : OAuthGrantTypeFromJSON(json['oauth_grant_type']),
    status: !exists(json, 'status') ? undefined : json['status'],
    enabled: !exists(json, 'enabled') ? undefined : json['enabled'],
    website: !exists(json, 'website') ? undefined : json['website'],
    icon: !exists(json, 'icon') ? undefined : json['icon'],
    logo: !exists(json, 'logo') ? undefined : json['logo'],
    authorize_url: !exists(json, 'authorize_url') ? undefined : json['authorize_url'],
    revoke_url: !exists(json, 'revoke_url') ? undefined : json['revoke_url'],
    settings: !exists(json, 'settings') ? undefined : json['settings'],
    metadata: !exists(json, 'metadata') ? undefined : json['metadata'],
    form_fields: !exists(json, 'form_fields') ? undefined : json['form_fields'].map(FormFieldFromJSON),
    _configuration: !exists(json, 'configuration') ? undefined : json['configuration'].map(ConnectionConfigurationFromJSON),
    configurable_resources: !exists(json, 'configurable_resources') ? undefined : json['configurable_resources'],
    resource_schema_support: !exists(json, 'resource_schema_support') ? undefined : json['resource_schema_support'],
    resource_settings_support: !exists(json, 'resource_settings_support') ? undefined : json['resource_settings_support'],
    validation_support: !exists(json, 'validation_support') ? undefined : json['validation_support'],
    settings_required_for_authorization: !exists(json, 'settings_required_for_authorization') ? undefined : json['settings_required_for_authorization'],
    subscriptions: !exists(json, 'subscriptions') ? undefined : json['subscriptions'].map(WebhookSubscriptionFromJSON),
    has_guide: !exists(json, 'has_guide') ? undefined : json['has_guide'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at']
  };
}
function ConnectionToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    state: ConnectionStateToJSON(value.state),
    integration_state: IntegrationStateToJSON(value.integration_state),
    auth_type: AuthTypeToJSON(value.auth_type),
    oauth_grant_type: OAuthGrantTypeToJSON(value.oauth_grant_type),
    enabled: value.enabled,
    settings: value.settings,
    metadata: value.metadata,
    configuration: value._configuration === undefined ? undefined : value._configuration.map(ConnectionConfigurationToJSON)
  };
}

/* tslint:disable */
function ConnectionImportDataCredentialsFromJSON(json) {
  return ConnectionImportDataCredentialsFromJSONTyped(json);
}
function ConnectionImportDataCredentialsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    refresh_token: json['refresh_token'],
    access_token: !exists(json, 'access_token') ? undefined : json['access_token'],
    issued_at: !exists(json, 'issued_at') ? undefined : json['issued_at'] === null ? null : new Date(json['issued_at']),
    expires_in: !exists(json, 'expires_in') ? undefined : json['expires_in']
  };
}
function ConnectionImportDataCredentialsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    refresh_token: value.refresh_token,
    access_token: value.access_token,
    issued_at: value.issued_at === undefined ? undefined : value.issued_at === null ? null : new Date(value.issued_at).toISOString(),
    expires_in: value.expires_in
  };
}

/* tslint:disable */
function ConnectionImportDataFromJSON(json) {
  return ConnectionImportDataFromJSONTyped(json);
}
function ConnectionImportDataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    credentials: !exists(json, 'credentials') ? undefined : ConnectionImportDataCredentialsFromJSON(json['credentials']),
    settings: !exists(json, 'settings') ? undefined : json['settings'],
    metadata: !exists(json, 'metadata') ? undefined : json['metadata']
  };
}
function ConnectionImportDataToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    credentials: ConnectionImportDataCredentialsToJSON(value.credentials),
    settings: value.settings,
    metadata: value.metadata
  };
}

/* tslint:disable */
function ConnectionMetadataFromJSON(json) {
  return ConnectionMetadataFromJSONTyped(json);
}
function ConnectionMetadataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function ConnectionMetadataToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Name of Apideck Unified API
 * @export
 * @enum {string}
 */
var UnifiedApiId;
(function (UnifiedApiId) {
  UnifiedApiId["accounting"] = "accounting";
  UnifiedApiId["ats"] = "ats";
  UnifiedApiId["calendar"] = "calendar";
  UnifiedApiId["crm"] = "crm";
  UnifiedApiId["csp"] = "csp";
  UnifiedApiId["customer_support"] = "customer-support";
  UnifiedApiId["ecommerce"] = "ecommerce";
  UnifiedApiId["email"] = "email";
  UnifiedApiId["email_marketing"] = "email-marketing";
  UnifiedApiId["expense_management"] = "expense-management";
  UnifiedApiId["file_storage"] = "file-storage";
  UnifiedApiId["form"] = "form";
  UnifiedApiId["hris"] = "hris";
  UnifiedApiId["lead"] = "lead";
  UnifiedApiId["payroll"] = "payroll";
  UnifiedApiId["pos"] = "pos";
  UnifiedApiId["procurement"] = "procurement";
  UnifiedApiId["project_management"] = "project-management";
  UnifiedApiId["script"] = "script";
  UnifiedApiId["sms"] = "sms";
  UnifiedApiId["spreadsheet"] = "spreadsheet";
  UnifiedApiId["team_messaging"] = "team-messaging";
  UnifiedApiId["issue_tracking"] = "issue-tracking";
  UnifiedApiId["time_registration"] = "time-registration";
  UnifiedApiId["transactional_email"] = "transactional-email";
  UnifiedApiId["vault"] = "vault";
  UnifiedApiId["data_warehouse"] = "data-warehouse";
})(UnifiedApiId || (UnifiedApiId = {}));
function UnifiedApiIdFromJSON(json) {
  return UnifiedApiIdFromJSONTyped(json);
}
function UnifiedApiIdFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function UnifiedApiIdToJSON(value) {
  return value;
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ConnectionWebhookStatus;
(function (ConnectionWebhookStatus) {
  ConnectionWebhookStatus["enabled"] = "enabled";
  ConnectionWebhookStatus["disabled"] = "disabled";
})(ConnectionWebhookStatus || (ConnectionWebhookStatus = {}));
/**
 * @export
 * @enum {string}
 */
var ConnectionWebhookEvents;
(function (ConnectionWebhookEvents) {
  ConnectionWebhookEvents["Star"] = "*";
  ConnectionWebhookEvents["crm_activity_created"] = "crm.activity.created";
  ConnectionWebhookEvents["crm_activity_updated"] = "crm.activity.updated";
  ConnectionWebhookEvents["crm_activity_deleted"] = "crm.activity.deleted";
  ConnectionWebhookEvents["crm_company_created"] = "crm.company.created";
  ConnectionWebhookEvents["crm_company_updated"] = "crm.company.updated";
  ConnectionWebhookEvents["crm_company_deleted"] = "crm.company.deleted";
  ConnectionWebhookEvents["crm_contact_created"] = "crm.contact.created";
  ConnectionWebhookEvents["crm_contact_updated"] = "crm.contact.updated";
  ConnectionWebhookEvents["crm_contact_deleted"] = "crm.contact.deleted";
  ConnectionWebhookEvents["crm_lead_created"] = "crm.lead.created";
  ConnectionWebhookEvents["crm_lead_updated"] = "crm.lead.updated";
  ConnectionWebhookEvents["crm_lead_deleted"] = "crm.lead.deleted";
  ConnectionWebhookEvents["crm_note_created"] = "crm.note.created";
  ConnectionWebhookEvents["crm_notes_updated"] = "crm.notes.updated";
  ConnectionWebhookEvents["crm_notes_deleted"] = "crm.notes.deleted";
  ConnectionWebhookEvents["crm_opportunity_created"] = "crm.opportunity.created";
  ConnectionWebhookEvents["crm_opportunity_updated"] = "crm.opportunity.updated";
  ConnectionWebhookEvents["crm_opportunity_deleted"] = "crm.opportunity.deleted";
  ConnectionWebhookEvents["lead_lead_created"] = "lead.lead.created";
  ConnectionWebhookEvents["lead_lead_updated"] = "lead.lead.updated";
  ConnectionWebhookEvents["lead_lead_deleted"] = "lead.lead.deleted";
  ConnectionWebhookEvents["vault_connection_created"] = "vault.connection.created";
  ConnectionWebhookEvents["vault_connection_updated"] = "vault.connection.updated";
  ConnectionWebhookEvents["vault_connection_disabled"] = "vault.connection.disabled";
  ConnectionWebhookEvents["vault_connection_deleted"] = "vault.connection.deleted";
  ConnectionWebhookEvents["vault_connection_callable"] = "vault.connection.callable";
  ConnectionWebhookEvents["vault_connection_revoked"] = "vault.connection.revoked";
  ConnectionWebhookEvents["vault_connection_token_refresh_failed"] = "vault.connection.token_refresh.failed";
  ConnectionWebhookEvents["ats_job_created"] = "ats.job.created";
  ConnectionWebhookEvents["ats_job_updated"] = "ats.job.updated";
  ConnectionWebhookEvents["ats_job_deleted"] = "ats.job.deleted";
  ConnectionWebhookEvents["ats_applicant_created"] = "ats.applicant.created";
  ConnectionWebhookEvents["ats_applicant_updated"] = "ats.applicant.updated";
  ConnectionWebhookEvents["ats_applicant_deleted"] = "ats.applicant.deleted";
  ConnectionWebhookEvents["accounting_customer_created"] = "accounting.customer.created";
  ConnectionWebhookEvents["accounting_customer_updated"] = "accounting.customer.updated";
  ConnectionWebhookEvents["accounting_customer_deleted"] = "accounting.customer.deleted";
  ConnectionWebhookEvents["accounting_invoice_created"] = "accounting.invoice.created";
  ConnectionWebhookEvents["accounting_invoice_updated"] = "accounting.invoice.updated";
  ConnectionWebhookEvents["accounting_invoice_deleted"] = "accounting.invoice.deleted";
  ConnectionWebhookEvents["accounting_invoice_item_created"] = "accounting.invoice_item.created";
  ConnectionWebhookEvents["accounting_invoice_item_updated"] = "accounting.invoice_item.updated";
  ConnectionWebhookEvents["accounting_invoice_item_deleted"] = "accounting.invoice_item.deleted";
  ConnectionWebhookEvents["accounting_ledger_account_created"] = "accounting.ledger_account.created";
  ConnectionWebhookEvents["accounting_ledger_account_updated"] = "accounting.ledger_account.updated";
  ConnectionWebhookEvents["accounting_ledger_account_deleted"] = "accounting.ledger_account.deleted";
  ConnectionWebhookEvents["accounting_tax_rate_created"] = "accounting.tax_rate.created";
  ConnectionWebhookEvents["accounting_tax_rate_updated"] = "accounting.tax_rate.updated";
  ConnectionWebhookEvents["accounting_tax_rate_deleted"] = "accounting.tax_rate.deleted";
  ConnectionWebhookEvents["accounting_bill_created"] = "accounting.bill.created";
  ConnectionWebhookEvents["accounting_bill_updated"] = "accounting.bill.updated";
  ConnectionWebhookEvents["accounting_bill_deleted"] = "accounting.bill.deleted";
  ConnectionWebhookEvents["accounting_payment_created"] = "accounting.payment.created";
  ConnectionWebhookEvents["accounting_payment_updated"] = "accounting.payment.updated";
  ConnectionWebhookEvents["accounting_payment_deleted"] = "accounting.payment.deleted";
  ConnectionWebhookEvents["accounting_supplier_created"] = "accounting.supplier.created";
  ConnectionWebhookEvents["accounting_supplier_updated"] = "accounting.supplier.updated";
  ConnectionWebhookEvents["accounting_supplier_deleted"] = "accounting.supplier.deleted";
  ConnectionWebhookEvents["accounting_purchase_order_created"] = "accounting.purchase-order.created";
  ConnectionWebhookEvents["accounting_purchase_order_updated"] = "accounting.purchase-order.updated";
  ConnectionWebhookEvents["accounting_purchase_order_deleted"] = "accounting.purchase-order.deleted";
  ConnectionWebhookEvents["pos_order_created"] = "pos.order.created";
  ConnectionWebhookEvents["pos_order_updated"] = "pos.order.updated";
  ConnectionWebhookEvents["pos_order_deleted"] = "pos.order.deleted";
  ConnectionWebhookEvents["pos_product_created"] = "pos.product.created";
  ConnectionWebhookEvents["pos_product_updated"] = "pos.product.updated";
  ConnectionWebhookEvents["pos_product_deleted"] = "pos.product.deleted";
  ConnectionWebhookEvents["pos_payment_created"] = "pos.payment.created";
  ConnectionWebhookEvents["pos_payment_updated"] = "pos.payment.updated";
  ConnectionWebhookEvents["pos_payment_deleted"] = "pos.payment.deleted";
  ConnectionWebhookEvents["pos_merchant_created"] = "pos.merchant.created";
  ConnectionWebhookEvents["pos_merchant_updated"] = "pos.merchant.updated";
  ConnectionWebhookEvents["pos_merchant_deleted"] = "pos.merchant.deleted";
  ConnectionWebhookEvents["pos_location_created"] = "pos.location.created";
  ConnectionWebhookEvents["pos_location_updated"] = "pos.location.updated";
  ConnectionWebhookEvents["pos_location_deleted"] = "pos.location.deleted";
  ConnectionWebhookEvents["pos_item_created"] = "pos.item.created";
  ConnectionWebhookEvents["pos_item_updated"] = "pos.item.updated";
  ConnectionWebhookEvents["pos_item_deleted"] = "pos.item.deleted";
  ConnectionWebhookEvents["pos_modifier_created"] = "pos.modifier.created";
  ConnectionWebhookEvents["pos_modifier_updated"] = "pos.modifier.updated";
  ConnectionWebhookEvents["pos_modifier_deleted"] = "pos.modifier.deleted";
  ConnectionWebhookEvents["pos_modifier_group_created"] = "pos.modifier-group.created";
  ConnectionWebhookEvents["pos_modifier_group_updated"] = "pos.modifier-group.updated";
  ConnectionWebhookEvents["pos_modifier_group_deleted"] = "pos.modifier-group.deleted";
  ConnectionWebhookEvents["hris_employee_created"] = "hris.employee.created";
  ConnectionWebhookEvents["hris_employee_updated"] = "hris.employee.updated";
  ConnectionWebhookEvents["hris_employee_deleted"] = "hris.employee.deleted";
  ConnectionWebhookEvents["hris_employee_terminated"] = "hris.employee.terminated";
  ConnectionWebhookEvents["hris_company_created"] = "hris.company.created";
  ConnectionWebhookEvents["hris_company_updated"] = "hris.company.updated";
  ConnectionWebhookEvents["hris_company_deleted"] = "hris.company.deleted";
  ConnectionWebhookEvents["file_storage_file_created"] = "file-storage.file.created";
  ConnectionWebhookEvents["file_storage_file_updated"] = "file-storage.file.updated";
  ConnectionWebhookEvents["file_storage_file_deleted"] = "file-storage.file.deleted";
  ConnectionWebhookEvents["issue_tracking_ticket_created"] = "issue-tracking.ticket.created";
  ConnectionWebhookEvents["issue_tracking_ticket_updated"] = "issue-tracking.ticket.updated";
  ConnectionWebhookEvents["issue_tracking_ticket_deleted"] = "issue-tracking.ticket.deleted";
  ConnectionWebhookEvents["ats_application_created"] = "ats.application.created";
  ConnectionWebhookEvents["ats_application_updated"] = "ats.application.updated";
  ConnectionWebhookEvents["ats_application_deleted"] = "ats.application.deleted";
})(ConnectionWebhookEvents || (ConnectionWebhookEvents = {}));
/**
 * @export
 * @enum {string}
 */
var ConnectionWebhookDisabledReason;
(function (ConnectionWebhookDisabledReason) {
  ConnectionWebhookDisabledReason["none"] = "none";
  ConnectionWebhookDisabledReason["retry_limit"] = "retry_limit";
  ConnectionWebhookDisabledReason["usage_limit"] = "usage_limit";
})(ConnectionWebhookDisabledReason || (ConnectionWebhookDisabledReason = {}));
function ConnectionWebhookFromJSON(json) {
  return ConnectionWebhookFromJSONTyped(json);
}
function ConnectionWebhookFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    unified_api: UnifiedApiIdFromJSON(json['unified_api']),
    status: json['status'],
    delivery_url: json['delivery_url'],
    execute_base_url: json['execute_base_url'],
    events: json['events'],
    id: !exists(json, 'id') ? undefined : json['id'],
    description: !exists(json, 'description') ? undefined : json['description'],
    disabled_reason: !exists(json, 'disabled_reason') ? undefined : json['disabled_reason'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function ConnectionWebhookToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    unified_api: UnifiedApiIdToJSON(value.unified_api),
    status: value.status,
    delivery_url: value.delivery_url,
    events: value.events,
    description: value.description,
    disabled_reason: value.disabled_reason
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ConnectorDocAudience;
(function (ConnectorDocAudience) {
  ConnectorDocAudience["application_owner"] = "application_owner";
  ConnectorDocAudience["consumer"] = "consumer";
})(ConnectorDocAudience || (ConnectorDocAudience = {}));
/**
 * @export
 * @enum {string}
 */
var ConnectorDocFormat;
(function (ConnectorDocFormat) {
  ConnectorDocFormat["markdown"] = "markdown";
})(ConnectorDocFormat || (ConnectorDocFormat = {}));
function ConnectorDocFromJSON(json) {
  return ConnectorDocFromJSONTyped(json);
}
function ConnectorDocFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    audience: !exists(json, 'audience') ? undefined : json['audience'],
    format: !exists(json, 'format') ? undefined : json['format'],
    url: !exists(json, 'url') ? undefined : json['url']
  };
}
function ConnectorDocToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    audience: value.audience,
    format: value.format,
    url: value.url
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ConnectorEventEventSource;
(function (ConnectorEventEventSource) {
  ConnectorEventEventSource["native"] = "native";
  ConnectorEventEventSource["virtual"] = "virtual";
})(ConnectorEventEventSource || (ConnectorEventEventSource = {}));
function ConnectorEventFromJSON(json) {
  return ConnectorEventFromJSONTyped(json);
}
function ConnectorEventFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    event_type: !exists(json, 'event_type') ? undefined : json['event_type'],
    event_source: !exists(json, 'event_source') ? undefined : json['event_source'],
    downstream_event_type: !exists(json, 'downstream_event_type') ? undefined : json['downstream_event_type'],
    resources: !exists(json, 'resources') ? undefined : json['resources'],
    entity_type: !exists(json, 'entity_type') ? undefined : json['entity_type']
  };
}
function ConnectorEventToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    event_type: value.event_type,
    event_source: value.event_source,
    downstream_event_type: value.downstream_event_type,
    resources: value.resources,
    entity_type: value.entity_type
  };
}

/* tslint:disable */
function ConnectorOauthScopesFromJSON(json) {
  return ConnectorOauthScopesFromJSONTyped(json);
}
function ConnectorOauthScopesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    label: !exists(json, 'label') ? undefined : json['label'],
    default_apis: !exists(json, 'default_apis') ? undefined : json['default_apis']
  };
}
function ConnectorOauthScopesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    label: value.label,
    default_apis: value.default_apis
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ConnectorSettingType;
(function (ConnectorSettingType) {
  ConnectorSettingType["text"] = "text";
  ConnectorSettingType["checkbox"] = "checkbox";
  ConnectorSettingType["tel"] = "tel";
  ConnectorSettingType["email"] = "email";
  ConnectorSettingType["url"] = "url";
  ConnectorSettingType["textarea"] = "textarea";
  ConnectorSettingType["select"] = "select";
  ConnectorSettingType["filtered_select"] = "filtered-select";
  ConnectorSettingType["multi_select"] = "multi-select";
  ConnectorSettingType["datetime"] = "datetime";
  ConnectorSettingType["date"] = "date";
  ConnectorSettingType["time"] = "time";
  ConnectorSettingType["number"] = "number";
  ConnectorSettingType["password"] = "password";
})(ConnectorSettingType || (ConnectorSettingType = {}));
function ConnectorSettingFromJSON(json) {
  return ConnectorSettingFromJSONTyped(json);
}
function ConnectorSettingFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    label: !exists(json, 'label') ? undefined : json['label'],
    type: !exists(json, 'type') ? undefined : json['type']
  };
}
function ConnectorSettingToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    label: value.label,
    type: value.type
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Status of the connector. Connectors with status live or beta are callable.
 * @export
 * @enum {string}
 */
var ConnectorStatus;
(function (ConnectorStatus) {
  ConnectorStatus["live"] = "live";
  ConnectorStatus["beta"] = "beta";
  ConnectorStatus["development"] = "development";
  ConnectorStatus["considering"] = "considering";
})(ConnectorStatus || (ConnectorStatus = {}));
function ConnectorStatusFromJSON(json) {
  return ConnectorStatusFromJSONTyped(json);
}
function ConnectorStatusFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ConnectorStatusToJSON(value) {
  return value;
}

/* tslint:disable */
function ConnectorTlsSupportFromJSON(json) {
  return ConnectorTlsSupportFromJSONTyped(json);
}
function ConnectorTlsSupportFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: !exists(json, 'type') ? undefined : json['type'],
    description: !exists(json, 'description') ? undefined : json['description']
  };
}
function ConnectorTlsSupportToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    description: value.description
  };
}

/* tslint:disable */
function ConnectorOauthScopes1FromJSON(json) {
  return ConnectorOauthScopes1FromJSONTyped(json);
}
function ConnectorOauthScopes1FromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    label: !exists(json, 'label') ? undefined : json['label']
  };
}
function ConnectorOauthScopes1ToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    label: value.label
  };
}

/* tslint:disable */
function LinkedConnectorResourceFromJSON(json) {
  return LinkedConnectorResourceFromJSONTyped(json);
}
function LinkedConnectorResourceFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    status: !exists(json, 'status') ? undefined : ResourceStatusFromJSON(json['status']),
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    downstream_name: !exists(json, 'downstream_name') ? undefined : json['downstream_name']
  };
}
function LinkedConnectorResourceToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    status: ResourceStatusToJSON(value.status),
    downstream_id: value.downstream_id,
    downstream_name: value.downstream_name
  };
}

/* tslint:disable */
function ConnectorUnifiedApisFromJSON(json) {
  return ConnectorUnifiedApisFromJSONTyped(json);
}
function ConnectorUnifiedApisFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : UnifiedApiIdFromJSON(json['id']),
    name: !exists(json, 'name') ? undefined : json['name'],
    auth_only: !exists(json, 'auth_only') ? undefined : json['auth_only'],
    oauth_scopes: !exists(json, 'oauth_scopes') ? undefined : json['oauth_scopes'].map(ConnectorOauthScopes1FromJSON),
    supported_resources: !exists(json, 'supported_resources') ? undefined : json['supported_resources'].map(LinkedConnectorResourceFromJSON),
    downstream_unsupported_resources: !exists(json, 'downstream_unsupported_resources') ? undefined : json['downstream_unsupported_resources'],
    supported_events: !exists(json, 'supported_events') ? undefined : json['supported_events'].map(ConnectorEventFromJSON)
  };
}
function ConnectorUnifiedApisToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: UnifiedApiIdToJSON(value.id),
    name: value.name,
    oauth_scopes: value.oauth_scopes === undefined ? undefined : value.oauth_scopes.map(ConnectorOauthScopes1ToJSON),
    supported_resources: value.supported_resources === undefined ? undefined : value.supported_resources.map(LinkedConnectorResourceToJSON),
    downstream_unsupported_resources: value.downstream_unsupported_resources,
    supported_events: value.supported_events === undefined ? undefined : value.supported_events.map(ConnectorEventToJSON)
  };
}

/**
 * @export
 * @enum {string}
 */
var RequestRateUnit;
(function (RequestRateUnit) {
  RequestRateUnit["second"] = "second";
  RequestRateUnit["minute"] = "minute";
  RequestRateUnit["hour"] = "hour";
  RequestRateUnit["day"] = "day";
})(RequestRateUnit || (RequestRateUnit = {}));
function RequestRateFromJSON(json) {
  return RequestRateFromJSONTyped(json);
}
function RequestRateFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    rate: json['rate'],
    size: json['size'],
    unit: json['unit']
  };
}
function RequestRateToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    rate: value.rate,
    size: value.size,
    unit: value.unit
  };
}

/* tslint:disable */
function VirtualWebhooksFromJSON(json) {
  return VirtualWebhooksFromJSONTyped(json);
}
function VirtualWebhooksFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    request_rate: RequestRateFromJSON(json['request_rate']),
    resources: !exists(json, 'resources') ? undefined : json['resources']
  };
}
function VirtualWebhooksToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    request_rate: RequestRateToJSON(value.request_rate),
    resources: value.resources
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var WebhookSupportMode;
(function (WebhookSupportMode) {
  WebhookSupportMode["native"] = "native";
  WebhookSupportMode["virtual"] = "virtual";
  WebhookSupportMode["none"] = "none";
})(WebhookSupportMode || (WebhookSupportMode = {}));
/**
 * @export
 * @enum {string}
 */
var WebhookSupportSubscriptionLevel;
(function (WebhookSupportSubscriptionLevel) {
  WebhookSupportSubscriptionLevel["connection"] = "connection";
  WebhookSupportSubscriptionLevel["integration"] = "integration";
})(WebhookSupportSubscriptionLevel || (WebhookSupportSubscriptionLevel = {}));
/**
 * @export
 * @enum {string}
 */
var WebhookSupportManagedVia;
(function (WebhookSupportManagedVia) {
  WebhookSupportManagedVia["manual"] = "manual";
  WebhookSupportManagedVia["api"] = "api";
})(WebhookSupportManagedVia || (WebhookSupportManagedVia = {}));
function WebhookSupportFromJSON(json) {
  return WebhookSupportFromJSONTyped(json);
}
function WebhookSupportFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    mode: !exists(json, 'mode') ? undefined : json['mode'],
    subscription_level: !exists(json, 'subscription_level') ? undefined : json['subscription_level'],
    managed_via: !exists(json, 'managed_via') ? undefined : json['managed_via'],
    virtual_webhooks: !exists(json, 'virtual_webhooks') ? undefined : VirtualWebhooksFromJSON(json['virtual_webhooks'])
  };
}
function WebhookSupportToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    mode: value.mode,
    subscription_level: value.subscription_level,
    managed_via: value.managed_via,
    virtual_webhooks: VirtualWebhooksToJSON(value.virtual_webhooks)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ConnectorAuthType;
(function (ConnectorAuthType) {
  ConnectorAuthType["oauth2"] = "oauth2";
  ConnectorAuthType["apiKey"] = "apiKey";
  ConnectorAuthType["basic"] = "basic";
  ConnectorAuthType["custom"] = "custom";
  ConnectorAuthType["none"] = "none";
})(ConnectorAuthType || (ConnectorAuthType = {}));
/**
 * @export
 * @enum {string}
 */
var ConnectorOauthGrantType;
(function (ConnectorOauthGrantType) {
  ConnectorOauthGrantType["authorization_code"] = "authorization_code";
  ConnectorOauthGrantType["client_credentials"] = "client_credentials";
  ConnectorOauthGrantType["password"] = "password";
})(ConnectorOauthGrantType || (ConnectorOauthGrantType = {}));
/**
 * @export
 * @enum {string}
 */
var ConnectorOauthCredentialsSource;
(function (ConnectorOauthCredentialsSource) {
  ConnectorOauthCredentialsSource["integration"] = "integration";
  ConnectorOauthCredentialsSource["connection"] = "connection";
})(ConnectorOauthCredentialsSource || (ConnectorOauthCredentialsSource = {}));
function ConnectorFromJSON(json) {
  return ConnectorFromJSONTyped(json);
}
function ConnectorFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    status: !exists(json, 'status') ? undefined : ConnectorStatusFromJSON(json['status']),
    description: !exists(json, 'description') ? undefined : json['description'],
    icon_url: !exists(json, 'icon_url') ? undefined : json['icon_url'],
    logo_url: !exists(json, 'logo_url') ? undefined : json['logo_url'],
    website_url: !exists(json, 'website_url') ? undefined : json['website_url'],
    signup_url: !exists(json, 'signup_url') ? undefined : json['signup_url'],
    partner_signup_url: !exists(json, 'partner_signup_url') ? undefined : json['partner_signup_url'],
    free_trial_available: !exists(json, 'free_trial_available') ? undefined : json['free_trial_available'],
    auth_type: !exists(json, 'auth_type') ? undefined : json['auth_type'],
    auth_only: !exists(json, 'auth_only') ? undefined : json['auth_only'],
    blind_mapped: !exists(json, 'blind_mapped') ? undefined : json['blind_mapped'],
    oauth_grant_type: !exists(json, 'oauth_grant_type') ? undefined : json['oauth_grant_type'],
    oauth_credentials_source: !exists(json, 'oauth_credentials_source') ? undefined : json['oauth_credentials_source'],
    oauth_scopes: !exists(json, 'oauth_scopes') ? undefined : json['oauth_scopes'].map(ConnectorOauthScopesFromJSON),
    custom_scopes: !exists(json, 'custom_scopes') ? undefined : json['custom_scopes'],
    has_sandbox_credentials: !exists(json, 'has_sandbox_credentials') ? undefined : json['has_sandbox_credentials'],
    settings: !exists(json, 'settings') ? undefined : json['settings'].map(ConnectorSettingFromJSON),
    service_id: !exists(json, 'service_id') ? undefined : json['service_id'],
    unified_apis: !exists(json, 'unified_apis') ? undefined : json['unified_apis'].map(ConnectorUnifiedApisFromJSON),
    supported_resources: !exists(json, 'supported_resources') ? undefined : json['supported_resources'].map(LinkedConnectorResourceFromJSON),
    configurable_resources: !exists(json, 'configurable_resources') ? undefined : json['configurable_resources'],
    supported_events: !exists(json, 'supported_events') ? undefined : json['supported_events'].map(ConnectorEventFromJSON),
    webhook_support: !exists(json, 'webhook_support') ? undefined : WebhookSupportFromJSON(json['webhook_support']),
    docs: !exists(json, 'docs') ? undefined : json['docs'].map(ConnectorDocFromJSON),
    tls_support: !exists(json, 'tls_support') ? undefined : ConnectorTlsSupportFromJSON(json['tls_support'])
  };
}
function ConnectorToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    status: ConnectorStatusToJSON(value.status),
    description: value.description,
    icon_url: value.icon_url,
    logo_url: value.logo_url,
    website_url: value.website_url,
    signup_url: value.signup_url,
    partner_signup_url: value.partner_signup_url,
    free_trial_available: value.free_trial_available,
    oauth_scopes: value.oauth_scopes === undefined ? undefined : value.oauth_scopes.map(ConnectorOauthScopesToJSON),
    has_sandbox_credentials: value.has_sandbox_credentials,
    settings: value.settings === undefined ? undefined : value.settings.map(ConnectorSettingToJSON),
    service_id: value.service_id,
    unified_apis: value.unified_apis === undefined ? undefined : value.unified_apis.map(ConnectorUnifiedApisToJSON),
    supported_resources: value.supported_resources === undefined ? undefined : value.supported_resources.map(LinkedConnectorResourceToJSON),
    configurable_resources: value.configurable_resources,
    supported_events: value.supported_events === undefined ? undefined : value.supported_events.map(ConnectorEventToJSON),
    webhook_support: WebhookSupportToJSON(value.webhook_support),
    docs: value.docs === undefined ? undefined : value.docs.map(ConnectorDocToJSON),
    tls_support: ConnectorTlsSupportToJSON(value.tls_support)
  };
}

/* tslint:disable */
function ConnectorResourceFromJSON(json) {
  return ConnectorResourceFromJSONTyped(json);
}
function ConnectorResourceFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    downstream_name: !exists(json, 'downstream_name') ? undefined : json['downstream_name'],
    status: !exists(json, 'status') ? undefined : ResourceStatusFromJSON(json['status']),
    pagination_supported: !exists(json, 'pagination_supported') ? undefined : json['pagination_supported'],
    pagination: !exists(json, 'pagination') ? undefined : PaginationCoverageFromJSON(json['pagination']),
    custom_fields_supported: !exists(json, 'custom_fields_supported') ? undefined : json['custom_fields_supported'],
    supported_operations: !exists(json, 'supported_operations') ? undefined : json['supported_operations'],
    downstream_unsupported_operations: !exists(json, 'downstream_unsupported_operations') ? undefined : json['downstream_unsupported_operations'],
    supported_filters: !exists(json, 'supported_filters') ? undefined : json['supported_filters'],
    supported_sort_by: !exists(json, 'supported_sort_by') ? undefined : json['supported_sort_by'],
    supported_fields: !exists(json, 'supported_fields') ? undefined : json['supported_fields'].map(SupportedPropertyFromJSON),
    supported_list_fields: !exists(json, 'supported_list_fields') ? undefined : json['supported_list_fields'].map(SupportedPropertyFromJSON)
  };
}
function ConnectorResourceToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    downstream_id: value.downstream_id,
    downstream_name: value.downstream_name,
    status: ResourceStatusToJSON(value.status),
    pagination_supported: value.pagination_supported,
    pagination: PaginationCoverageToJSON(value.pagination),
    custom_fields_supported: value.custom_fields_supported,
    supported_operations: value.supported_operations,
    downstream_unsupported_operations: value.downstream_unsupported_operations,
    supported_filters: value.supported_filters,
    supported_sort_by: value.supported_sort_by,
    supported_fields: value.supported_fields === undefined ? undefined : value.supported_fields.map(SupportedPropertyToJSON),
    supported_list_fields: value.supported_list_fields === undefined ? undefined : value.supported_list_fields.map(SupportedPropertyToJSON)
  };
}

/* tslint:disable */
function ConnectorsFilterFromJSON(json) {
  return ConnectorsFilterFromJSONTyped(json);
}
function ConnectorsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    unified_api: !exists(json, 'unified_api') ? undefined : UnifiedApiIdFromJSON(json['unified_api']),
    status: !exists(json, 'status') ? undefined : ConnectorStatusFromJSON(json['status'])
  };
}
function ConnectorsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    unified_api: UnifiedApiIdToJSON(value.unified_api),
    status: ConnectorStatusToJSON(value.status)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ConsumerConnectionState;
(function (ConsumerConnectionState) {
  ConsumerConnectionState["available"] = "available";
  ConsumerConnectionState["callable"] = "callable";
  ConsumerConnectionState["added"] = "added";
  ConsumerConnectionState["configured"] = "configured";
  ConsumerConnectionState["authorized"] = "authorized";
})(ConsumerConnectionState || (ConsumerConnectionState = {}));
function ConsumerConnectionFromJSON(json) {
  return ConsumerConnectionFromJSONTyped(json);
}
function ConsumerConnectionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    icon: !exists(json, 'icon') ? undefined : json['icon'],
    logo: !exists(json, 'logo') ? undefined : json['logo'],
    website: !exists(json, 'website') ? undefined : json['website'],
    tag_line: !exists(json, 'tag_line') ? undefined : json['tag_line'],
    service_id: !exists(json, 'service_id') ? undefined : json['service_id'],
    unified_api: !exists(json, 'unified_api') ? undefined : json['unified_api'],
    consumer_id: !exists(json, 'consumer_id') ? undefined : json['consumer_id'],
    auth_type: !exists(json, 'auth_type') ? undefined : AuthTypeFromJSON(json['auth_type']),
    enabled: !exists(json, 'enabled') ? undefined : json['enabled'],
    settings: !exists(json, 'settings') ? undefined : json['settings'],
    metadata: !exists(json, 'metadata') ? undefined : json['metadata'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'],
    state: !exists(json, 'state') ? undefined : json['state']
  };
}
function ConsumerConnectionToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    icon: value.icon,
    logo: value.logo,
    service_id: value.service_id,
    unified_api: value.unified_api,
    consumer_id: value.consumer_id,
    auth_type: AuthTypeToJSON(value.auth_type),
    enabled: value.enabled,
    settings: value.settings,
    metadata: value.metadata,
    created_at: value.created_at,
    updated_at: value.updated_at,
    state: value.state
  };
}

/* tslint:disable */
function ConsumerMetadataFromJSON(json) {
  return ConsumerMetadataFromJSONTyped(json);
}
function ConsumerMetadataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    account_name: !exists(json, 'account_name') ? undefined : json['account_name'],
    user_name: !exists(json, 'user_name') ? undefined : json['user_name'],
    email: !exists(json, 'email') ? undefined : json['email'],
    image: !exists(json, 'image') ? undefined : json['image']
  };
}
function ConsumerMetadataToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    account_name: value.account_name,
    user_name: value.user_name,
    email: value.email,
    image: value.image
  };
}

/* tslint:disable */
function RequestCountAllocationFromJSON(json) {
  return RequestCountAllocationFromJSONTyped(json);
}
function RequestCountAllocationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    unify: !exists(json, 'unify') ? undefined : json['unify'],
    proxy: !exists(json, 'proxy') ? undefined : json['proxy'],
    vault: !exists(json, 'vault') ? undefined : json['vault']
  };
}
function RequestCountAllocationToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    unify: value.unify,
    proxy: value.proxy,
    vault: value.vault
  };
}

/* tslint:disable */
function ConsumerFromJSON(json) {
  return ConsumerFromJSONTyped(json);
}
function ConsumerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    consumer_id: json['consumer_id'],
    application_id: !exists(json, 'application_id') ? undefined : json['application_id'],
    metadata: !exists(json, 'metadata') ? undefined : ConsumerMetadataFromJSON(json['metadata']),
    connections: !exists(json, 'connections') ? undefined : json['connections'].map(ConsumerConnectionFromJSON),
    services: !exists(json, 'services') ? undefined : json['services'],
    aggregated_request_count: !exists(json, 'aggregated_request_count') ? undefined : json['aggregated_request_count'],
    request_counts: !exists(json, 'request_counts') ? undefined : RequestCountAllocationFromJSON(json['request_counts']),
    created: !exists(json, 'created') ? undefined : json['created'],
    modified: !exists(json, 'modified') ? undefined : json['modified'],
    request_count_updated: !exists(json, 'request_count_updated') ? undefined : json['request_count_updated']
  };
}
function ConsumerToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    consumer_id: value.consumer_id,
    metadata: ConsumerMetadataToJSON(value.metadata),
    request_counts: RequestCountAllocationToJSON(value.request_counts)
  };
}

/* tslint:disable */
function ConsumerRequestCountsInDateRangeResponseDataFromJSON(json) {
  return ConsumerRequestCountsInDateRangeResponseDataFromJSONTyped(json);
}
function ConsumerRequestCountsInDateRangeResponseDataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    application_id: !exists(json, 'application_id') ? undefined : json['application_id'],
    consumer_id: !exists(json, 'consumer_id') ? undefined : json['consumer_id'],
    start_datetime: !exists(json, 'start_datetime') ? undefined : json['start_datetime'],
    end_datetime: !exists(json, 'end_datetime') ? undefined : json['end_datetime'],
    aggregated_request_count: !exists(json, 'aggregated_request_count') ? undefined : json['aggregated_request_count'],
    request_counts: !exists(json, 'request_counts') ? undefined : RequestCountAllocationFromJSON(json['request_counts'])
  };
}
function ConsumerRequestCountsInDateRangeResponseDataToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    application_id: value.application_id,
    consumer_id: value.consumer_id,
    start_datetime: value.start_datetime,
    end_datetime: value.end_datetime,
    aggregated_request_count: value.aggregated_request_count,
    request_counts: RequestCountAllocationToJSON(value.request_counts)
  };
}

/* tslint:disable */
function ConsumerRequestCountsInDateRangeResponseFromJSON(json) {
  return ConsumerRequestCountsInDateRangeResponseFromJSONTyped(json);
}
function ConsumerRequestCountsInDateRangeResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ConsumerRequestCountsInDateRangeResponseDataFromJSON(json['data'])
  };
}
function ConsumerRequestCountsInDateRangeResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ConsumerRequestCountsInDateRangeResponseDataToJSON(value.data)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ContactType;
(function (ContactType) {
  ContactType["customer"] = "customer";
  ContactType["supplier"] = "supplier";
  ContactType["employee"] = "employee";
  ContactType["personal"] = "personal";
})(ContactType || (ContactType = {}));
/**
 * @export
 * @enum {string}
 */
var ContactGender;
(function (ContactGender) {
  ContactGender["male"] = "male";
  ContactGender["female"] = "female";
  ContactGender["unisex"] = "unisex";
})(ContactGender || (ContactGender = {}));
function ContactFromJSON(json) {
  return ContactFromJSONTyped(json);
}
function ContactFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    id: !exists(json, 'id') ? undefined : json['id'],
    owner_id: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    type: !exists(json, 'type') ? undefined : json['type'],
    company_id: !exists(json, 'company_id') ? undefined : json['company_id'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    lead_id: !exists(json, 'lead_id') ? undefined : json['lead_id'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    middle_name: !exists(json, 'middle_name') ? undefined : json['middle_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    prefix: !exists(json, 'prefix') ? undefined : json['prefix'],
    suffix: !exists(json, 'suffix') ? undefined : json['suffix'],
    title: !exists(json, 'title') ? undefined : json['title'],
    department: !exists(json, 'department') ? undefined : json['department'],
    language: !exists(json, 'language') ? undefined : json['language'],
    gender: !exists(json, 'gender') ? undefined : json['gender'],
    birthday: !exists(json, 'birthday') ? undefined : json['birthday'],
    image: !exists(json, 'image') ? undefined : json['image'],
    photo_url: !exists(json, 'photo_url') ? undefined : json['photo_url'],
    lead_source: !exists(json, 'lead_source') ? undefined : json['lead_source'],
    fax: !exists(json, 'fax') ? undefined : json['fax'],
    description: !exists(json, 'description') ? undefined : json['description'],
    current_balance: !exists(json, 'current_balance') ? undefined : json['current_balance'],
    status: !exists(json, 'status') ? undefined : json['status'],
    active: !exists(json, 'active') ? undefined : json['active'],
    websites: !exists(json, 'websites') ? undefined : json['websites'].map(WebsiteFromJSON),
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    social_links: !exists(json, 'social_links') ? undefined : json['social_links'].map(SocialLinkFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON),
    email_domain: !exists(json, 'email_domain') ? undefined : json['email_domain'],
    custom_fields: !exists(json, 'custom_fields') ? undefined : json['custom_fields'].map(CustomFieldFromJSON),
    tags: !exists(json, 'tags') ? undefined : TagsFromJSON(json['tags']),
    first_call_at: !exists(json, 'first_call_at') ? undefined : json['first_call_at'] === null ? null : new Date(json['first_call_at']),
    first_email_at: !exists(json, 'first_email_at') ? undefined : json['first_email_at'] === null ? null : new Date(json['first_email_at']),
    last_activity_at: !exists(json, 'last_activity_at') ? undefined : json['last_activity_at'] === null ? null : new Date(json['last_activity_at']),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function ContactToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    owner_id: value.owner_id,
    type: value.type,
    company_id: value.company_id,
    company_name: value.company_name,
    lead_id: value.lead_id,
    first_name: value.first_name,
    middle_name: value.middle_name,
    last_name: value.last_name,
    prefix: value.prefix,
    suffix: value.suffix,
    title: value.title,
    department: value.department,
    language: value.language,
    gender: value.gender,
    birthday: value.birthday,
    image: value.image,
    photo_url: value.photo_url,
    lead_source: value.lead_source,
    fax: value.fax,
    description: value.description,
    current_balance: value.current_balance,
    status: value.status,
    active: value.active,
    websites: value.websites === undefined ? undefined : value.websites.map(WebsiteToJSON),
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    social_links: value.social_links === undefined ? undefined : value.social_links.map(SocialLinkToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON),
    email_domain: value.email_domain,
    custom_fields: value.custom_fields === undefined ? undefined : value.custom_fields.map(CustomFieldToJSON),
    tags: TagsToJSON(value.tags)
  };
}

/* tslint:disable */
function ContactsFilterFromJSON(json) {
  return ContactsFilterFromJSONTyped(json);
}
function ContactsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    email: !exists(json, 'email') ? undefined : json['email'],
    company_id: !exists(json, 'company_id') ? undefined : json['company_id']
  };
}
function ContactsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    first_name: value.first_name,
    last_name: value.last_name,
    email: value.email,
    company_id: value.company_id
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ContactsSortBy;
(function (ContactsSortBy) {
  ContactsSortBy["created_at"] = "created_at";
  ContactsSortBy["updated_at"] = "updated_at";
  ContactsSortBy["name"] = "name";
  ContactsSortBy["first_name"] = "first_name";
  ContactsSortBy["last_name"] = "last_name";
  ContactsSortBy["email"] = "email";
})(ContactsSortBy || (ContactsSortBy = {}));
function ContactsSortFromJSON(json) {
  return ContactsSortFromJSONTyped(json);
}
function ContactsSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function ContactsSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

/* tslint:disable */
function CopyFolderRequestFromJSON(json) {
  return CopyFolderRequestFromJSONTyped(json);
}
function CopyFolderRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    parent_folder_id: json['parent_folder_id'],
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function CopyFolderRequestToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    parent_folder_id: value.parent_folder_id,
    name: value.name
  };
}

function UnifiedIdFromJSON(json) {
  return UnifiedIdFromJSONTyped(json);
}
function UnifiedIdFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id']
  };
}
function UnifiedIdToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {};
}

/* tslint:disable */
function CreateActivityResponseFromJSON(json) {
  return CreateActivityResponseFromJSONTyped(json);
}
function CreateActivityResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateActivityResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateApplicantResponseFromJSON(json) {
  return CreateApplicantResponseFromJSONTyped(json);
}
function CreateApplicantResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateApplicantResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateApplicationResponseFromJSON(json) {
  return CreateApplicationResponseFromJSONTyped(json);
}
function CreateApplicationResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateApplicationResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateBillResponseFromJSON(json) {
  return CreateBillResponseFromJSONTyped(json);
}
function CreateBillResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateBillResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateCommentResponseFromJSON(json) {
  return CreateCommentResponseFromJSONTyped(json);
}
function CreateCommentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateCommentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateCompanyResponseFromJSON(json) {
  return CreateCompanyResponseFromJSONTyped(json);
}
function CreateCompanyResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateCompanyResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateConnectionResponseFromJSON(json) {
  return CreateConnectionResponseFromJSONTyped(json);
}
function CreateConnectionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ConnectionFromJSON(json['data'])
  };
}
function CreateConnectionResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ConnectionToJSON(value.data)
  };
}

/* tslint:disable */
function CreateConsumerResponseFromJSON(json) {
  return CreateConsumerResponseFromJSONTyped(json);
}
function CreateConsumerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ConsumerFromJSON(json['data'])
  };
}
function CreateConsumerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ConsumerToJSON(value.data)
  };
}

/* tslint:disable */
function CreateContactResponseFromJSON(json) {
  return CreateContactResponseFromJSONTyped(json);
}
function CreateContactResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateContactResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateCreditNoteResponseFromJSON(json) {
  return CreateCreditNoteResponseFromJSONTyped(json);
}
function CreateCreditNoteResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateCreditNoteResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateCustomerResponseFromJSON(json) {
  return CreateCustomerResponseFromJSONTyped(json);
}
function CreateCustomerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateCustomerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateDepartmentResponseFromJSON(json) {
  return CreateDepartmentResponseFromJSONTyped(json);
}
function CreateDepartmentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateDepartmentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateDriveGroupResponseFromJSON(json) {
  return CreateDriveGroupResponseFromJSONTyped(json);
}
function CreateDriveGroupResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateDriveGroupResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateDriveResponseFromJSON(json) {
  return CreateDriveResponseFromJSONTyped(json);
}
function CreateDriveResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateDriveResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateEcommerceCustomerResponseFromJSON(json) {
  return CreateEcommerceCustomerResponseFromJSONTyped(json);
}
function CreateEcommerceCustomerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateEcommerceCustomerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateEcommerceOrderResponseFromJSON(json) {
  return CreateEcommerceOrderResponseFromJSONTyped(json);
}
function CreateEcommerceOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateEcommerceOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateEmployeeResponseFromJSON(json) {
  return CreateEmployeeResponseFromJSONTyped(json);
}
function CreateEmployeeResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateEmployeeResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateFileRequestFromJSON(json) {
  return CreateFileRequestFromJSONTyped(json);
}
function CreateFileRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    parent_folder_id: json['parent_folder_id'],
    drive_id: !exists(json, 'drive_id') ? undefined : json['drive_id'],
    description: !exists(json, 'description') ? undefined : json['description']
  };
}
function CreateFileRequestToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    parent_folder_id: value.parent_folder_id,
    drive_id: value.drive_id,
    description: value.description
  };
}

/* tslint:disable */
function CreateFileResponseFromJSON(json) {
  return CreateFileResponseFromJSONTyped(json);
}
function CreateFileResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateFileResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateFolderRequestFromJSON(json) {
  return CreateFolderRequestFromJSONTyped(json);
}
function CreateFolderRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    parent_folder_id: json['parent_folder_id'],
    id: !exists(json, 'id') ? undefined : json['id'],
    description: !exists(json, 'description') ? undefined : json['description'],
    drive_id: !exists(json, 'drive_id') ? undefined : json['drive_id']
  };
}
function CreateFolderRequestToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    parent_folder_id: value.parent_folder_id,
    description: value.description,
    drive_id: value.drive_id
  };
}

/* tslint:disable */
function CreateFolderResponseFromJSON(json) {
  return CreateFolderResponseFromJSONTyped(json);
}
function CreateFolderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateFolderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateHrisCompanyResponseFromJSON(json) {
  return CreateHrisCompanyResponseFromJSONTyped(json);
}
function CreateHrisCompanyResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateHrisCompanyResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateInvoiceItemResponseFromJSON(json) {
  return CreateInvoiceItemResponseFromJSONTyped(json);
}
function CreateInvoiceItemResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateInvoiceItemResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function InvoiceResponseFromJSON(json) {
  return InvoiceResponseFromJSONTyped(json);
}
function InvoiceResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id']
  };
}
function InvoiceResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {};
}

/* tslint:disable */
function CreateInvoiceResponseFromJSON(json) {
  return CreateInvoiceResponseFromJSONTyped(json);
}
function CreateInvoiceResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: InvoiceResponseFromJSON(json['data'])
  };
}
function CreateInvoiceResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: InvoiceResponseToJSON(value.data)
  };
}

/* tslint:disable */
function CreateItemResponseFromJSON(json) {
  return CreateItemResponseFromJSONTyped(json);
}
function CreateItemResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateItemResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateJobResponseFromJSON(json) {
  return CreateJobResponseFromJSONTyped(json);
}
function CreateJobResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateJobResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateJournalEntryResponseFromJSON(json) {
  return CreateJournalEntryResponseFromJSONTyped(json);
}
function CreateJournalEntryResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateJournalEntryResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateLeadResponseFromJSON(json) {
  return CreateLeadResponseFromJSONTyped(json);
}
function CreateLeadResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateLeadResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateLedgerAccountResponseFromJSON(json) {
  return CreateLedgerAccountResponseFromJSONTyped(json);
}
function CreateLedgerAccountResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateLedgerAccountResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateLocationResponseFromJSON(json) {
  return CreateLocationResponseFromJSONTyped(json);
}
function CreateLocationResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateLocationResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateMerchantResponseFromJSON(json) {
  return CreateMerchantResponseFromJSONTyped(json);
}
function CreateMerchantResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateMerchantResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateMessageResponseFromJSON(json) {
  return CreateMessageResponseFromJSONTyped(json);
}
function CreateMessageResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateMessageResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateModifierGroupResponseFromJSON(json) {
  return CreateModifierGroupResponseFromJSONTyped(json);
}
function CreateModifierGroupResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateModifierGroupResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateModifierResponseFromJSON(json) {
  return CreateModifierResponseFromJSONTyped(json);
}
function CreateModifierResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateModifierResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateNoteResponseFromJSON(json) {
  return CreateNoteResponseFromJSONTyped(json);
}
function CreateNoteResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateNoteResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateOpportunityResponseFromJSON(json) {
  return CreateOpportunityResponseFromJSONTyped(json);
}
function CreateOpportunityResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateOpportunityResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateOrderResponseFromJSON(json) {
  return CreateOrderResponseFromJSONTyped(json);
}
function CreateOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateOrderTypeResponseFromJSON(json) {
  return CreateOrderTypeResponseFromJSONTyped(json);
}
function CreateOrderTypeResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateOrderTypeResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreatePaymentResponseFromJSON(json) {
  return CreatePaymentResponseFromJSONTyped(json);
}
function CreatePaymentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreatePaymentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreatePipelineResponseFromJSON(json) {
  return CreatePipelineResponseFromJSONTyped(json);
}
function CreatePipelineResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreatePipelineResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreatePosPaymentResponseFromJSON(json) {
  return CreatePosPaymentResponseFromJSONTyped(json);
}
function CreatePosPaymentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreatePosPaymentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateProductResponseFromJSON(json) {
  return CreateProductResponseFromJSONTyped(json);
}
function CreateProductResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateProductResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreatePurchaseOrderResponseFromJSON(json) {
  return CreatePurchaseOrderResponseFromJSONTyped(json);
}
function CreatePurchaseOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreatePurchaseOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

function CreateSessionResponseDataFromJSON(json) {
  return CreateSessionResponseDataFromJSONTyped(json);
}
function CreateSessionResponseDataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    session_uri: json['session_uri'],
    session_token: json['session_token']
  };
}
function CreateSessionResponseDataToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {};
}

/* tslint:disable */
function CreateSessionResponseFromJSON(json) {
  return CreateSessionResponseFromJSONTyped(json);
}
function CreateSessionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: CreateSessionResponseDataFromJSON(json['data'])
  };
}
function CreateSessionResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: CreateSessionResponseDataToJSON(value.data)
  };
}

/* tslint:disable */
function CreateSharedLinkResponseFromJSON(json) {
  return CreateSharedLinkResponseFromJSONTyped(json);
}
function CreateSharedLinkResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateSharedLinkResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateSupplierResponseFromJSON(json) {
  return CreateSupplierResponseFromJSONTyped(json);
}
function CreateSupplierResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateSupplierResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateTaxRateResponseFromJSON(json) {
  return CreateTaxRateResponseFromJSONTyped(json);
}
function CreateTaxRateResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateTaxRateResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateTenderResponseFromJSON(json) {
  return CreateTenderResponseFromJSONTyped(json);
}
function CreateTenderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateTenderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateTicketResponseFromJSON(json) {
  return CreateTicketResponseFromJSONTyped(json);
}
function CreateTicketResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateTicketResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateTimeOffRequestResponseFromJSON(json) {
  return CreateTimeOffRequestResponseFromJSONTyped(json);
}
function CreateTimeOffRequestResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateTimeOffRequestResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateUploadSessionRequestFromJSON(json) {
  return CreateUploadSessionRequestFromJSONTyped(json);
}
function CreateUploadSessionRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    parent_folder_id: json['parent_folder_id'],
    size: json['size'],
    drive_id: !exists(json, 'drive_id') ? undefined : json['drive_id']
  };
}
function CreateUploadSessionRequestToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    parent_folder_id: value.parent_folder_id,
    size: value.size,
    drive_id: value.drive_id
  };
}

/* tslint:disable */
function CreateUploadSessionResponseFromJSON(json) {
  return CreateUploadSessionResponseFromJSONTyped(json);
}
function CreateUploadSessionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateUploadSessionResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function CreateUserResponseFromJSON(json) {
  return CreateUserResponseFromJSONTyped(json);
}
function CreateUserResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function CreateUserResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The status of the webhook.
 * @export
 * @enum {string}
 */
var Status;
(function (Status) {
  Status["enabled"] = "enabled";
  Status["disabled"] = "disabled";
})(Status || (Status = {}));
function StatusFromJSON(json) {
  return StatusFromJSONTyped(json);
}
function StatusFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function StatusToJSON(value) {
  return value;
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
var WebhookEventType;
(function (WebhookEventType) {
  WebhookEventType["Star"] = "*";
  WebhookEventType["crm_activity_created"] = "crm.activity.created";
  WebhookEventType["crm_activity_updated"] = "crm.activity.updated";
  WebhookEventType["crm_activity_deleted"] = "crm.activity.deleted";
  WebhookEventType["crm_company_created"] = "crm.company.created";
  WebhookEventType["crm_company_updated"] = "crm.company.updated";
  WebhookEventType["crm_company_deleted"] = "crm.company.deleted";
  WebhookEventType["crm_contact_created"] = "crm.contact.created";
  WebhookEventType["crm_contact_updated"] = "crm.contact.updated";
  WebhookEventType["crm_contact_deleted"] = "crm.contact.deleted";
  WebhookEventType["crm_lead_created"] = "crm.lead.created";
  WebhookEventType["crm_lead_updated"] = "crm.lead.updated";
  WebhookEventType["crm_lead_deleted"] = "crm.lead.deleted";
  WebhookEventType["crm_note_created"] = "crm.note.created";
  WebhookEventType["crm_notes_updated"] = "crm.notes.updated";
  WebhookEventType["crm_notes_deleted"] = "crm.notes.deleted";
  WebhookEventType["crm_opportunity_created"] = "crm.opportunity.created";
  WebhookEventType["crm_opportunity_updated"] = "crm.opportunity.updated";
  WebhookEventType["crm_opportunity_deleted"] = "crm.opportunity.deleted";
  WebhookEventType["lead_lead_created"] = "lead.lead.created";
  WebhookEventType["lead_lead_updated"] = "lead.lead.updated";
  WebhookEventType["lead_lead_deleted"] = "lead.lead.deleted";
  WebhookEventType["vault_connection_created"] = "vault.connection.created";
  WebhookEventType["vault_connection_updated"] = "vault.connection.updated";
  WebhookEventType["vault_connection_disabled"] = "vault.connection.disabled";
  WebhookEventType["vault_connection_deleted"] = "vault.connection.deleted";
  WebhookEventType["vault_connection_callable"] = "vault.connection.callable";
  WebhookEventType["vault_connection_revoked"] = "vault.connection.revoked";
  WebhookEventType["vault_connection_token_refresh_failed"] = "vault.connection.token_refresh.failed";
  WebhookEventType["ats_job_created"] = "ats.job.created";
  WebhookEventType["ats_job_updated"] = "ats.job.updated";
  WebhookEventType["ats_job_deleted"] = "ats.job.deleted";
  WebhookEventType["ats_applicant_created"] = "ats.applicant.created";
  WebhookEventType["ats_applicant_updated"] = "ats.applicant.updated";
  WebhookEventType["ats_applicant_deleted"] = "ats.applicant.deleted";
  WebhookEventType["accounting_customer_created"] = "accounting.customer.created";
  WebhookEventType["accounting_customer_updated"] = "accounting.customer.updated";
  WebhookEventType["accounting_customer_deleted"] = "accounting.customer.deleted";
  WebhookEventType["accounting_invoice_created"] = "accounting.invoice.created";
  WebhookEventType["accounting_invoice_updated"] = "accounting.invoice.updated";
  WebhookEventType["accounting_invoice_deleted"] = "accounting.invoice.deleted";
  WebhookEventType["accounting_invoice_item_created"] = "accounting.invoice_item.created";
  WebhookEventType["accounting_invoice_item_updated"] = "accounting.invoice_item.updated";
  WebhookEventType["accounting_invoice_item_deleted"] = "accounting.invoice_item.deleted";
  WebhookEventType["accounting_ledger_account_created"] = "accounting.ledger_account.created";
  WebhookEventType["accounting_ledger_account_updated"] = "accounting.ledger_account.updated";
  WebhookEventType["accounting_ledger_account_deleted"] = "accounting.ledger_account.deleted";
  WebhookEventType["accounting_tax_rate_created"] = "accounting.tax_rate.created";
  WebhookEventType["accounting_tax_rate_updated"] = "accounting.tax_rate.updated";
  WebhookEventType["accounting_tax_rate_deleted"] = "accounting.tax_rate.deleted";
  WebhookEventType["accounting_bill_created"] = "accounting.bill.created";
  WebhookEventType["accounting_bill_updated"] = "accounting.bill.updated";
  WebhookEventType["accounting_bill_deleted"] = "accounting.bill.deleted";
  WebhookEventType["accounting_payment_created"] = "accounting.payment.created";
  WebhookEventType["accounting_payment_updated"] = "accounting.payment.updated";
  WebhookEventType["accounting_payment_deleted"] = "accounting.payment.deleted";
  WebhookEventType["accounting_supplier_created"] = "accounting.supplier.created";
  WebhookEventType["accounting_supplier_updated"] = "accounting.supplier.updated";
  WebhookEventType["accounting_supplier_deleted"] = "accounting.supplier.deleted";
  WebhookEventType["accounting_purchase_order_created"] = "accounting.purchase-order.created";
  WebhookEventType["accounting_purchase_order_updated"] = "accounting.purchase-order.updated";
  WebhookEventType["accounting_purchase_order_deleted"] = "accounting.purchase-order.deleted";
  WebhookEventType["pos_order_created"] = "pos.order.created";
  WebhookEventType["pos_order_updated"] = "pos.order.updated";
  WebhookEventType["pos_order_deleted"] = "pos.order.deleted";
  WebhookEventType["pos_product_created"] = "pos.product.created";
  WebhookEventType["pos_product_updated"] = "pos.product.updated";
  WebhookEventType["pos_product_deleted"] = "pos.product.deleted";
  WebhookEventType["pos_payment_created"] = "pos.payment.created";
  WebhookEventType["pos_payment_updated"] = "pos.payment.updated";
  WebhookEventType["pos_payment_deleted"] = "pos.payment.deleted";
  WebhookEventType["pos_merchant_created"] = "pos.merchant.created";
  WebhookEventType["pos_merchant_updated"] = "pos.merchant.updated";
  WebhookEventType["pos_merchant_deleted"] = "pos.merchant.deleted";
  WebhookEventType["pos_location_created"] = "pos.location.created";
  WebhookEventType["pos_location_updated"] = "pos.location.updated";
  WebhookEventType["pos_location_deleted"] = "pos.location.deleted";
  WebhookEventType["pos_item_created"] = "pos.item.created";
  WebhookEventType["pos_item_updated"] = "pos.item.updated";
  WebhookEventType["pos_item_deleted"] = "pos.item.deleted";
  WebhookEventType["pos_modifier_created"] = "pos.modifier.created";
  WebhookEventType["pos_modifier_updated"] = "pos.modifier.updated";
  WebhookEventType["pos_modifier_deleted"] = "pos.modifier.deleted";
  WebhookEventType["pos_modifier_group_created"] = "pos.modifier-group.created";
  WebhookEventType["pos_modifier_group_updated"] = "pos.modifier-group.updated";
  WebhookEventType["pos_modifier_group_deleted"] = "pos.modifier-group.deleted";
  WebhookEventType["hris_employee_created"] = "hris.employee.created";
  WebhookEventType["hris_employee_updated"] = "hris.employee.updated";
  WebhookEventType["hris_employee_deleted"] = "hris.employee.deleted";
  WebhookEventType["hris_employee_terminated"] = "hris.employee.terminated";
  WebhookEventType["hris_company_created"] = "hris.company.created";
  WebhookEventType["hris_company_updated"] = "hris.company.updated";
  WebhookEventType["hris_company_deleted"] = "hris.company.deleted";
  WebhookEventType["file_storage_file_created"] = "file-storage.file.created";
  WebhookEventType["file_storage_file_updated"] = "file-storage.file.updated";
  WebhookEventType["file_storage_file_deleted"] = "file-storage.file.deleted";
  WebhookEventType["issue_tracking_ticket_created"] = "issue-tracking.ticket.created";
  WebhookEventType["issue_tracking_ticket_updated"] = "issue-tracking.ticket.updated";
  WebhookEventType["issue_tracking_ticket_deleted"] = "issue-tracking.ticket.deleted";
  WebhookEventType["ats_application_created"] = "ats.application.created";
  WebhookEventType["ats_application_updated"] = "ats.application.updated";
  WebhookEventType["ats_application_deleted"] = "ats.application.deleted";
})(WebhookEventType || (WebhookEventType = {}));
function WebhookEventTypeFromJSON(json) {
  return WebhookEventTypeFromJSONTyped(json);
}
function WebhookEventTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function WebhookEventTypeToJSON(value) {
  return value;
}

/* tslint:disable */
function CreateWebhookRequestFromJSON(json) {
  return CreateWebhookRequestFromJSONTyped(json);
}
function CreateWebhookRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    unified_api: UnifiedApiIdFromJSON(json['unified_api']),
    status: StatusFromJSON(json['status']),
    delivery_url: json['delivery_url'],
    events: json['events'].map(WebhookEventTypeFromJSON),
    description: !exists(json, 'description') ? undefined : json['description']
  };
}
function CreateWebhookRequestToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    unified_api: UnifiedApiIdToJSON(value.unified_api),
    status: StatusToJSON(value.status),
    delivery_url: value.delivery_url,
    events: value.events.map(WebhookEventTypeToJSON),
    description: value.description
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var WebhookDisabledReason;
(function (WebhookDisabledReason) {
  WebhookDisabledReason["none"] = "none";
  WebhookDisabledReason["retry_limit"] = "retry_limit";
  WebhookDisabledReason["usage_limit"] = "usage_limit";
})(WebhookDisabledReason || (WebhookDisabledReason = {}));
function WebhookFromJSON(json) {
  return WebhookFromJSONTyped(json);
}
function WebhookFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    unified_api: UnifiedApiIdFromJSON(json['unified_api']),
    status: StatusFromJSON(json['status']),
    delivery_url: json['delivery_url'],
    execute_base_url: json['execute_base_url'],
    events: json['events'].map(WebhookEventTypeFromJSON),
    id: !exists(json, 'id') ? undefined : json['id'],
    description: !exists(json, 'description') ? undefined : json['description'],
    disabled_reason: !exists(json, 'disabled_reason') ? undefined : json['disabled_reason'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function WebhookToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    unified_api: UnifiedApiIdToJSON(value.unified_api),
    status: StatusToJSON(value.status),
    delivery_url: value.delivery_url,
    events: value.events.map(WebhookEventTypeToJSON),
    description: value.description,
    disabled_reason: value.disabled_reason
  };
}

/* tslint:disable */
function CreateWebhookResponseFromJSON(json) {
  return CreateWebhookResponseFromJSONTyped(json);
}
function CreateWebhookResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: WebhookFromJSON(json['data'])
  };
}
function CreateWebhookResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: WebhookToJSON(value.data)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var InvoiceLineItemType;
(function (InvoiceLineItemType) {
  InvoiceLineItemType["sales_item"] = "sales_item";
  InvoiceLineItemType["discount"] = "discount";
  InvoiceLineItemType["info"] = "info";
  InvoiceLineItemType["sub_total"] = "sub_total";
})(InvoiceLineItemType || (InvoiceLineItemType = {}));
function InvoiceLineItemFromJSON(json) {
  return InvoiceLineItemFromJSONTyped(json);
}
function InvoiceLineItemFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    row_id: !exists(json, 'row_id') ? undefined : json['row_id'],
    code: !exists(json, 'code') ? undefined : json['code'],
    line_number: !exists(json, 'line_number') ? undefined : json['line_number'],
    description: !exists(json, 'description') ? undefined : json['description'],
    type: !exists(json, 'type') ? undefined : json['type'],
    tax_amount: !exists(json, 'tax_amount') ? undefined : json['tax_amount'],
    total_amount: !exists(json, 'total_amount') ? undefined : json['total_amount'],
    quantity: !exists(json, 'quantity') ? undefined : json['quantity'],
    unit_price: !exists(json, 'unit_price') ? undefined : json['unit_price'],
    unit_of_measure: !exists(json, 'unit_of_measure') ? undefined : json['unit_of_measure'],
    discount_percentage: !exists(json, 'discount_percentage') ? undefined : json['discount_percentage'],
    discount_amount: !exists(json, 'discount_amount') ? undefined : json['discount_amount'],
    location_id: !exists(json, 'location_id') ? undefined : json['location_id'],
    department_id: !exists(json, 'department_id') ? undefined : json['department_id'],
    item: !exists(json, 'item') ? undefined : LinkedInvoiceItemFromJSON(json['item']),
    tax_rate: !exists(json, 'tax_rate') ? undefined : LinkedTaxRateFromJSON(json['tax_rate']),
    ledger_account: !exists(json, 'ledger_account') ? undefined : LinkedLedgerAccountFromJSON(json['ledger_account']),
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at'])
  };
}
function InvoiceLineItemToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    row_id: value.row_id,
    code: value.code,
    line_number: value.line_number,
    description: value.description,
    type: value.type,
    tax_amount: value.tax_amount,
    total_amount: value.total_amount,
    quantity: value.quantity,
    unit_price: value.unit_price,
    unit_of_measure: value.unit_of_measure,
    discount_percentage: value.discount_percentage,
    discount_amount: value.discount_amount,
    location_id: value.location_id,
    department_id: value.department_id,
    item: LinkedInvoiceItemToJSON(value.item),
    tax_rate: LinkedTaxRateToJSON(value.tax_rate),
    ledger_account: LinkedLedgerAccountToJSON(value.ledger_account),
    row_version: value.row_version
  };
}

/* tslint:disable */
function LinkedCustomerFromJSON(json) {
  return LinkedCustomerFromJSONTyped(json);
}
function LinkedCustomerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    display_id: !exists(json, 'display_id') ? undefined : json['display_id'],
    display_name: !exists(json, 'display_name') ? undefined : json['display_name'],
    name: !exists(json, 'name') ? undefined : json['name'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name']
  };
}
function LinkedCustomerToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    display_name: value.display_name,
    name: value.name
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var CreditNoteStatus;
(function (CreditNoteStatus) {
  CreditNoteStatus["draft"] = "draft";
  CreditNoteStatus["authorised"] = "authorised";
  CreditNoteStatus["paid"] = "paid";
  CreditNoteStatus["voided"] = "voided";
  CreditNoteStatus["deleted"] = "deleted";
})(CreditNoteStatus || (CreditNoteStatus = {}));
/**
 * @export
 * @enum {string}
 */
var CreditNoteType;
(function (CreditNoteType) {
  CreditNoteType["receivable_credit"] = "accounts_receivable_credit";
  CreditNoteType["payable_credit"] = "accounts_payable_credit";
})(CreditNoteType || (CreditNoteType = {}));
function CreditNoteFromJSON(json) {
  return CreditNoteFromJSONTyped(json);
}
function CreditNoteFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    total_amount: json['total_amount'],
    number: !exists(json, 'number') ? undefined : json['number'],
    customer: !exists(json, 'customer') ? undefined : LinkedCustomerFromJSON(json['customer']),
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    currency_rate: !exists(json, 'currency_rate') ? undefined : json['currency_rate'],
    tax_inclusive: !exists(json, 'tax_inclusive') ? undefined : json['tax_inclusive'],
    sub_total: !exists(json, 'sub_total') ? undefined : json['sub_total'],
    total_tax: !exists(json, 'total_tax') ? undefined : json['total_tax'],
    tax_code: !exists(json, 'tax_code') ? undefined : json['tax_code'],
    balance: !exists(json, 'balance') ? undefined : json['balance'],
    remaining_credit: !exists(json, 'remaining_credit') ? undefined : json['remaining_credit'],
    status: !exists(json, 'status') ? undefined : json['status'],
    reference: !exists(json, 'reference') ? undefined : json['reference'],
    date_issued: !exists(json, 'date_issued') ? undefined : new Date(json['date_issued']),
    date_paid: !exists(json, 'date_paid') ? undefined : json['date_paid'] === null ? null : new Date(json['date_paid']),
    type: !exists(json, 'type') ? undefined : json['type'],
    account: !exists(json, 'account') ? undefined : LinkedLedgerAccountFromJSON(json['account']),
    line_items: !exists(json, 'line_items') ? undefined : json['line_items'].map(InvoiceLineItemFromJSON),
    allocations: !exists(json, 'allocations') ? undefined : json['allocations'],
    note: !exists(json, 'note') ? undefined : json['note'],
    terms: !exists(json, 'terms') ? undefined : json['terms'],
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function CreditNoteToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total_amount: value.total_amount,
    number: value.number,
    customer: LinkedCustomerToJSON(value.customer),
    currency: CurrencyToJSON(value.currency),
    currency_rate: value.currency_rate,
    tax_inclusive: value.tax_inclusive,
    sub_total: value.sub_total,
    total_tax: value.total_tax,
    tax_code: value.tax_code,
    balance: value.balance,
    remaining_credit: value.remaining_credit,
    status: value.status,
    reference: value.reference,
    date_issued: value.date_issued === undefined ? undefined : new Date(value.date_issued).toISOString(),
    date_paid: value.date_paid === undefined ? undefined : value.date_paid === null ? null : new Date(value.date_paid).toISOString(),
    type: value.type,
    account: LinkedLedgerAccountToJSON(value.account),
    line_items: value.line_items === undefined ? undefined : value.line_items.map(InvoiceLineItemToJSON),
    allocations: value.allocations,
    note: value.note,
    terms: value.terms,
    row_version: value.row_version
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
var CrmEventType;
(function (CrmEventType) {
  CrmEventType["Star"] = "*";
  CrmEventType["crm_activity_created"] = "crm.activity.created";
  CrmEventType["crm_activity_updated"] = "crm.activity.updated";
  CrmEventType["crm_activity_deleted"] = "crm.activity.deleted";
  CrmEventType["crm_company_created"] = "crm.company.created";
  CrmEventType["crm_company_updated"] = "crm.company.updated";
  CrmEventType["crm_company_deleted"] = "crm.company.deleted";
  CrmEventType["crm_contact_created"] = "crm.contact.created";
  CrmEventType["crm_contact_updated"] = "crm.contact.updated";
  CrmEventType["crm_contact_deleted"] = "crm.contact.deleted";
  CrmEventType["crm_lead_created"] = "crm.lead.created";
  CrmEventType["crm_lead_updated"] = "crm.lead.updated";
  CrmEventType["crm_lead_deleted"] = "crm.lead.deleted";
  CrmEventType["crm_note_created"] = "crm.note.created";
  CrmEventType["crm_note_updated"] = "crm.note.updated";
  CrmEventType["crm_note_deleted"] = "crm.note.deleted";
  CrmEventType["crm_opportunity_created"] = "crm.opportunity.created";
  CrmEventType["crm_opportunity_updated"] = "crm.opportunity.updated";
  CrmEventType["crm_opportunity_deleted"] = "crm.opportunity.deleted";
})(CrmEventType || (CrmEventType = {}));
function CrmEventTypeFromJSON(json) {
  return CrmEventTypeFromJSONTyped(json);
}
function CrmEventTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function CrmEventTypeToJSON(value) {
  return value;
}

/* tslint:disable */
function LinkedParentCustomerFromJSON(json) {
  return LinkedParentCustomerFromJSONTyped(json);
}
function LinkedParentCustomerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function LinkedParentCustomerToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var CustomerStatus;
(function (CustomerStatus) {
  CustomerStatus["active"] = "active";
  CustomerStatus["inactive"] = "inactive";
  CustomerStatus["archived"] = "archived";
  CustomerStatus["gdpr_erasure_request"] = "gdpr-erasure-request";
  CustomerStatus["unknown"] = "unknown";
})(CustomerStatus || (CustomerStatus = {}));
function CustomerFromJSON(json) {
  return CustomerFromJSONTyped(json);
}
function CustomerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    display_id: !exists(json, 'display_id') ? undefined : json['display_id'],
    display_name: !exists(json, 'display_name') ? undefined : json['display_name'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    title: !exists(json, 'title') ? undefined : json['title'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    middle_name: !exists(json, 'middle_name') ? undefined : json['middle_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    suffix: !exists(json, 'suffix') ? undefined : json['suffix'],
    individual: !exists(json, 'individual') ? undefined : json['individual'],
    project: !exists(json, 'project') ? undefined : json['project'],
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON),
    websites: !exists(json, 'websites') ? undefined : json['websites'].map(WebsiteFromJSON),
    bank_accounts: !exists(json, 'bank_accounts') ? undefined : json['bank_accounts'].map(BankAccountFromJSON),
    notes: !exists(json, 'notes') ? undefined : json['notes'],
    tax_rate: !exists(json, 'tax_rate') ? undefined : LinkedTaxRateFromJSON(json['tax_rate']),
    tax_number: !exists(json, 'tax_number') ? undefined : json['tax_number'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    account: !exists(json, 'account') ? undefined : LinkedLedgerAccountFromJSON(json['account']),
    parent: !exists(json, 'parent') ? undefined : LinkedParentCustomerFromJSON(json['parent']),
    status: !exists(json, 'status') ? undefined : json['status'],
    payment_method: !exists(json, 'payment_method') ? undefined : json['payment_method'],
    channel: !exists(json, 'channel') ? undefined : json['channel'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    row_version: !exists(json, 'row_version') ? undefined : json['row_version']
  };
}
function CustomerToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    display_id: value.display_id,
    display_name: value.display_name,
    company_name: value.company_name,
    title: value.title,
    first_name: value.first_name,
    middle_name: value.middle_name,
    last_name: value.last_name,
    suffix: value.suffix,
    individual: value.individual,
    project: value.project,
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON),
    websites: value.websites === undefined ? undefined : value.websites.map(WebsiteToJSON),
    bank_accounts: value.bank_accounts === undefined ? undefined : value.bank_accounts.map(BankAccountToJSON),
    notes: value.notes,
    tax_rate: LinkedTaxRateToJSON(value.tax_rate),
    tax_number: value.tax_number,
    currency: CurrencyToJSON(value.currency),
    account: LinkedLedgerAccountToJSON(value.account),
    parent: LinkedParentCustomerToJSON(value.parent),
    status: value.status,
    payment_method: value.payment_method,
    channel: value.channel,
    row_version: value.row_version
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var CustomersFilterStatus;
(function (CustomersFilterStatus) {
  CustomersFilterStatus["active"] = "active";
  CustomersFilterStatus["inactive"] = "inactive";
  CustomersFilterStatus["archived"] = "archived";
  CustomersFilterStatus["all"] = "all";
})(CustomersFilterStatus || (CustomersFilterStatus = {}));
function CustomersFilterFromJSON(json) {
  return CustomersFilterFromJSONTyped(json);
}
function CustomersFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    display_name: !exists(json, 'display_name') ? undefined : json['display_name'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    email: !exists(json, 'email') ? undefined : json['email'],
    status: !exists(json, 'status') ? undefined : json['status']
  };
}
function CustomersFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    company_name: value.company_name,
    display_name: value.display_name,
    first_name: value.first_name,
    last_name: value.last_name,
    email: value.email,
    status: value.status
  };
}

/* tslint:disable */
function DeleteActivityResponseFromJSON(json) {
  return DeleteActivityResponseFromJSONTyped(json);
}
function DeleteActivityResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteActivityResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteApplicantResponseFromJSON(json) {
  return DeleteApplicantResponseFromJSONTyped(json);
}
function DeleteApplicantResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteApplicantResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteApplicationResponseFromJSON(json) {
  return DeleteApplicationResponseFromJSONTyped(json);
}
function DeleteApplicationResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteApplicationResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteBillResponseFromJSON(json) {
  return DeleteBillResponseFromJSONTyped(json);
}
function DeleteBillResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteBillResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteCommentResponseFromJSON(json) {
  return DeleteCommentResponseFromJSONTyped(json);
}
function DeleteCommentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteCommentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteCompanyResponseFromJSON(json) {
  return DeleteCompanyResponseFromJSONTyped(json);
}
function DeleteCompanyResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteCompanyResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

function DeleteConsumerResponseFromJSON(json) {
  return DeleteConsumerResponseFromJSONTyped(json);
}
function DeleteConsumerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: json['data']
  };
}
function DeleteConsumerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: value.data
  };
}

/* tslint:disable */
function DeleteContactResponseFromJSON(json) {
  return DeleteContactResponseFromJSONTyped(json);
}
function DeleteContactResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteContactResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteCreditNoteResponseFromJSON(json) {
  return DeleteCreditNoteResponseFromJSONTyped(json);
}
function DeleteCreditNoteResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteCreditNoteResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteCustomerResponseFromJSON(json) {
  return DeleteCustomerResponseFromJSONTyped(json);
}
function DeleteCustomerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteCustomerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteDepartmentResponseFromJSON(json) {
  return DeleteDepartmentResponseFromJSONTyped(json);
}
function DeleteDepartmentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteDepartmentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteDriveGroupResponseFromJSON(json) {
  return DeleteDriveGroupResponseFromJSONTyped(json);
}
function DeleteDriveGroupResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteDriveGroupResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteDriveResponseFromJSON(json) {
  return DeleteDriveResponseFromJSONTyped(json);
}
function DeleteDriveResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteDriveResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteEcommerceCustomerResponseFromJSON(json) {
  return DeleteEcommerceCustomerResponseFromJSONTyped(json);
}
function DeleteEcommerceCustomerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteEcommerceCustomerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteEcommerceOrderResponseFromJSON(json) {
  return DeleteEcommerceOrderResponseFromJSONTyped(json);
}
function DeleteEcommerceOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteEcommerceOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteEmployeeResponseFromJSON(json) {
  return DeleteEmployeeResponseFromJSONTyped(json);
}
function DeleteEmployeeResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteEmployeeResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteFileResponseFromJSON(json) {
  return DeleteFileResponseFromJSONTyped(json);
}
function DeleteFileResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteFileResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteFolderResponseFromJSON(json) {
  return DeleteFolderResponseFromJSONTyped(json);
}
function DeleteFolderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteFolderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteHrisCompanyResponseFromJSON(json) {
  return DeleteHrisCompanyResponseFromJSONTyped(json);
}
function DeleteHrisCompanyResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteHrisCompanyResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteInvoiceResponseFromJSON(json) {
  return DeleteInvoiceResponseFromJSONTyped(json);
}
function DeleteInvoiceResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: InvoiceResponseFromJSON(json['data'])
  };
}
function DeleteInvoiceResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: InvoiceResponseToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteItemResponseFromJSON(json) {
  return DeleteItemResponseFromJSONTyped(json);
}
function DeleteItemResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteItemResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteJobResponseFromJSON(json) {
  return DeleteJobResponseFromJSONTyped(json);
}
function DeleteJobResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteJobResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteJournalEntryResponseFromJSON(json) {
  return DeleteJournalEntryResponseFromJSONTyped(json);
}
function DeleteJournalEntryResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteJournalEntryResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteLeadResponseFromJSON(json) {
  return DeleteLeadResponseFromJSONTyped(json);
}
function DeleteLeadResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteLeadResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteLedgerAccountResponseFromJSON(json) {
  return DeleteLedgerAccountResponseFromJSONTyped(json);
}
function DeleteLedgerAccountResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteLedgerAccountResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteLocationResponseFromJSON(json) {
  return DeleteLocationResponseFromJSONTyped(json);
}
function DeleteLocationResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteLocationResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteMerchantResponseFromJSON(json) {
  return DeleteMerchantResponseFromJSONTyped(json);
}
function DeleteMerchantResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteMerchantResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteMessageResponseFromJSON(json) {
  return DeleteMessageResponseFromJSONTyped(json);
}
function DeleteMessageResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteMessageResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteModifierGroupResponseFromJSON(json) {
  return DeleteModifierGroupResponseFromJSONTyped(json);
}
function DeleteModifierGroupResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteModifierGroupResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteModifierResponseFromJSON(json) {
  return DeleteModifierResponseFromJSONTyped(json);
}
function DeleteModifierResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteModifierResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteNoteResponseFromJSON(json) {
  return DeleteNoteResponseFromJSONTyped(json);
}
function DeleteNoteResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteNoteResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteOpportunityResponseFromJSON(json) {
  return DeleteOpportunityResponseFromJSONTyped(json);
}
function DeleteOpportunityResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteOpportunityResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteOrderResponseFromJSON(json) {
  return DeleteOrderResponseFromJSONTyped(json);
}
function DeleteOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteOrderTypeResponseFromJSON(json) {
  return DeleteOrderTypeResponseFromJSONTyped(json);
}
function DeleteOrderTypeResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteOrderTypeResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeletePaymentResponseFromJSON(json) {
  return DeletePaymentResponseFromJSONTyped(json);
}
function DeletePaymentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeletePaymentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeletePipelineResponseFromJSON(json) {
  return DeletePipelineResponseFromJSONTyped(json);
}
function DeletePipelineResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeletePipelineResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeletePosPaymentResponseFromJSON(json) {
  return DeletePosPaymentResponseFromJSONTyped(json);
}
function DeletePosPaymentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeletePosPaymentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteProductResponseFromJSON(json) {
  return DeleteProductResponseFromJSONTyped(json);
}
function DeleteProductResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteProductResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeletePurchaseOrderResponseFromJSON(json) {
  return DeletePurchaseOrderResponseFromJSONTyped(json);
}
function DeletePurchaseOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeletePurchaseOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteSharedLinkResponseFromJSON(json) {
  return DeleteSharedLinkResponseFromJSONTyped(json);
}
function DeleteSharedLinkResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteSharedLinkResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteSupplierResponseFromJSON(json) {
  return DeleteSupplierResponseFromJSONTyped(json);
}
function DeleteSupplierResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteSupplierResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteTaxRateResponseFromJSON(json) {
  return DeleteTaxRateResponseFromJSONTyped(json);
}
function DeleteTaxRateResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteTaxRateResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteTenderResponseFromJSON(json) {
  return DeleteTenderResponseFromJSONTyped(json);
}
function DeleteTenderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteTenderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteTicketResponseFromJSON(json) {
  return DeleteTicketResponseFromJSONTyped(json);
}
function DeleteTicketResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteTicketResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteTimeOffRequestResponseFromJSON(json) {
  return DeleteTimeOffRequestResponseFromJSONTyped(json);
}
function DeleteTimeOffRequestResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteTimeOffRequestResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteUploadSessionResponseFromJSON(json) {
  return DeleteUploadSessionResponseFromJSONTyped(json);
}
function DeleteUploadSessionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteUploadSessionResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteUserResponseFromJSON(json) {
  return DeleteUserResponseFromJSONTyped(json);
}
function DeleteUserResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function DeleteUserResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function DeleteWebhookResponseFromJSON(json) {
  return DeleteWebhookResponseFromJSONTyped(json);
}
function DeleteWebhookResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: WebhookFromJSON(json['data'])
  };
}
function DeleteWebhookResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: WebhookToJSON(value.data)
  };
}

/* tslint:disable */
function DepartmentFromJSON(json) {
  return DepartmentFromJSONTyped(json);
}
function DepartmentFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    parent_id: !exists(json, 'parent_id') ? undefined : json['parent_id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    code: !exists(json, 'code') ? undefined : json['code'],
    description: !exists(json, 'description') ? undefined : json['description'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function DepartmentToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    code: value.code,
    description: value.description
  };
}

/* tslint:disable */
function DriveFromJSON(json) {
  return DriveFromJSONTyped(json);
}
function DriveFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function DriveToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description
  };
}

/* tslint:disable */
function DriveGroupFromJSON(json) {
  return DriveGroupFromJSONTyped(json);
}
function DriveGroupFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name'],
    display_name: !exists(json, 'display_name') ? undefined : json['display_name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function DriveGroupToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    display_name: value.display_name,
    description: value.description
  };
}

/* tslint:disable */
function DriveGroupsFilterFromJSON(json) {
  return DriveGroupsFilterFromJSONTyped(json);
}
function DriveGroupsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    parent_group_id: !exists(json, 'parent_group_id') ? undefined : json['parent_group_id']
  };
}
function DriveGroupsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    parent_group_id: value.parent_group_id
  };
}

/* tslint:disable */
function DrivesFilterFromJSON(json) {
  return DrivesFilterFromJSONTyped(json);
}
function DrivesFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    group_id: !exists(json, 'group_id') ? undefined : json['group_id']
  };
}
function DrivesFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    group_id: value.group_id
  };
}

/* tslint:disable */
function EcommerceAddressFromJSON(json) {
  return EcommerceAddressFromJSONTyped(json);
}
function EcommerceAddressFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    line1: !exists(json, 'line1') ? undefined : json['line1'],
    line2: !exists(json, 'line2') ? undefined : json['line2'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    city: !exists(json, 'city') ? undefined : json['city'],
    state: !exists(json, 'state') ? undefined : json['state'],
    postal_code: !exists(json, 'postal_code') ? undefined : json['postal_code'],
    country: !exists(json, 'country') ? undefined : json['country']
  };
}
function EcommerceAddressToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    line1: value.line1,
    line2: value.line2,
    company_name: value.company_name,
    city: value.city,
    state: value.state,
    postal_code: value.postal_code,
    country: value.country
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var EcommerceCustomerAddressesType;
(function (EcommerceCustomerAddressesType) {
  EcommerceCustomerAddressesType["billing"] = "billing";
  EcommerceCustomerAddressesType["shipping"] = "shipping";
  EcommerceCustomerAddressesType["other"] = "other";
})(EcommerceCustomerAddressesType || (EcommerceCustomerAddressesType = {}));
function EcommerceCustomerAddressesFromJSON(json) {
  return EcommerceCustomerAddressesFromJSONTyped(json);
}
function EcommerceCustomerAddressesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: !exists(json, 'type') ? undefined : json['type'],
    id: !exists(json, 'id') ? undefined : json['id'],
    line1: !exists(json, 'line1') ? undefined : json['line1'],
    line2: !exists(json, 'line2') ? undefined : json['line2'],
    city: !exists(json, 'city') ? undefined : json['city'],
    state: !exists(json, 'state') ? undefined : json['state'],
    postal_code: !exists(json, 'postal_code') ? undefined : json['postal_code'],
    country: !exists(json, 'country') ? undefined : json['country']
  };
}
function EcommerceCustomerAddressesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    line1: value.line1,
    line2: value.line2,
    city: value.city,
    state: value.state,
    postal_code: value.postal_code,
    country: value.country
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Current status of the order.
 * @export
 * @enum {string}
 */
var EcommerceOrderStatus;
(function (EcommerceOrderStatus) {
  EcommerceOrderStatus["active"] = "active";
  EcommerceOrderStatus["completed"] = "completed";
  EcommerceOrderStatus["cancelled"] = "cancelled";
  EcommerceOrderStatus["archived"] = "archived";
  EcommerceOrderStatus["unknown"] = "unknown";
})(EcommerceOrderStatus || (EcommerceOrderStatus = {}));
function EcommerceOrderStatusFromJSON(json) {
  return EcommerceOrderStatusFromJSONTyped(json);
}
function EcommerceOrderStatusFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function EcommerceOrderStatusToJSON(value) {
  return value;
}

/* tslint:disable */
function LinkedEcommerceOrderFromJSON(json) {
  return LinkedEcommerceOrderFromJSONTyped(json);
}
function LinkedEcommerceOrderFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    total: !exists(json, 'total') ? undefined : json['total'],
    status: !exists(json, 'status') ? undefined : EcommerceOrderStatusFromJSON(json['status'])
  };
}
function LinkedEcommerceOrderToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    status: EcommerceOrderStatusToJSON(value.status)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var EcommerceCustomerStatus;
(function (EcommerceCustomerStatus) {
  EcommerceCustomerStatus["active"] = "active";
  EcommerceCustomerStatus["archived"] = "archived";
})(EcommerceCustomerStatus || (EcommerceCustomerStatus = {}));
function EcommerceCustomerFromJSON(json) {
  return EcommerceCustomerFromJSONTyped(json);
}
function EcommerceCustomerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    status: !exists(json, 'status') ? undefined : json['status'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    emails: !exists(json, 'emails') ? undefined : json['emails'] === null ? null : json['emails'].map(EmailFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'] === null ? null : json['phone_numbers'].map(PhoneNumberFromJSON),
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(EcommerceCustomerAddressesFromJSON),
    orders: !exists(json, 'orders') ? undefined : json['orders'].map(LinkedEcommerceOrderFromJSON),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at'])
  };
}
function EcommerceCustomerToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    first_name: value.first_name,
    last_name: value.last_name,
    company_name: value.company_name,
    status: value.status,
    currency: CurrencyToJSON(value.currency),
    emails: value.emails === undefined ? undefined : value.emails === null ? null : value.emails.map(EmailToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers === null ? null : value.phone_numbers.map(PhoneNumberToJSON),
    addresses: value.addresses === undefined ? undefined : value.addresses.map(EcommerceCustomerAddressesToJSON),
    orders: value.orders === undefined ? undefined : value.orders.map(LinkedEcommerceOrderToJSON)
  };
}

/* tslint:disable */
function EcommerceCustomersFilterFromJSON(json) {
  return EcommerceCustomersFilterFromJSONTyped(json);
}
function EcommerceCustomersFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    email: !exists(json, 'email') ? undefined : json['email'],
    phone_number: !exists(json, 'phone_number') ? undefined : json['phone_number']
  };
}
function EcommerceCustomersFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    email: value.email,
    phone_number: value.phone_number
  };
}

/* tslint:disable */
function EcommerceDiscountFromJSON(json) {
  return EcommerceDiscountFromJSONTyped(json);
}
function EcommerceDiscountFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    code: !exists(json, 'code') ? undefined : json['code'],
    amount: !exists(json, 'amount') ? undefined : json['amount'],
    percentage: !exists(json, 'percentage') ? undefined : json['percentage']
  };
}
function EcommerceDiscountToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    code: value.code,
    amount: value.amount,
    percentage: value.percentage
  };
}

/* tslint:disable */
function EcommerceOrderLineItemFromJSON(json) {
  return EcommerceOrderLineItemFromJSONTyped(json);
}
function EcommerceOrderLineItemFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    quantity: json['quantity'],
    total_amount: json['total_amount'],
    id: !exists(json, 'id') ? undefined : json['id'],
    product_id: !exists(json, 'product_id') ? undefined : json['product_id'],
    variant_id: !exists(json, 'variant_id') ? undefined : json['variant_id'],
    sku: !exists(json, 'sku') ? undefined : json['sku'],
    description: !exists(json, 'description') ? undefined : json['description'],
    options: !exists(json, 'options') ? undefined : json['options'],
    unit_price: !exists(json, 'unit_price') ? undefined : json['unit_price'],
    tax_rate: !exists(json, 'tax_rate') ? undefined : json['tax_rate'],
    tax_amount: !exists(json, 'tax_amount') ? undefined : json['tax_amount'],
    discounts: !exists(json, 'discounts') ? undefined : json['discounts'].map(EcommerceDiscountFromJSON)
  };
}
function EcommerceOrderLineItemToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    quantity: value.quantity,
    total_amount: value.total_amount,
    product_id: value.product_id,
    variant_id: value.variant_id,
    sku: value.sku,
    description: value.description,
    options: value.options,
    unit_price: value.unit_price,
    tax_rate: value.tax_rate,
    tax_amount: value.tax_amount,
    discounts: value.discounts === undefined ? undefined : value.discounts.map(EcommerceDiscountToJSON)
  };
}

/* tslint:disable */
function LinkedEcommerceCustomerFromJSON(json) {
  return LinkedEcommerceCustomerFromJSONTyped(json);
}
function LinkedEcommerceCustomerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON)
  };
}
function LinkedEcommerceCustomerToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    first_name: value.first_name,
    last_name: value.last_name,
    company_name: value.company_name,
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON)
  };
}

/* tslint:disable */
function TrackingItemFromJSON(json) {
  return TrackingItemFromJSONTyped(json);
}
function TrackingItemFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    provider: json['provider'],
    number: json['number'],
    url: !exists(json, 'url') ? undefined : json['url'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at'])
  };
}
function TrackingItemToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    provider: value.provider,
    number: value.number,
    url: value.url
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var EcommerceOrderPaymentStatus;
(function (EcommerceOrderPaymentStatus) {
  EcommerceOrderPaymentStatus["pending"] = "pending";
  EcommerceOrderPaymentStatus["authorized"] = "authorized";
  EcommerceOrderPaymentStatus["paid"] = "paid";
  EcommerceOrderPaymentStatus["partial"] = "partial";
  EcommerceOrderPaymentStatus["refunded"] = "refunded";
  EcommerceOrderPaymentStatus["voided"] = "voided";
  EcommerceOrderPaymentStatus["unknown"] = "unknown";
})(EcommerceOrderPaymentStatus || (EcommerceOrderPaymentStatus = {}));
/**
 * @export
 * @enum {string}
 */
var EcommerceOrderFulfillmentStatus;
(function (EcommerceOrderFulfillmentStatus) {
  EcommerceOrderFulfillmentStatus["pending"] = "pending";
  EcommerceOrderFulfillmentStatus["shipped"] = "shipped";
  EcommerceOrderFulfillmentStatus["partial"] = "partial";
  EcommerceOrderFulfillmentStatus["delivered"] = "delivered";
  EcommerceOrderFulfillmentStatus["cancelled"] = "cancelled";
  EcommerceOrderFulfillmentStatus["returned"] = "returned";
  EcommerceOrderFulfillmentStatus["unknown"] = "unknown";
})(EcommerceOrderFulfillmentStatus || (EcommerceOrderFulfillmentStatus = {}));
function EcommerceOrderFromJSON(json) {
  return EcommerceOrderFromJSONTyped(json);
}
function EcommerceOrderFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    order_number: !exists(json, 'order_number') ? undefined : json['order_number'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    discounts: !exists(json, 'discounts') ? undefined : json['discounts'].map(EcommerceDiscountFromJSON),
    sub_total: !exists(json, 'sub_total') ? undefined : json['sub_total'],
    shipping_cost: !exists(json, 'shipping_cost') ? undefined : json['shipping_cost'],
    total_discount: !exists(json, 'total_discount') ? undefined : json['total_discount'],
    total_tax: !exists(json, 'total_tax') ? undefined : json['total_tax'],
    total_amount: !exists(json, 'total_amount') ? undefined : json['total_amount'],
    status: !exists(json, 'status') ? undefined : EcommerceOrderStatusFromJSON(json['status']),
    payment_status: !exists(json, 'payment_status') ? undefined : json['payment_status'],
    fulfillment_status: !exists(json, 'fulfillment_status') ? undefined : json['fulfillment_status'],
    payment_method: !exists(json, 'payment_method') ? undefined : json['payment_method'],
    customer: !exists(json, 'customer') ? undefined : LinkedEcommerceCustomerFromJSON(json['customer']),
    billing_address: !exists(json, 'billing_address') ? undefined : EcommerceAddressFromJSON(json['billing_address']),
    shipping_address: !exists(json, 'shipping_address') ? undefined : EcommerceAddressFromJSON(json['shipping_address']),
    tracking: !exists(json, 'tracking') ? undefined : json['tracking'].map(TrackingItemFromJSON),
    line_items: !exists(json, 'line_items') ? undefined : json['line_items'].map(EcommerceOrderLineItemFromJSON),
    note: !exists(json, 'note') ? undefined : json['note'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at'])
  };
}
function EcommerceOrderToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    order_number: value.order_number,
    currency: CurrencyToJSON(value.currency),
    discounts: value.discounts === undefined ? undefined : value.discounts.map(EcommerceDiscountToJSON),
    sub_total: value.sub_total,
    shipping_cost: value.shipping_cost,
    total_discount: value.total_discount,
    total_tax: value.total_tax,
    total_amount: value.total_amount,
    status: EcommerceOrderStatusToJSON(value.status),
    payment_status: value.payment_status,
    fulfillment_status: value.fulfillment_status,
    payment_method: value.payment_method,
    customer: LinkedEcommerceCustomerToJSON(value.customer),
    billing_address: EcommerceAddressToJSON(value.billing_address),
    shipping_address: EcommerceAddressToJSON(value.shipping_address),
    tracking: value.tracking === undefined ? undefined : value.tracking.map(TrackingItemToJSON),
    line_items: value.line_items === undefined ? undefined : value.line_items.map(EcommerceOrderLineItemToJSON),
    note: value.note
  };
}

/* tslint:disable */
function EcommerceOrdersFilterFromJSON(json) {
  return EcommerceOrdersFilterFromJSONTyped(json);
}
function EcommerceOrdersFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    email: !exists(json, 'email') ? undefined : json['email']
  };
}
function EcommerceOrdersFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    email: value.email
  };
}

/* tslint:disable */
function EcommerceProductCategoriesFromJSON(json) {
  return EcommerceProductCategoriesFromJSONTyped(json);
}
function EcommerceProductCategoriesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function EcommerceProductCategoriesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name
  };
}

/* tslint:disable */
function EcommerceProductImagesFromJSON(json) {
  return EcommerceProductImagesFromJSONTyped(json);
}
function EcommerceProductImagesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    url: !exists(json, 'url') ? undefined : json['url']
  };
}
function EcommerceProductImagesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    url: value.url
  };
}

/* tslint:disable */
function EcommerceProductOptionsFromJSON(json) {
  return EcommerceProductOptionsFromJSONTyped(json);
}
function EcommerceProductOptionsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    values: !exists(json, 'values') ? undefined : json['values']
  };
}
function EcommerceProductOptionsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    values: value.values
  };
}

/* tslint:disable */
function EcommerceProductImages1FromJSON(json) {
  return EcommerceProductImages1FromJSONTyped(json);
}
function EcommerceProductImages1FromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    url: !exists(json, 'url') ? undefined : json['url']
  };
}
function EcommerceProductImages1ToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    url: value.url
  };
}

/* tslint:disable */
function EcommerceProductOptions1FromJSON(json) {
  return EcommerceProductOptions1FromJSONTyped(json);
}
function EcommerceProductOptions1FromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    value: !exists(json, 'value') ? undefined : json['value']
  };
}
function EcommerceProductOptions1ToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    value: value.value
  };
}

/* tslint:disable */
function EcommerceProductVariantsFromJSON(json) {
  return EcommerceProductVariantsFromJSONTyped(json);
}
function EcommerceProductVariantsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    price: !exists(json, 'price') ? undefined : json['price'],
    sku: !exists(json, 'sku') ? undefined : json['sku'],
    inventory_quantity: !exists(json, 'inventory_quantity') ? undefined : json['inventory_quantity'],
    weight: !exists(json, 'weight') ? undefined : json['weight'],
    weight_unit: !exists(json, 'weight_unit') ? undefined : json['weight_unit'],
    options: !exists(json, 'options') ? undefined : json['options'].map(EcommerceProductOptions1FromJSON),
    images: !exists(json, 'images') ? undefined : json['images'].map(EcommerceProductImages1FromJSON)
  };
}
function EcommerceProductVariantsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    price: value.price,
    sku: value.sku,
    inventory_quantity: value.inventory_quantity,
    weight: value.weight,
    weight_unit: value.weight_unit,
    options: value.options === undefined ? undefined : value.options.map(EcommerceProductOptions1ToJSON),
    images: value.images === undefined ? undefined : value.images.map(EcommerceProductImages1ToJSON)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var EcommerceProductStatus;
(function (EcommerceProductStatus) {
  EcommerceProductStatus["active"] = "active";
  EcommerceProductStatus["archived"] = "archived";
})(EcommerceProductStatus || (EcommerceProductStatus = {}));
function EcommerceProductFromJSON(json) {
  return EcommerceProductFromJSONTyped(json);
}
function EcommerceProductFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    status: !exists(json, 'status') ? undefined : json['status'],
    price: !exists(json, 'price') ? undefined : json['price'],
    sku: !exists(json, 'sku') ? undefined : json['sku'],
    inventory_quantity: !exists(json, 'inventory_quantity') ? undefined : json['inventory_quantity'],
    images: !exists(json, 'images') ? undefined : json['images'] === null ? null : json['images'].map(EcommerceProductImagesFromJSON),
    weight: !exists(json, 'weight') ? undefined : json['weight'],
    weight_unit: !exists(json, 'weight_unit') ? undefined : json['weight_unit'],
    options: !exists(json, 'options') ? undefined : json['options'].map(EcommerceProductOptionsFromJSON),
    variants: !exists(json, 'variants') ? undefined : json['variants'].map(EcommerceProductVariantsFromJSON),
    tags: !exists(json, 'tags') ? undefined : json['tags'],
    categories: !exists(json, 'categories') ? undefined : json['categories'].map(EcommerceProductCategoriesFromJSON),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at'])
  };
}
function EcommerceProductToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description,
    status: value.status,
    price: value.price,
    sku: value.sku,
    inventory_quantity: value.inventory_quantity,
    images: value.images === undefined ? undefined : value.images === null ? null : value.images.map(EcommerceProductImagesToJSON),
    weight: value.weight,
    weight_unit: value.weight_unit,
    options: value.options === undefined ? undefined : value.options.map(EcommerceProductOptionsToJSON),
    variants: value.variants === undefined ? undefined : value.variants.map(EcommerceProductVariantsToJSON),
    tags: value.tags,
    categories: value.categories === undefined ? undefined : value.categories.map(EcommerceProductCategoriesToJSON)
  };
}

/* tslint:disable */
function EcommerceStoreFromJSON(json) {
  return EcommerceStoreFromJSONTyped(json);
}
function EcommerceStoreFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    store_url: !exists(json, 'store_url') ? undefined : json['store_url'],
    admin_url: !exists(json, 'admin_url') ? undefined : json['admin_url'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at'])
  };
}
function EcommerceStoreToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    store_url: value.store_url,
    admin_url: value.admin_url
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Frequency of employee compensation.
 * @export
 * @enum {string}
 */
var PaymentFrequency;
(function (PaymentFrequency) {
  PaymentFrequency["weekly"] = "weekly";
  PaymentFrequency["biweekly"] = "biweekly";
  PaymentFrequency["monthly"] = "monthly";
  PaymentFrequency["pro_rata"] = "pro-rata";
  PaymentFrequency["other"] = "other";
})(PaymentFrequency || (PaymentFrequency = {}));
function PaymentFrequencyFromJSON(json) {
  return PaymentFrequencyFromJSONTyped(json);
}
function PaymentFrequencyFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function PaymentFrequencyToJSON(value) {
  return value;
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Unit of measurement for employee compensation.
 * @export
 * @enum {string}
 */
var PaymentUnit;
(function (PaymentUnit) {
  PaymentUnit["hour"] = "hour";
  PaymentUnit["week"] = "week";
  PaymentUnit["month"] = "month";
  PaymentUnit["year"] = "year";
  PaymentUnit["paycheck"] = "paycheck";
  PaymentUnit["other"] = "other";
})(PaymentUnit || (PaymentUnit = {}));
function PaymentUnitFromJSON(json) {
  return PaymentUnitFromJSONTyped(json);
}
function PaymentUnitFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function PaymentUnitToJSON(value) {
  return value;
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var EmployeeCompensationFlsaStatus;
(function (EmployeeCompensationFlsaStatus) {
  EmployeeCompensationFlsaStatus["exempt"] = "exempt";
  EmployeeCompensationFlsaStatus["salaried_nonexempt"] = "salaried-nonexempt";
  EmployeeCompensationFlsaStatus["nonexempt"] = "nonexempt";
  EmployeeCompensationFlsaStatus["owner"] = "owner";
  EmployeeCompensationFlsaStatus["other"] = "other";
})(EmployeeCompensationFlsaStatus || (EmployeeCompensationFlsaStatus = {}));
function EmployeeCompensationFromJSON(json) {
  return EmployeeCompensationFromJSONTyped(json);
}
function EmployeeCompensationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    job_id: !exists(json, 'job_id') ? undefined : json['job_id'],
    rate: !exists(json, 'rate') ? undefined : json['rate'],
    payment_unit: !exists(json, 'payment_unit') ? undefined : PaymentUnitFromJSON(json['payment_unit']),
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    flsa_status: !exists(json, 'flsa_status') ? undefined : json['flsa_status'],
    effective_date: !exists(json, 'effective_date') ? undefined : json['effective_date'],
    payment_frequency: !exists(json, 'payment_frequency') ? undefined : PaymentFrequencyFromJSON(json['payment_frequency'])
  };
}
function EmployeeCompensationToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    rate: value.rate,
    payment_unit: PaymentUnitToJSON(value.payment_unit),
    currency: CurrencyToJSON(value.currency),
    flsa_status: value.flsa_status,
    effective_date: value.effective_date,
    payment_frequency: PaymentFrequencyToJSON(value.payment_frequency)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var EmployeeEmploymentRoleType;
(function (EmployeeEmploymentRoleType) {
  EmployeeEmploymentRoleType["contractor"] = "contractor";
  EmployeeEmploymentRoleType["employee"] = "employee";
  EmployeeEmploymentRoleType["freelance"] = "freelance";
  EmployeeEmploymentRoleType["temp"] = "temp";
  EmployeeEmploymentRoleType["internship"] = "internship";
  EmployeeEmploymentRoleType["other"] = "other";
})(EmployeeEmploymentRoleType || (EmployeeEmploymentRoleType = {}));
/**
 * @export
 * @enum {string}
 */
var EmployeeEmploymentRoleSubType;
(function (EmployeeEmploymentRoleSubType) {
  EmployeeEmploymentRoleSubType["full_time"] = "full_time";
  EmployeeEmploymentRoleSubType["part_time"] = "part_time";
  EmployeeEmploymentRoleSubType["hourly"] = "hourly";
  EmployeeEmploymentRoleSubType["other"] = "other";
})(EmployeeEmploymentRoleSubType || (EmployeeEmploymentRoleSubType = {}));
function EmployeeEmploymentRoleFromJSON(json) {
  return EmployeeEmploymentRoleFromJSONTyped(json);
}
function EmployeeEmploymentRoleFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: !exists(json, 'type') ? undefined : json['type'],
    sub_type: !exists(json, 'sub_type') ? undefined : json['sub_type']
  };
}
function EmployeeEmploymentRoleToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    sub_type: value.sub_type
  };
}

/* tslint:disable */
function EmployeeJobFromJSON(json) {
  return EmployeeJobFromJSONTyped(json);
}
function EmployeeJobFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    employee_id: !exists(json, 'employee_id') ? undefined : json['employee_id'],
    title: !exists(json, 'title') ? undefined : json['title'],
    role: !exists(json, 'role') ? undefined : json['role'],
    start_date: !exists(json, 'start_date') ? undefined : json['start_date'] === null ? null : new Date(json['start_date']),
    end_date: !exists(json, 'end_date') ? undefined : json['end_date'] === null ? null : new Date(json['end_date']),
    compensation_rate: !exists(json, 'compensation_rate') ? undefined : json['compensation_rate'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    payment_unit: !exists(json, 'payment_unit') ? undefined : PaymentUnitFromJSON(json['payment_unit']),
    hired_at: !exists(json, 'hired_at') ? undefined : json['hired_at'] === null ? null : new Date(json['hired_at']),
    is_primary: !exists(json, 'is_primary') ? undefined : json['is_primary'],
    location: !exists(json, 'location') ? undefined : AddressFromJSON(json['location'])
  };
}
function EmployeeJobToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    title: value.title,
    role: value.role,
    start_date: value.start_date === undefined ? undefined : value.start_date === null ? null : new Date(value.start_date).toISOString().substr(0, 10),
    end_date: value.end_date === undefined ? undefined : value.end_date === null ? null : new Date(value.end_date).toISOString().substr(0, 10),
    compensation_rate: value.compensation_rate,
    currency: CurrencyToJSON(value.currency),
    payment_unit: PaymentUnitToJSON(value.payment_unit),
    hired_at: value.hired_at === undefined ? undefined : value.hired_at === null ? null : new Date(value.hired_at).toISOString().substr(0, 10),
    is_primary: value.is_primary,
    location: AddressToJSON(value.location)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 * @export
 * @enum {string}
 */
var EmploymentStatus;
(function (EmploymentStatus) {
  EmploymentStatus["active"] = "active";
  EmploymentStatus["inactive"] = "inactive";
  EmploymentStatus["terminated"] = "terminated";
  EmploymentStatus["other"] = "other";
})(EmploymentStatus || (EmploymentStatus = {}));
function EmploymentStatusFromJSON(json) {
  return EmploymentStatusFromJSONTyped(json);
}
function EmploymentStatusFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function EmploymentStatusToJSON(value) {
  return value;
}

/* tslint:disable */
function EmployeeManagerFromJSON(json) {
  return EmployeeManagerFromJSONTyped(json);
}
function EmployeeManagerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    email: !exists(json, 'email') ? undefined : json['email'],
    employment_status: !exists(json, 'employment_status') ? undefined : EmploymentStatusFromJSON(json['employment_status'])
  };
}
function EmployeeManagerToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    first_name: value.first_name,
    last_name: value.last_name,
    email: value.email,
    employment_status: EmploymentStatusToJSON(value.employment_status)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The gender represents the gender identity of a person.
 * @export
 * @enum {string}
 */
var Gender;
(function (Gender) {
  Gender["male"] = "male";
  Gender["female"] = "female";
  Gender["unisex"] = "unisex";
  Gender["other"] = "other";
  Gender["not_specified"] = "not_specified";
})(Gender || (Gender = {}));
function GenderFromJSON(json) {
  return GenderFromJSONTyped(json);
}
function GenderFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function GenderToJSON(value) {
  return value;
}

/* tslint:disable */
function PersonFromJSON(json) {
  return PersonFromJSONTyped(json);
}
function PersonFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    middle_name: !exists(json, 'middle_name') ? undefined : json['middle_name'],
    gender: !exists(json, 'gender') ? undefined : GenderFromJSON(json['gender']),
    initials: !exists(json, 'initials') ? undefined : json['initials'],
    birthday: !exists(json, 'birthday') ? undefined : json['birthday'] === null ? null : new Date(json['birthday']),
    deceased_on: !exists(json, 'deceased_on') ? undefined : json['deceased_on'] === null ? null : new Date(json['deceased_on'])
  };
}
function PersonToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    first_name: value.first_name,
    last_name: value.last_name,
    middle_name: value.middle_name,
    gender: GenderToJSON(value.gender),
    initials: value.initials,
    birthday: value.birthday === undefined ? undefined : value.birthday === null ? null : new Date(value.birthday).toISOString().substr(0, 10),
    deceased_on: value.deceased_on === undefined ? undefined : value.deceased_on === null ? null : new Date(value.deceased_on).toISOString().substr(0, 10)
  };
}

/* tslint:disable */
function ProbationPeriodFromJSON(json) {
  return ProbationPeriodFromJSONTyped(json);
}
function ProbationPeriodFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    start_date: !exists(json, 'start_date') ? undefined : json['start_date'] === null ? null : new Date(json['start_date']),
    end_date: !exists(json, 'end_date') ? undefined : json['end_date'] === null ? null : new Date(json['end_date'])
  };
}
function ProbationPeriodToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    start_date: value.start_date === undefined ? undefined : value.start_date === null ? null : new Date(value.start_date).toISOString().substr(0, 10),
    end_date: value.end_date === undefined ? undefined : value.end_date === null ? null : new Date(value.end_date).toISOString().substr(0, 10)
  };
}

/* tslint:disable */
function TeamFromJSON(json) {
  return TeamFromJSONTyped(json);
}
function TeamFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function TeamToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var EmployeeLeavingReason;
(function (EmployeeLeavingReason) {
  EmployeeLeavingReason["dismissed"] = "dismissed";
  EmployeeLeavingReason["resigned"] = "resigned";
  EmployeeLeavingReason["redundancy"] = "redundancy";
  EmployeeLeavingReason["other"] = "other";
})(EmployeeLeavingReason || (EmployeeLeavingReason = {}));
function EmployeeFromJSON(json) {
  return EmployeeFromJSONTyped(json);
}
function EmployeeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    middle_name: !exists(json, 'middle_name') ? undefined : json['middle_name'],
    display_name: !exists(json, 'display_name') ? undefined : json['display_name'],
    preferred_name: !exists(json, 'preferred_name') ? undefined : json['preferred_name'],
    initials: !exists(json, 'initials') ? undefined : json['initials'],
    salutation: !exists(json, 'salutation') ? undefined : json['salutation'],
    title: !exists(json, 'title') ? undefined : json['title'],
    marital_status: !exists(json, 'marital_status') ? undefined : json['marital_status'],
    partner: !exists(json, 'partner') ? undefined : PersonFromJSON(json['partner']),
    division: !exists(json, 'division') ? undefined : json['division'],
    division_id: !exists(json, 'division_id') ? undefined : json['division_id'],
    department: !exists(json, 'department') ? undefined : json['department'],
    department_id: !exists(json, 'department_id') ? undefined : json['department_id'],
    department_name: !exists(json, 'department_name') ? undefined : json['department_name'],
    team: !exists(json, 'team') ? undefined : TeamFromJSON(json['team']),
    company_id: !exists(json, 'company_id') ? undefined : json['company_id'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    employment_start_date: !exists(json, 'employment_start_date') ? undefined : json['employment_start_date'],
    employment_end_date: !exists(json, 'employment_end_date') ? undefined : json['employment_end_date'],
    leaving_reason: !exists(json, 'leaving_reason') ? undefined : json['leaving_reason'],
    employee_number: !exists(json, 'employee_number') ? undefined : json['employee_number'],
    employment_status: !exists(json, 'employment_status') ? undefined : EmploymentStatusFromJSON(json['employment_status']),
    employment_role: !exists(json, 'employment_role') ? undefined : EmployeeEmploymentRoleFromJSON(json['employment_role']),
    manager: !exists(json, 'manager') ? undefined : EmployeeManagerFromJSON(json['manager']),
    direct_reports: !exists(json, 'direct_reports') ? undefined : json['direct_reports'],
    social_security_number: !exists(json, 'social_security_number') ? undefined : json['social_security_number'],
    birthday: !exists(json, 'birthday') ? undefined : json['birthday'] === null ? null : new Date(json['birthday']),
    deceased_on: !exists(json, 'deceased_on') ? undefined : json['deceased_on'] === null ? null : new Date(json['deceased_on']),
    country_of_birth: !exists(json, 'country_of_birth') ? undefined : json['country_of_birth'],
    description: !exists(json, 'description') ? undefined : json['description'],
    gender: !exists(json, 'gender') ? undefined : GenderFromJSON(json['gender']),
    pronouns: !exists(json, 'pronouns') ? undefined : json['pronouns'],
    preferred_language: !exists(json, 'preferred_language') ? undefined : json['preferred_language'],
    languages: !exists(json, 'languages') ? undefined : json['languages'],
    nationalities: !exists(json, 'nationalities') ? undefined : json['nationalities'],
    photo_url: !exists(json, 'photo_url') ? undefined : json['photo_url'],
    timezone: !exists(json, 'timezone') ? undefined : json['timezone'],
    source: !exists(json, 'source') ? undefined : json['source'],
    source_id: !exists(json, 'source_id') ? undefined : json['source_id'],
    record_url: !exists(json, 'record_url') ? undefined : json['record_url'],
    jobs: !exists(json, 'jobs') ? undefined : json['jobs'] === null ? null : json['jobs'].map(EmployeeJobFromJSON),
    compensations: !exists(json, 'compensations') ? undefined : json['compensations'] === null ? null : json['compensations'].map(EmployeeCompensationFromJSON),
    works_remote: !exists(json, 'works_remote') ? undefined : json['works_remote'],
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON),
    custom_fields: !exists(json, 'custom_fields') ? undefined : json['custom_fields'].map(CustomFieldFromJSON),
    social_links: !exists(json, 'social_links') ? undefined : json['social_links'].map(SocialLinkFromJSON),
    bank_accounts: !exists(json, 'bank_accounts') ? undefined : json['bank_accounts'].map(BankAccountFromJSON),
    tax_code: !exists(json, 'tax_code') ? undefined : json['tax_code'],
    tax_id: !exists(json, 'tax_id') ? undefined : json['tax_id'],
    dietary_preference: !exists(json, 'dietary_preference') ? undefined : json['dietary_preference'],
    food_allergies: !exists(json, 'food_allergies') ? undefined : json['food_allergies'],
    probation_period: !exists(json, 'probation_period') ? undefined : ProbationPeriodFromJSON(json['probation_period']),
    tags: !exists(json, 'tags') ? undefined : TagsFromJSON(json['tags']),
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    deleted: !exists(json, 'deleted') ? undefined : json['deleted'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function EmployeeToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    first_name: value.first_name,
    last_name: value.last_name,
    middle_name: value.middle_name,
    display_name: value.display_name,
    preferred_name: value.preferred_name,
    initials: value.initials,
    salutation: value.salutation,
    title: value.title,
    marital_status: value.marital_status,
    partner: PersonToJSON(value.partner),
    division: value.division,
    division_id: value.division_id,
    department: value.department,
    department_id: value.department_id,
    department_name: value.department_name,
    team: TeamToJSON(value.team),
    company_id: value.company_id,
    company_name: value.company_name,
    employment_start_date: value.employment_start_date,
    employment_end_date: value.employment_end_date,
    leaving_reason: value.leaving_reason,
    employee_number: value.employee_number,
    employment_status: EmploymentStatusToJSON(value.employment_status),
    employment_role: EmployeeEmploymentRoleToJSON(value.employment_role),
    manager: EmployeeManagerToJSON(value.manager),
    direct_reports: value.direct_reports,
    social_security_number: value.social_security_number,
    birthday: value.birthday === undefined ? undefined : value.birthday === null ? null : new Date(value.birthday).toISOString().substr(0, 10),
    deceased_on: value.deceased_on === undefined ? undefined : value.deceased_on === null ? null : new Date(value.deceased_on).toISOString().substr(0, 10),
    country_of_birth: value.country_of_birth,
    description: value.description,
    gender: GenderToJSON(value.gender),
    pronouns: value.pronouns,
    preferred_language: value.preferred_language,
    languages: value.languages,
    nationalities: value.nationalities,
    photo_url: value.photo_url,
    timezone: value.timezone,
    source: value.source,
    source_id: value.source_id,
    record_url: value.record_url,
    jobs: value.jobs === undefined ? undefined : value.jobs === null ? null : value.jobs.map(EmployeeJobToJSON),
    compensations: value.compensations === undefined ? undefined : value.compensations === null ? null : value.compensations.map(EmployeeCompensationToJSON),
    works_remote: value.works_remote,
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON),
    custom_fields: value.custom_fields === undefined ? undefined : value.custom_fields.map(CustomFieldToJSON),
    social_links: value.social_links === undefined ? undefined : value.social_links.map(SocialLinkToJSON),
    bank_accounts: value.bank_accounts === undefined ? undefined : value.bank_accounts.map(BankAccountToJSON),
    tax_code: value.tax_code,
    tax_id: value.tax_id,
    dietary_preference: value.dietary_preference,
    food_allergies: value.food_allergies,
    probation_period: ProbationPeriodToJSON(value.probation_period),
    tags: TagsToJSON(value.tags),
    row_version: value.row_version,
    deleted: value.deleted
  };
}

/* tslint:disable */
function PayrollFromJSON(json) {
  return PayrollFromJSONTyped(json);
}
function PayrollFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    processed: json['processed'],
    check_date: json['check_date'],
    start_date: json['start_date'],
    end_date: json['end_date'],
    company_id: !exists(json, 'company_id') ? undefined : json['company_id'],
    processed_date: !exists(json, 'processed_date') ? undefined : json['processed_date'],
    totals: !exists(json, 'totals') ? undefined : json['totals'],
    compensations: !exists(json, 'compensations') ? undefined : json['compensations'].map(CompensationFromJSON)
  };
}
function PayrollToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    processed: value.processed,
    check_date: value.check_date,
    start_date: value.start_date,
    end_date: value.end_date,
    company_id: value.company_id,
    processed_date: value.processed_date,
    totals: value.totals,
    compensations: value.compensations === undefined ? undefined : value.compensations.map(CompensationToJSON)
  };
}

/* tslint:disable */
function EmployeePayrollFromJSON(json) {
  return EmployeePayrollFromJSONTyped(json);
}
function EmployeePayrollFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    employee: !exists(json, 'employee') ? undefined : EmployeeFromJSON(json['employee']),
    payroll: !exists(json, 'payroll') ? undefined : PayrollFromJSON(json['payroll'])
  };
}
function EmployeePayrollToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    employee: EmployeeToJSON(value.employee),
    payroll: PayrollToJSON(value.payroll)
  };
}

/* tslint:disable */
function EmployeePayrollsFromJSON(json) {
  return EmployeePayrollsFromJSONTyped(json);
}
function EmployeePayrollsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    employee: !exists(json, 'employee') ? undefined : EmployeeFromJSON(json['employee']),
    payrolls: !exists(json, 'payrolls') ? undefined : json['payrolls'] === null ? null : json['payrolls'].map(PayrollFromJSON)
  };
}
function EmployeePayrollsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    employee: EmployeeToJSON(value.employee),
    payrolls: value.payrolls === undefined ? undefined : value.payrolls === null ? null : value.payrolls.map(PayrollToJSON)
  };
}

/* tslint:disable */
function ScheduleWorkPatternOddWeeksFromJSON(json) {
  return ScheduleWorkPatternOddWeeksFromJSONTyped(json);
}
function ScheduleWorkPatternOddWeeksFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    hours_monday: !exists(json, 'hours_monday') ? undefined : json['hours_monday'],
    hours_tuesday: !exists(json, 'hours_tuesday') ? undefined : json['hours_tuesday'],
    hours_wednesday: !exists(json, 'hours_wednesday') ? undefined : json['hours_wednesday'],
    hours_thursday: !exists(json, 'hours_thursday') ? undefined : json['hours_thursday'],
    hours_friday: !exists(json, 'hours_friday') ? undefined : json['hours_friday'],
    hours_saturday: !exists(json, 'hours_saturday') ? undefined : json['hours_saturday'],
    hours_sunday: !exists(json, 'hours_sunday') ? undefined : json['hours_sunday']
  };
}
function ScheduleWorkPatternOddWeeksToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    hours_monday: value.hours_monday,
    hours_tuesday: value.hours_tuesday,
    hours_wednesday: value.hours_wednesday,
    hours_thursday: value.hours_thursday,
    hours_friday: value.hours_friday,
    hours_saturday: value.hours_saturday,
    hours_sunday: value.hours_sunday
  };
}

/* tslint:disable */
function ScheduleWorkPatternFromJSON(json) {
  return ScheduleWorkPatternFromJSONTyped(json);
}
function ScheduleWorkPatternFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    odd_weeks: !exists(json, 'odd_weeks') ? undefined : ScheduleWorkPatternOddWeeksFromJSON(json['odd_weeks']),
    even_weeks: !exists(json, 'even_weeks') ? undefined : ScheduleWorkPatternOddWeeksFromJSON(json['even_weeks'])
  };
}
function ScheduleWorkPatternToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    odd_weeks: ScheduleWorkPatternOddWeeksToJSON(value.odd_weeks),
    even_weeks: ScheduleWorkPatternOddWeeksToJSON(value.even_weeks)
  };
}

/* tslint:disable */
function ScheduleFromJSON(json) {
  return ScheduleFromJSONTyped(json);
}
function ScheduleFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    start_date: json['start_date'],
    end_date: json['end_date'],
    work_pattern: ScheduleWorkPatternFromJSON(json['work_pattern'])
  };
}
function ScheduleToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    start_date: value.start_date,
    end_date: value.end_date,
    work_pattern: ScheduleWorkPatternToJSON(value.work_pattern)
  };
}

/* tslint:disable */
function EmployeeSchedulesFromJSON(json) {
  return EmployeeSchedulesFromJSONTyped(json);
}
function EmployeeSchedulesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    employee: !exists(json, 'employee') ? undefined : EmployeeFromJSON(json['employee']),
    schedules: !exists(json, 'schedules') ? undefined : json['schedules'] === null ? null : json['schedules'].map(ScheduleFromJSON)
  };
}
function EmployeeSchedulesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    employee: EmployeeToJSON(value.employee),
    schedules: value.schedules === undefined ? undefined : value.schedules === null ? null : value.schedules.map(ScheduleToJSON)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var EmployeesFilterEmploymentStatus;
(function (EmployeesFilterEmploymentStatus) {
  EmployeesFilterEmploymentStatus["active"] = "active";
  EmployeesFilterEmploymentStatus["inactive"] = "inactive";
  EmployeesFilterEmploymentStatus["terminated"] = "terminated";
  EmployeesFilterEmploymentStatus["other"] = "other";
})(EmployeesFilterEmploymentStatus || (EmployeesFilterEmploymentStatus = {}));
function EmployeesFilterFromJSON(json) {
  return EmployeesFilterFromJSONTyped(json);
}
function EmployeesFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    company_id: !exists(json, 'company_id') ? undefined : json['company_id'],
    email: !exists(json, 'email') ? undefined : json['email'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    title: !exists(json, 'title') ? undefined : json['title'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    manager_id: !exists(json, 'manager_id') ? undefined : json['manager_id'],
    employment_status: !exists(json, 'employment_status') ? undefined : json['employment_status'],
    employee_number: !exists(json, 'employee_number') ? undefined : json['employee_number'],
    department_id: !exists(json, 'department_id') ? undefined : json['department_id']
  };
}
function EmployeesFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    company_id: value.company_id,
    email: value.email,
    first_name: value.first_name,
    title: value.title,
    last_name: value.last_name,
    manager_id: value.manager_id,
    employment_status: value.employment_status,
    employee_number: value.employee_number,
    department_id: value.department_id
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var EmployeesSortBy;
(function (EmployeesSortBy) {
  EmployeesSortBy["first_name"] = "first_name";
  EmployeesSortBy["last_name"] = "last_name";
  EmployeesSortBy["created_at"] = "created_at";
  EmployeesSortBy["updated_at"] = "updated_at";
})(EmployeesSortBy || (EmployeesSortBy = {}));
function EmployeesSortFromJSON(json) {
  return EmployeesSortFromJSONTyped(json);
}
function EmployeesSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function EmployeesSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

function ExecuteWebhookEventRequestFromJSON(json) {
  return ExecuteWebhookEventRequestFromJSONTyped(json);
}
function ExecuteWebhookEventRequestFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ExecuteWebhookEventRequestToJSON(value) {
  return value;
}

function ExecuteWebhookEventsRequestFromJSON(json) {
  return ExecuteWebhookEventsRequestFromJSONTyped(json);
}
function ExecuteWebhookEventsRequestFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ExecuteWebhookEventsRequestToJSON(value) {
  return value;
}

/* tslint:disable */
function ExecuteWebhookResponseFromJSON(json) {
  return ExecuteWebhookResponseFromJSONTyped(json);
}
function ExecuteWebhookResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    request_id: !exists(json, 'request_id') ? undefined : json['request_id'],
    timestamp: !exists(json, 'timestamp') ? undefined : json['timestamp']
  };
}
function ExecuteWebhookResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    request_id: value.request_id,
    timestamp: value.timestamp
  };
}

/* tslint:disable */
function FilesFilterFromJSON(json) {
  return FilesFilterFromJSONTyped(json);
}
function FilesFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    drive_id: !exists(json, 'drive_id') ? undefined : json['drive_id'],
    folder_id: !exists(json, 'folder_id') ? undefined : json['folder_id'],
    shared: !exists(json, 'shared') ? undefined : json['shared']
  };
}
function FilesFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    drive_id: value.drive_id,
    folder_id: value.folder_id,
    shared: value.shared
  };
}

/* tslint:disable */
function FilesSearchFromJSON(json) {
  return FilesSearchFromJSONTyped(json);
}
function FilesSearchFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    query: json['query'],
    drive_id: !exists(json, 'drive_id') ? undefined : json['drive_id']
  };
}
function FilesSearchToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    query: value.query,
    drive_id: value.drive_id
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var FilesSortBy;
(function (FilesSortBy) {
  FilesSortBy["updated_at"] = "updated_at";
  FilesSortBy["name"] = "name";
})(FilesSortBy || (FilesSortBy = {}));
function FilesSortFromJSON(json) {
  return FilesSortFromJSONTyped(json);
}
function FilesSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function FilesSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
var FileStorageEventType;
(function (FileStorageEventType) {
  FileStorageEventType["Star"] = "*";
  FileStorageEventType["file_storage_file_created"] = "file-storage.file.created";
  FileStorageEventType["file_storage_file_updated"] = "file-storage.file.updated";
  FileStorageEventType["file_storage_file_deleted"] = "file-storage.file.deleted";
})(FileStorageEventType || (FileStorageEventType = {}));
function FileStorageEventTypeFromJSON(json) {
  return FileStorageEventTypeFromJSONTyped(json);
}
function FileStorageEventTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function FileStorageEventTypeToJSON(value) {
  return value;
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The type of resource. Could be file, folder or url
 * @export
 * @enum {string}
 */
var FileType;
(function (FileType) {
  FileType["file"] = "file";
  FileType["folder"] = "folder";
  FileType["url"] = "url";
})(FileType || (FileType = {}));
function FileTypeFromJSON(json) {
  return FileTypeFromJSONTyped(json);
}
function FileTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function FileTypeToJSON(value) {
  return value;
}

/* tslint:disable */
function LinkedFolderFromJSON(json) {
  return LinkedFolderFromJSONTyped(json);
}
function LinkedFolderFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function LinkedFolderToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name
  };
}

/* tslint:disable */
function OwnerFromJSON(json) {
  return OwnerFromJSONTyped(json);
}
function OwnerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    email: !exists(json, 'email') ? undefined : json['email'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function OwnerToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {};
}

/* tslint:disable */
function FolderFromJSON(json) {
  return FolderFromJSONTyped(json);
}
function FolderFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    parent_folders: json['parent_folders'].map(LinkedFolderFromJSON),
    id: !exists(json, 'id') ? undefined : json['id'],
    description: !exists(json, 'description') ? undefined : json['description'],
    path: !exists(json, 'path') ? undefined : json['path'],
    size: !exists(json, 'size') ? undefined : json['size'],
    owner: !exists(json, 'owner') ? undefined : OwnerFromJSON(json['owner']),
    parent_folders_complete: !exists(json, 'parent_folders_complete') ? undefined : json['parent_folders_complete'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function FolderToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    parent_folders: value.parent_folders.map(LinkedFolderToJSON),
    description: value.description,
    owner: OwnerToJSON(value.owner)
  };
}

/* tslint:disable */
function FormFieldOptionGroupFromJSON(json) {
  return FormFieldOptionGroupFromJSONTyped(json);
}
function FormFieldOptionGroupFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    label: !exists(json, 'label') ? undefined : json['label'],
    options: !exists(json, 'options') ? undefined : json['options'].map(SimpleFormFieldOptionFromJSON)
  };
}
function FormFieldOptionGroupToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    label: value.label,
    options: value.options === undefined ? undefined : value.options.map(SimpleFormFieldOptionToJSON)
  };
}

/* tslint:disable */
function LinksFromJSON(json) {
  return LinksFromJSONTyped(json);
}
function LinksFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    previous: !exists(json, 'previous') ? undefined : json['previous'],
    current: !exists(json, 'current') ? undefined : json['current'],
    next: !exists(json, 'next') ? undefined : json['next']
  };
}
function LinksToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    previous: value.previous,
    current: value.current,
    next: value.next
  };
}

/* tslint:disable */
function MetaCursorsFromJSON(json) {
  return MetaCursorsFromJSONTyped(json);
}
function MetaCursorsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    previous: !exists(json, 'previous') ? undefined : json['previous'],
    current: !exists(json, 'current') ? undefined : json['current'],
    next: !exists(json, 'next') ? undefined : json['next']
  };
}
function MetaCursorsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    previous: value.previous,
    current: value.current,
    next: value.next
  };
}

/* tslint:disable */
function MetaFromJSON(json) {
  return MetaFromJSONTyped(json);
}
function MetaFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    items_on_page: !exists(json, 'items_on_page') ? undefined : json['items_on_page'],
    cursors: !exists(json, 'cursors') ? undefined : MetaCursorsFromJSON(json['cursors'])
  };
}
function MetaToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    items_on_page: value.items_on_page,
    cursors: MetaCursorsToJSON(value.cursors)
  };
}

/* tslint:disable */
function GetActivitiesResponseFromJSON(json) {
  return GetActivitiesResponseFromJSONTyped(json);
}
function GetActivitiesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(ActivityFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetActivitiesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(ActivityToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetActivityResponseFromJSON(json) {
  return GetActivityResponseFromJSONTyped(json);
}
function GetActivityResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: ActivityFromJSON(json['data'])
  };
}
function GetActivityResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: ActivityToJSON(value.data)
  };
}

/* tslint:disable */
function GetApiResourceCoverageResponseFromJSON(json) {
  return GetApiResourceCoverageResponseFromJSONTyped(json);
}
function GetApiResourceCoverageResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ApiResourceCoverageFromJSON(json['data']),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetApiResourceCoverageResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ApiResourceCoverageToJSON(value.data),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetApiResourceResponseFromJSON(json) {
  return GetApiResourceResponseFromJSONTyped(json);
}
function GetApiResourceResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ApiResourceFromJSON(json['data']),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetApiResourceResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ApiResourceToJSON(value.data),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetApiResponseFromJSON(json) {
  return GetApiResponseFromJSONTyped(json);
}
function GetApiResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ApiFromJSON(json['data']),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetApiResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ApiToJSON(value.data),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetApisResponseFromJSON(json) {
  return GetApisResponseFromJSONTyped(json);
}
function GetApisResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: json['data'].map(ApiFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetApisResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: value.data.map(ApiToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetApplicantResponseFromJSON(json) {
  return GetApplicantResponseFromJSONTyped(json);
}
function GetApplicantResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: ApplicantFromJSON(json['data'])
  };
}
function GetApplicantResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: ApplicantToJSON(value.data)
  };
}

/* tslint:disable */
function GetApplicantsResponseFromJSON(json) {
  return GetApplicantsResponseFromJSONTyped(json);
}
function GetApplicantsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(ApplicantFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetApplicantsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(ApplicantToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetApplicationResponseFromJSON(json) {
  return GetApplicationResponseFromJSONTyped(json);
}
function GetApplicationResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: ApplicationFromJSON(json['data'])
  };
}
function GetApplicationResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: ApplicationToJSON(value.data)
  };
}

/* tslint:disable */
function GetApplicationsResponseFromJSON(json) {
  return GetApplicationsResponseFromJSONTyped(json);
}
function GetApplicationsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(ApplicationFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetApplicationsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(ApplicationToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetBalanceSheetResponseFromJSON(json) {
  return GetBalanceSheetResponseFromJSONTyped(json);
}
function GetBalanceSheetResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: BalanceSheetFromJSON(json['data'])
  };
}
function GetBalanceSheetResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: BalanceSheetToJSON(value.data)
  };
}

/* tslint:disable */
function GetBillResponseFromJSON(json) {
  return GetBillResponseFromJSONTyped(json);
}
function GetBillResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: BillFromJSON(json['data'])
  };
}
function GetBillResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: BillToJSON(value.data)
  };
}

/* tslint:disable */
function GetBillsResponseFromJSON(json) {
  return GetBillsResponseFromJSONTyped(json);
}
function GetBillsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(BillFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetBillsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(BillToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetCollectionResponseFromJSON(json) {
  return GetCollectionResponseFromJSONTyped(json);
}
function GetCollectionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: CollectionFromJSON(json['data'])
  };
}
function GetCollectionResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: CollectionToJSON(value.data)
  };
}

/* tslint:disable */
function GetCollectionsResponseFromJSON(json) {
  return GetCollectionsResponseFromJSONTyped(json);
}
function GetCollectionsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(CollectionFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetCollectionsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(CollectionToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetCollectionTagsResponseFromJSON(json) {
  return GetCollectionTagsResponseFromJSONTyped(json);
}
function GetCollectionTagsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(CollectionTagFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetCollectionTagsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(CollectionTagToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetCollectionUserResponseFromJSON(json) {
  return GetCollectionUserResponseFromJSONTyped(json);
}
function GetCollectionUserResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: CollectionUserFromJSON(json['data'])
  };
}
function GetCollectionUserResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: CollectionUserToJSON(value.data)
  };
}

/* tslint:disable */
function GetCollectionUsersResponseFromJSON(json) {
  return GetCollectionUsersResponseFromJSONTyped(json);
}
function GetCollectionUsersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(CollectionUserFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetCollectionUsersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(CollectionUserToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetCommentResponseFromJSON(json) {
  return GetCommentResponseFromJSONTyped(json);
}
function GetCommentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: CollectionTicketCommentFromJSON(json['data'])
  };
}
function GetCommentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: CollectionTicketCommentToJSON(value.data)
  };
}

/* tslint:disable */
function GetCommentsResponseFromJSON(json) {
  return GetCommentsResponseFromJSONTyped(json);
}
function GetCommentsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(CollectionTicketCommentFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetCommentsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(CollectionTicketCommentToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetCompaniesResponseFromJSON(json) {
  return GetCompaniesResponseFromJSONTyped(json);
}
function GetCompaniesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(CompanyFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetCompaniesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(CompanyToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetCompanyInfoResponseFromJSON(json) {
  return GetCompanyInfoResponseFromJSONTyped(json);
}
function GetCompanyInfoResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: CompanyInfoFromJSON(json['data'])
  };
}
function GetCompanyInfoResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: CompanyInfoToJSON(value.data)
  };
}

/* tslint:disable */
function GetCompanyResponseFromJSON(json) {
  return GetCompanyResponseFromJSONTyped(json);
}
function GetCompanyResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: CompanyFromJSON(json['data'])
  };
}
function GetCompanyResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: CompanyToJSON(value.data)
  };
}

/* tslint:disable */
function GetConnectionResponseFromJSON(json) {
  return GetConnectionResponseFromJSONTyped(json);
}
function GetConnectionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ConnectionFromJSON(json['data'])
  };
}
function GetConnectionResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ConnectionToJSON(value.data)
  };
}

/* tslint:disable */
function GetConnectionsResponseFromJSON(json) {
  return GetConnectionsResponseFromJSONTyped(json);
}
function GetConnectionsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: json['data'].map(ConnectionFromJSON)
  };
}
function GetConnectionsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: value.data.map(ConnectionToJSON)
  };
}

/* tslint:disable */
function GetConnectorResourceResponseFromJSON(json) {
  return GetConnectorResourceResponseFromJSONTyped(json);
}
function GetConnectorResourceResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ConnectorResourceFromJSON(json['data']),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetConnectorResourceResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ConnectorResourceToJSON(value.data),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetConnectorResponseFromJSON(json) {
  return GetConnectorResponseFromJSONTyped(json);
}
function GetConnectorResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ConnectorFromJSON(json['data']),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetConnectorResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ConnectorToJSON(value.data),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetConnectorsResponseFromJSON(json) {
  return GetConnectorsResponseFromJSONTyped(json);
}
function GetConnectorsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: json['data'].map(ConnectorFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetConnectorsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: value.data.map(ConnectorToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetConsumerResponseFromJSON(json) {
  return GetConsumerResponseFromJSONTyped(json);
}
function GetConsumerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ConsumerFromJSON(json['data'])
  };
}
function GetConsumerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ConsumerToJSON(value.data)
  };
}

/* tslint:disable */
function GetConsumersResponseDataFromJSON(json) {
  return GetConsumersResponseDataFromJSONTyped(json);
}
function GetConsumersResponseDataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    consumer_id: !exists(json, 'consumer_id') ? undefined : json['consumer_id'],
    application_id: !exists(json, 'application_id') ? undefined : json['application_id'],
    metadata: !exists(json, 'metadata') ? undefined : ConsumerMetadataFromJSON(json['metadata']),
    aggregated_request_count: !exists(json, 'aggregated_request_count') ? undefined : json['aggregated_request_count'],
    request_counts: !exists(json, 'request_counts') ? undefined : RequestCountAllocationFromJSON(json['request_counts']),
    created: !exists(json, 'created') ? undefined : json['created'],
    modified: !exists(json, 'modified') ? undefined : json['modified'],
    request_count_updated: !exists(json, 'request_count_updated') ? undefined : json['request_count_updated'],
    services: !exists(json, 'services') ? undefined : json['services']
  };
}
function GetConsumersResponseDataToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    consumer_id: value.consumer_id,
    application_id: value.application_id,
    metadata: ConsumerMetadataToJSON(value.metadata),
    aggregated_request_count: value.aggregated_request_count,
    request_counts: RequestCountAllocationToJSON(value.request_counts),
    created: value.created,
    modified: value.modified,
    request_count_updated: value.request_count_updated,
    services: value.services
  };
}

/* tslint:disable */
function GetConsumersResponseFromJSON(json) {
  return GetConsumersResponseFromJSONTyped(json);
}
function GetConsumersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: json['data'].map(GetConsumersResponseDataFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetConsumersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: value.data.map(GetConsumersResponseDataToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetContactResponseFromJSON(json) {
  return GetContactResponseFromJSONTyped(json);
}
function GetContactResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: ContactFromJSON(json['data'])
  };
}
function GetContactResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: ContactToJSON(value.data)
  };
}

/* tslint:disable */
function GetContactsResponseFromJSON(json) {
  return GetContactsResponseFromJSONTyped(json);
}
function GetContactsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(ContactFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetContactsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(ContactToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetCreditNoteResponseFromJSON(json) {
  return GetCreditNoteResponseFromJSONTyped(json);
}
function GetCreditNoteResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: CreditNoteFromJSON(json['data'])
  };
}
function GetCreditNoteResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: CreditNoteToJSON(value.data)
  };
}

/* tslint:disable */
function GetCreditNotesResponseFromJSON(json) {
  return GetCreditNotesResponseFromJSONTyped(json);
}
function GetCreditNotesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(CreditNoteFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetCreditNotesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(CreditNoteToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetCustomerResponseFromJSON(json) {
  return GetCustomerResponseFromJSONTyped(json);
}
function GetCustomerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: CustomerFromJSON(json['data'])
  };
}
function GetCustomerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: CustomerToJSON(value.data)
  };
}

/* tslint:disable */
function GetCustomersResponseFromJSON(json) {
  return GetCustomersResponseFromJSONTyped(json);
}
function GetCustomersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(CustomerFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetCustomersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(CustomerToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetDepartmentResponseFromJSON(json) {
  return GetDepartmentResponseFromJSONTyped(json);
}
function GetDepartmentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: DepartmentFromJSON(json['data'])
  };
}
function GetDepartmentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: DepartmentToJSON(value.data)
  };
}

/* tslint:disable */
function GetDepartmentsResponseFromJSON(json) {
  return GetDepartmentsResponseFromJSONTyped(json);
}
function GetDepartmentsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(DepartmentFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetDepartmentsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(DepartmentToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetDriveGroupResponseFromJSON(json) {
  return GetDriveGroupResponseFromJSONTyped(json);
}
function GetDriveGroupResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: DriveGroupFromJSON(json['data'])
  };
}
function GetDriveGroupResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: DriveGroupToJSON(value.data)
  };
}

/* tslint:disable */
function GetDriveGroupsResponseFromJSON(json) {
  return GetDriveGroupsResponseFromJSONTyped(json);
}
function GetDriveGroupsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(DriveGroupFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetDriveGroupsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(DriveGroupToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetDriveResponseFromJSON(json) {
  return GetDriveResponseFromJSONTyped(json);
}
function GetDriveResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: DriveFromJSON(json['data'])
  };
}
function GetDriveResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: DriveToJSON(value.data)
  };
}

/* tslint:disable */
function GetDrivesResponseFromJSON(json) {
  return GetDrivesResponseFromJSONTyped(json);
}
function GetDrivesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(DriveFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetDrivesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(DriveToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetEcommerceCustomerResponseFromJSON(json) {
  return GetEcommerceCustomerResponseFromJSONTyped(json);
}
function GetEcommerceCustomerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: EcommerceCustomerFromJSON(json['data'])
  };
}
function GetEcommerceCustomerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: EcommerceCustomerToJSON(value.data)
  };
}

/* tslint:disable */
function GetEcommerceCustomersResponseFromJSON(json) {
  return GetEcommerceCustomersResponseFromJSONTyped(json);
}
function GetEcommerceCustomersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(EcommerceCustomerFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetEcommerceCustomersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(EcommerceCustomerToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetEcommerceOrderResponseFromJSON(json) {
  return GetEcommerceOrderResponseFromJSONTyped(json);
}
function GetEcommerceOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: EcommerceOrderFromJSON(json['data'])
  };
}
function GetEcommerceOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: EcommerceOrderToJSON(value.data)
  };
}

/* tslint:disable */
function GetEcommerceOrdersResponseFromJSON(json) {
  return GetEcommerceOrdersResponseFromJSONTyped(json);
}
function GetEcommerceOrdersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(EcommerceOrderFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetEcommerceOrdersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(EcommerceOrderToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetEmployeePayrollResponseFromJSON(json) {
  return GetEmployeePayrollResponseFromJSONTyped(json);
}
function GetEmployeePayrollResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: EmployeePayrollFromJSON(json['data'])
  };
}
function GetEmployeePayrollResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: EmployeePayrollToJSON(value.data)
  };
}

/* tslint:disable */
function GetEmployeePayrollsResponseFromJSON(json) {
  return GetEmployeePayrollsResponseFromJSONTyped(json);
}
function GetEmployeePayrollsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: EmployeePayrollsFromJSON(json['data'])
  };
}
function GetEmployeePayrollsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: EmployeePayrollsToJSON(value.data)
  };
}

/* tslint:disable */
function GetEmployeeResponseFromJSON(json) {
  return GetEmployeeResponseFromJSONTyped(json);
}
function GetEmployeeResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: EmployeeFromJSON(json['data'])
  };
}
function GetEmployeeResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: EmployeeToJSON(value.data)
  };
}

/* tslint:disable */
function GetEmployeeSchedulesResponseFromJSON(json) {
  return GetEmployeeSchedulesResponseFromJSONTyped(json);
}
function GetEmployeeSchedulesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: EmployeeSchedulesFromJSON(json['data'])
  };
}
function GetEmployeeSchedulesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: EmployeeSchedulesToJSON(value.data)
  };
}

/* tslint:disable */
function GetEmployeesResponseFromJSON(json) {
  return GetEmployeesResponseFromJSONTyped(json);
}
function GetEmployeesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(EmployeeFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetEmployeesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(EmployeeToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function UnifiedFilePermissionsFromJSON(json) {
  return UnifiedFilePermissionsFromJSONTyped(json);
}
function UnifiedFilePermissionsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    download: !exists(json, 'download') ? undefined : json['download']
  };
}
function UnifiedFilePermissionsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    download: value.download
  };
}

/* tslint:disable */
function UnifiedFileFromJSON(json) {
  return UnifiedFileFromJSONTyped(json);
}
function UnifiedFileFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name'],
    type: FileTypeFromJSON(json['type']),
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    description: !exists(json, 'description') ? undefined : json['description'],
    path: !exists(json, 'path') ? undefined : json['path'],
    mime_type: !exists(json, 'mime_type') ? undefined : json['mime_type'],
    downloadable: !exists(json, 'downloadable') ? undefined : json['downloadable'],
    size: !exists(json, 'size') ? undefined : json['size'],
    owner: !exists(json, 'owner') ? undefined : OwnerFromJSON(json['owner']),
    parent_folders: !exists(json, 'parent_folders') ? undefined : json['parent_folders'].map(LinkedFolderFromJSON),
    parent_folders_complete: !exists(json, 'parent_folders_complete') ? undefined : json['parent_folders_complete'],
    permissions: !exists(json, 'permissions') ? undefined : UnifiedFilePermissionsFromJSON(json['permissions']),
    exportable: !exists(json, 'exportable') ? undefined : json['exportable'],
    export_formats: !exists(json, 'export_formats') ? undefined : json['export_formats'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function UnifiedFileToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    type: FileTypeToJSON(value.type),
    description: value.description,
    path: value.path,
    mime_type: value.mime_type,
    downloadable: value.downloadable,
    size: value.size,
    owner: OwnerToJSON(value.owner),
    parent_folders: value.parent_folders === undefined ? undefined : value.parent_folders.map(LinkedFolderToJSON),
    parent_folders_complete: value.parent_folders_complete,
    permissions: UnifiedFilePermissionsToJSON(value.permissions),
    exportable: value.exportable,
    export_formats: value.export_formats
  };
}

/* tslint:disable */
function GetFileResponseFromJSON(json) {
  return GetFileResponseFromJSONTyped(json);
}
function GetFileResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedFileFromJSON(json['data'])
  };
}
function GetFileResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedFileToJSON(value.data)
  };
}

/* tslint:disable */
function GetFilesResponseFromJSON(json) {
  return GetFilesResponseFromJSONTyped(json);
}
function GetFilesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(UnifiedFileFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetFilesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(UnifiedFileToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetFolderResponseFromJSON(json) {
  return GetFolderResponseFromJSONTyped(json);
}
function GetFolderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: FolderFromJSON(json['data'])
  };
}
function GetFolderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: FolderToJSON(value.data)
  };
}

/* tslint:disable */
function GetFoldersResponseFromJSON(json) {
  return GetFoldersResponseFromJSONTyped(json);
}
function GetFoldersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(FolderFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetFoldersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(FolderToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var HrisCompanyStatus;
(function (HrisCompanyStatus) {
  HrisCompanyStatus["active"] = "active";
  HrisCompanyStatus["inactive"] = "inactive";
  HrisCompanyStatus["trial"] = "trial";
  HrisCompanyStatus["other"] = "other";
})(HrisCompanyStatus || (HrisCompanyStatus = {}));
function HrisCompanyFromJSON(json) {
  return HrisCompanyFromJSONTyped(json);
}
function HrisCompanyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    legal_name: json['legal_name'],
    id: !exists(json, 'id') ? undefined : json['id'],
    display_name: !exists(json, 'display_name') ? undefined : json['display_name'],
    subdomain: !exists(json, 'subdomain') ? undefined : json['subdomain'],
    status: !exists(json, 'status') ? undefined : json['status'],
    company_number: !exists(json, 'company_number') ? undefined : json['company_number'],
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON),
    websites: !exists(json, 'websites') ? undefined : json['websites'].map(WebsiteFromJSON),
    debtor_id: !exists(json, 'debtor_id') ? undefined : json['debtor_id'],
    deleted: !exists(json, 'deleted') ? undefined : json['deleted'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function HrisCompanyToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    legal_name: value.legal_name,
    display_name: value.display_name,
    subdomain: value.subdomain,
    status: value.status,
    company_number: value.company_number,
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON),
    websites: value.websites === undefined ? undefined : value.websites.map(WebsiteToJSON),
    debtor_id: value.debtor_id
  };
}

/* tslint:disable */
function GetHrisCompaniesResponseFromJSON(json) {
  return GetHrisCompaniesResponseFromJSONTyped(json);
}
function GetHrisCompaniesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(HrisCompanyFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetHrisCompaniesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(HrisCompanyToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetHrisCompanyResponseFromJSON(json) {
  return GetHrisCompanyResponseFromJSONTyped(json);
}
function GetHrisCompanyResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: HrisCompanyFromJSON(json['data'])
  };
}
function GetHrisCompanyResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: HrisCompanyToJSON(value.data)
  };
}

/* tslint:disable */
function HrisJobLocationFromJSON(json) {
  return HrisJobLocationFromJSONTyped(json);
}
function HrisJobLocationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function HrisJobLocationToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name
  };
}

/* tslint:disable */
function HrisJobFromJSON(json) {
  return HrisJobFromJSONTyped(json);
}
function HrisJobFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    employee_id: !exists(json, 'employee_id') ? undefined : json['employee_id'],
    title: !exists(json, 'title') ? undefined : json['title'],
    start_date: !exists(json, 'start_date') ? undefined : json['start_date'] === null ? null : new Date(json['start_date']),
    end_date: !exists(json, 'end_date') ? undefined : json['end_date'] === null ? null : new Date(json['end_date']),
    employment_status: !exists(json, 'employment_status') ? undefined : EmploymentStatusFromJSON(json['employment_status']),
    department: !exists(json, 'department') ? undefined : json['department'],
    is_primary: !exists(json, 'is_primary') ? undefined : json['is_primary'],
    location: !exists(json, 'location') ? undefined : HrisJobLocationFromJSON(json['location'])
  };
}
function HrisJobToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    employee_id: value.employee_id,
    title: value.title,
    start_date: value.start_date === undefined ? undefined : value.start_date === null ? null : new Date(value.start_date).toISOString().substr(0, 10),
    end_date: value.end_date === undefined ? undefined : value.end_date === null ? null : new Date(value.end_date).toISOString().substr(0, 10),
    employment_status: EmploymentStatusToJSON(value.employment_status),
    department: value.department,
    is_primary: value.is_primary,
    location: HrisJobLocationToJSON(value.location)
  };
}

/* tslint:disable */
function GetHrisJobResponseFromJSON(json) {
  return GetHrisJobResponseFromJSONTyped(json);
}
function GetHrisJobResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: HrisJobFromJSON(json['data'])
  };
}
function GetHrisJobResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: HrisJobToJSON(value.data)
  };
}

/* tslint:disable */
function HrisJobsFromJSON(json) {
  return HrisJobsFromJSONTyped(json);
}
function HrisJobsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    employee: !exists(json, 'employee') ? undefined : EmployeeFromJSON(json['employee']),
    jobs: !exists(json, 'jobs') ? undefined : json['jobs'] === null ? null : json['jobs'].map(HrisJobFromJSON)
  };
}
function HrisJobsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    employee: EmployeeToJSON(value.employee),
    jobs: value.jobs === undefined ? undefined : value.jobs === null ? null : value.jobs.map(HrisJobToJSON)
  };
}

/* tslint:disable */
function GetHrisJobsResponseFromJSON(json) {
  return GetHrisJobsResponseFromJSONTyped(json);
}
function GetHrisJobsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: HrisJobsFromJSON(json['data'])
  };
}
function GetHrisJobsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: HrisJobsToJSON(value.data)
  };
}

/* tslint:disable */
function InvoiceItemSalesDetailsFromJSON(json) {
  return InvoiceItemSalesDetailsFromJSONTyped(json);
}
function InvoiceItemSalesDetailsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    unit_price: !exists(json, 'unit_price') ? undefined : json['unit_price'],
    unit_of_measure: !exists(json, 'unit_of_measure') ? undefined : json['unit_of_measure'],
    tax_inclusive: !exists(json, 'tax_inclusive') ? undefined : json['tax_inclusive'],
    tax_rate: !exists(json, 'tax_rate') ? undefined : LinkedTaxRateFromJSON(json['tax_rate'])
  };
}
function InvoiceItemSalesDetailsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    unit_price: value.unit_price,
    unit_of_measure: value.unit_of_measure,
    tax_inclusive: value.tax_inclusive,
    tax_rate: LinkedTaxRateToJSON(value.tax_rate)
  };
}

/* tslint:disable */
function LinkedTrackingCategoryFromJSON(json) {
  return LinkedTrackingCategoryFromJSONTyped(json);
}
function LinkedTrackingCategoryFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function LinkedTrackingCategoryToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var InvoiceItemType;
(function (InvoiceItemType) {
  InvoiceItemType["inventory"] = "inventory";
  InvoiceItemType["service"] = "service";
  InvoiceItemType["other"] = "other";
})(InvoiceItemType || (InvoiceItemType = {}));
function InvoiceItemFromJSON(json) {
  return InvoiceItemFromJSONTyped(json);
}
function InvoiceItemFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    code: !exists(json, 'code') ? undefined : json['code'],
    sold: !exists(json, 'sold') ? undefined : json['sold'],
    purchased: !exists(json, 'purchased') ? undefined : json['purchased'],
    tracked: !exists(json, 'tracked') ? undefined : json['tracked'],
    taxable: !exists(json, 'taxable') ? undefined : json['taxable'],
    inventory_date: !exists(json, 'inventory_date') ? undefined : json['inventory_date'] === null ? null : new Date(json['inventory_date']),
    type: !exists(json, 'type') ? undefined : json['type'],
    sales_details: !exists(json, 'sales_details') ? undefined : InvoiceItemSalesDetailsFromJSON(json['sales_details']),
    purchase_details: !exists(json, 'purchase_details') ? undefined : InvoiceItemSalesDetailsFromJSON(json['purchase_details']),
    quantity: !exists(json, 'quantity') ? undefined : json['quantity'],
    unit_price: !exists(json, 'unit_price') ? undefined : json['unit_price'],
    asset_account: !exists(json, 'asset_account') ? undefined : LinkedLedgerAccountFromJSON(json['asset_account']),
    income_account: !exists(json, 'income_account') ? undefined : LinkedLedgerAccountFromJSON(json['income_account']),
    expense_account: !exists(json, 'expense_account') ? undefined : LinkedLedgerAccountFromJSON(json['expense_account']),
    tracking_category: !exists(json, 'tracking_category') ? undefined : LinkedTrackingCategoryFromJSON(json['tracking_category']),
    active: !exists(json, 'active') ? undefined : json['active'],
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function InvoiceItemToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description,
    code: value.code,
    sold: value.sold,
    purchased: value.purchased,
    tracked: value.tracked,
    taxable: value.taxable,
    inventory_date: value.inventory_date === undefined ? undefined : value.inventory_date === null ? null : new Date(value.inventory_date).toISOString().substr(0, 10),
    type: value.type,
    sales_details: InvoiceItemSalesDetailsToJSON(value.sales_details),
    purchase_details: InvoiceItemSalesDetailsToJSON(value.purchase_details),
    quantity: value.quantity,
    unit_price: value.unit_price,
    asset_account: LinkedLedgerAccountToJSON(value.asset_account),
    income_account: LinkedLedgerAccountToJSON(value.income_account),
    expense_account: LinkedLedgerAccountToJSON(value.expense_account),
    tracking_category: LinkedTrackingCategoryToJSON(value.tracking_category),
    active: value.active,
    row_version: value.row_version
  };
}

/* tslint:disable */
function GetInvoiceItemResponseFromJSON(json) {
  return GetInvoiceItemResponseFromJSONTyped(json);
}
function GetInvoiceItemResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: InvoiceItemFromJSON(json['data'])
  };
}
function GetInvoiceItemResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: InvoiceItemToJSON(value.data)
  };
}

/* tslint:disable */
function GetInvoiceItemsResponseFromJSON(json) {
  return GetInvoiceItemsResponseFromJSONTyped(json);
}
function GetInvoiceItemsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(InvoiceItemFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetInvoiceItemsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(InvoiceItemToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var InvoiceType;
(function (InvoiceType) {
  InvoiceType["standard"] = "standard";
  InvoiceType["credit"] = "credit";
  InvoiceType["service"] = "service";
  InvoiceType["product"] = "product";
  InvoiceType["supplier"] = "supplier";
  InvoiceType["other"] = "other";
})(InvoiceType || (InvoiceType = {}));
/**
 * @export
 * @enum {string}
 */
var InvoiceStatus;
(function (InvoiceStatus) {
  InvoiceStatus["draft"] = "draft";
  InvoiceStatus["submitted"] = "submitted";
  InvoiceStatus["authorised"] = "authorised";
  InvoiceStatus["partially_paid"] = "partially_paid";
  InvoiceStatus["paid"] = "paid";
  InvoiceStatus["void"] = "void";
  InvoiceStatus["credit"] = "credit";
  InvoiceStatus["deleted"] = "deleted";
})(InvoiceStatus || (InvoiceStatus = {}));
function InvoiceFromJSON(json) {
  return InvoiceFromJSONTyped(json);
}
function InvoiceFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    type: !exists(json, 'type') ? undefined : json['type'],
    number: !exists(json, 'number') ? undefined : json['number'],
    customer: !exists(json, 'customer') ? undefined : LinkedCustomerFromJSON(json['customer']),
    invoice_date: !exists(json, 'invoice_date') ? undefined : json['invoice_date'] === null ? null : new Date(json['invoice_date']),
    due_date: !exists(json, 'due_date') ? undefined : json['due_date'] === null ? null : new Date(json['due_date']),
    terms: !exists(json, 'terms') ? undefined : json['terms'],
    po_number: !exists(json, 'po_number') ? undefined : json['po_number'],
    reference: !exists(json, 'reference') ? undefined : json['reference'],
    status: !exists(json, 'status') ? undefined : json['status'],
    invoice_sent: !exists(json, 'invoice_sent') ? undefined : json['invoice_sent'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    currency_rate: !exists(json, 'currency_rate') ? undefined : json['currency_rate'],
    tax_inclusive: !exists(json, 'tax_inclusive') ? undefined : json['tax_inclusive'],
    sub_total: !exists(json, 'sub_total') ? undefined : json['sub_total'],
    total_tax: !exists(json, 'total_tax') ? undefined : json['total_tax'],
    tax_code: !exists(json, 'tax_code') ? undefined : json['tax_code'],
    discount_percentage: !exists(json, 'discount_percentage') ? undefined : json['discount_percentage'],
    discount_amount: !exists(json, 'discount_amount') ? undefined : json['discount_amount'],
    total: !exists(json, 'total') ? undefined : json['total'],
    balance: !exists(json, 'balance') ? undefined : json['balance'],
    deposit: !exists(json, 'deposit') ? undefined : json['deposit'],
    customer_memo: !exists(json, 'customer_memo') ? undefined : json['customer_memo'],
    tracking_category: !exists(json, 'tracking_category') ? undefined : LinkedTrackingCategoryFromJSON(json['tracking_category']),
    line_items: !exists(json, 'line_items') ? undefined : json['line_items'].map(InvoiceLineItemFromJSON),
    billing_address: !exists(json, 'billing_address') ? undefined : AddressFromJSON(json['billing_address']),
    shipping_address: !exists(json, 'shipping_address') ? undefined : AddressFromJSON(json['shipping_address']),
    template_id: !exists(json, 'template_id') ? undefined : json['template_id'],
    source_document_url: !exists(json, 'source_document_url') ? undefined : json['source_document_url'],
    payment_method: !exists(json, 'payment_method') ? undefined : json['payment_method'],
    channel: !exists(json, 'channel') ? undefined : json['channel'],
    language: !exists(json, 'language') ? undefined : json['language'],
    accounting_by_row: !exists(json, 'accounting_by_row') ? undefined : json['accounting_by_row'],
    bank_account: !exists(json, 'bank_account') ? undefined : BankAccountFromJSON(json['bank_account']),
    ledger_account: !exists(json, 'ledger_account') ? undefined : LinkedLedgerAccountFromJSON(json['ledger_account']),
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function InvoiceToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    number: value.number,
    customer: LinkedCustomerToJSON(value.customer),
    invoice_date: value.invoice_date === undefined ? undefined : value.invoice_date === null ? null : new Date(value.invoice_date).toISOString().substr(0, 10),
    due_date: value.due_date === undefined ? undefined : value.due_date === null ? null : new Date(value.due_date).toISOString().substr(0, 10),
    terms: value.terms,
    po_number: value.po_number,
    reference: value.reference,
    status: value.status,
    invoice_sent: value.invoice_sent,
    currency: CurrencyToJSON(value.currency),
    currency_rate: value.currency_rate,
    tax_inclusive: value.tax_inclusive,
    sub_total: value.sub_total,
    total_tax: value.total_tax,
    tax_code: value.tax_code,
    discount_percentage: value.discount_percentage,
    discount_amount: value.discount_amount,
    total: value.total,
    balance: value.balance,
    deposit: value.deposit,
    customer_memo: value.customer_memo,
    tracking_category: LinkedTrackingCategoryToJSON(value.tracking_category),
    line_items: value.line_items === undefined ? undefined : value.line_items.map(InvoiceLineItemToJSON),
    billing_address: AddressToJSON(value.billing_address),
    shipping_address: AddressToJSON(value.shipping_address),
    template_id: value.template_id,
    source_document_url: value.source_document_url,
    payment_method: value.payment_method,
    channel: value.channel,
    language: value.language,
    accounting_by_row: value.accounting_by_row,
    bank_account: BankAccountToJSON(value.bank_account),
    ledger_account: LinkedLedgerAccountToJSON(value.ledger_account),
    row_version: value.row_version
  };
}

/* tslint:disable */
function GetInvoiceResponseFromJSON(json) {
  return GetInvoiceResponseFromJSONTyped(json);
}
function GetInvoiceResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: InvoiceFromJSON(json['data'])
  };
}
function GetInvoiceResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: InvoiceToJSON(value.data)
  };
}

/* tslint:disable */
function GetInvoicesResponseFromJSON(json) {
  return GetInvoicesResponseFromJSONTyped(json);
}
function GetInvoicesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(InvoiceFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetInvoicesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(InvoiceToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ItemProductType;
(function (ItemProductType) {
  ItemProductType["regular"] = "regular";
  ItemProductType["other"] = "other";
})(ItemProductType || (ItemProductType = {}));
/**
 * @export
 * @enum {string}
 */
var ItemPricingType;
(function (ItemPricingType) {
  ItemPricingType["fixed"] = "fixed";
  ItemPricingType["variable"] = "variable";
  ItemPricingType["per_unit"] = "per_unit";
  ItemPricingType["other"] = "other";
})(ItemPricingType || (ItemPricingType = {}));
function ItemFromJSON(json) {
  return ItemFromJSONTyped(json);
}
function ItemFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    id: !exists(json, 'id') ? undefined : json['id'],
    idempotency_key: !exists(json, 'idempotency_key') ? undefined : json['idempotency_key'],
    description: !exists(json, 'description') ? undefined : json['description'],
    abbreviation: !exists(json, 'abbreviation') ? undefined : json['abbreviation'],
    product_type: !exists(json, 'product_type') ? undefined : json['product_type'],
    price_amount: !exists(json, 'price_amount') ? undefined : json['price_amount'],
    pricing_type: !exists(json, 'pricing_type') ? undefined : json['pricing_type'],
    price_currency: !exists(json, 'price_currency') ? undefined : CurrencyFromJSON(json['price_currency']),
    cost: !exists(json, 'cost') ? undefined : json['cost'],
    tax_ids: !exists(json, 'tax_ids') ? undefined : json['tax_ids'],
    is_revenue: !exists(json, 'is_revenue') ? undefined : json['is_revenue'],
    use_default_tax_rates: !exists(json, 'use_default_tax_rates') ? undefined : json['use_default_tax_rates'],
    absent_at_location_ids: !exists(json, 'absent_at_location_ids') ? undefined : json['absent_at_location_ids'],
    present_at_all_locations: !exists(json, 'present_at_all_locations') ? undefined : json['present_at_all_locations'],
    available_for_pickup: !exists(json, 'available_for_pickup') ? undefined : json['available_for_pickup'],
    available_online: !exists(json, 'available_online') ? undefined : json['available_online'],
    sku: !exists(json, 'sku') ? undefined : json['sku'],
    code: !exists(json, 'code') ? undefined : json['code'],
    categories: !exists(json, 'categories') ? undefined : json['categories'],
    options: !exists(json, 'options') ? undefined : json['options'],
    variations: !exists(json, 'variations') ? undefined : json['variations'],
    modifier_groups: !exists(json, 'modifier_groups') ? undefined : json['modifier_groups'],
    available: !exists(json, 'available') ? undefined : json['available'],
    hidden: !exists(json, 'hidden') ? undefined : json['hidden'],
    version: !exists(json, 'version') ? undefined : json['version'],
    deleted: !exists(json, 'deleted') ? undefined : json['deleted'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function ItemToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    id: value.id,
    idempotency_key: value.idempotency_key,
    description: value.description,
    abbreviation: value.abbreviation,
    product_type: value.product_type,
    price_amount: value.price_amount,
    pricing_type: value.pricing_type,
    price_currency: CurrencyToJSON(value.price_currency),
    cost: value.cost,
    tax_ids: value.tax_ids,
    is_revenue: value.is_revenue,
    use_default_tax_rates: value.use_default_tax_rates,
    absent_at_location_ids: value.absent_at_location_ids,
    present_at_all_locations: value.present_at_all_locations,
    available_for_pickup: value.available_for_pickup,
    available_online: value.available_online,
    sku: value.sku,
    code: value.code,
    categories: value.categories,
    options: value.options,
    variations: value.variations,
    modifier_groups: value.modifier_groups,
    available: value.available,
    hidden: value.hidden,
    deleted: value.deleted
  };
}

/* tslint:disable */
function GetItemResponseFromJSON(json) {
  return GetItemResponseFromJSONTyped(json);
}
function GetItemResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: ItemFromJSON(json['data'])
  };
}
function GetItemResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: ItemToJSON(value.data)
  };
}

/* tslint:disable */
function GetItemsResponseFromJSON(json) {
  return GetItemsResponseFromJSONTyped(json);
}
function GetItemsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(ItemFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetItemsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(ItemToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var JobLinksType;
(function (JobLinksType) {
  JobLinksType["portal"] = "job_portal";
  JobLinksType["description"] = "job_description";
})(JobLinksType || (JobLinksType = {}));
function JobLinksFromJSON(json) {
  return JobLinksFromJSONTyped(json);
}
function JobLinksFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: !exists(json, 'type') ? undefined : json['type'],
    url: !exists(json, 'url') ? undefined : json['url']
  };
}
function JobLinksToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    url: value.url
  };
}

/* tslint:disable */
function JobSalaryFromJSON(json) {
  return JobSalaryFromJSONTyped(json);
}
function JobSalaryFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    min: !exists(json, 'min') ? undefined : json['min'],
    max: !exists(json, 'max') ? undefined : json['max'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    interval: !exists(json, 'interval') ? undefined : json['interval']
  };
}
function JobSalaryToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    min: value.min,
    max: value.max,
    currency: CurrencyToJSON(value.currency),
    interval: value.interval
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The status of the job.
 * @export
 * @enum {string}
 */
var JobStatus;
(function (JobStatus) {
  JobStatus["draft"] = "draft";
  JobStatus["internal"] = "internal";
  JobStatus["published"] = "published";
  JobStatus["completed"] = "completed";
  JobStatus["on_hold"] = "on-hold";
  JobStatus["private"] = "private";
})(JobStatus || (JobStatus = {}));
function JobStatusFromJSON(json) {
  return JobStatusFromJSONTyped(json);
}
function JobStatusFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function JobStatusToJSON(value) {
  return value;
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var JobVisibility;
(function (JobVisibility) {
  JobVisibility["draft"] = "draft";
  JobVisibility["public"] = "public";
  JobVisibility["internal"] = "internal";
})(JobVisibility || (JobVisibility = {}));
/**
 * @export
 * @enum {string}
 */
var JobEmploymentTerms;
(function (JobEmploymentTerms) {
  JobEmploymentTerms["full_time"] = "full-time";
  JobEmploymentTerms["part_time"] = "part-time";
  JobEmploymentTerms["internship"] = "internship";
  JobEmploymentTerms["contractor"] = "contractor";
  JobEmploymentTerms["employee"] = "employee";
  JobEmploymentTerms["freelance"] = "freelance";
  JobEmploymentTerms["temp"] = "temp";
  JobEmploymentTerms["seasonal"] = "seasonal";
  JobEmploymentTerms["volunteer"] = "volunteer";
  JobEmploymentTerms["other"] = "other";
})(JobEmploymentTerms || (JobEmploymentTerms = {}));
function JobFromJSON(json) {
  return JobFromJSONTyped(json);
}
function JobFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    slug: !exists(json, 'slug') ? undefined : json['slug'],
    title: !exists(json, 'title') ? undefined : json['title'],
    sequence: !exists(json, 'sequence') ? undefined : json['sequence'],
    visibility: !exists(json, 'visibility') ? undefined : json['visibility'],
    status: !exists(json, 'status') ? undefined : JobStatusFromJSON(json['status']),
    code: !exists(json, 'code') ? undefined : json['code'],
    language: !exists(json, 'language') ? undefined : json['language'],
    employment_terms: !exists(json, 'employment_terms') ? undefined : json['employment_terms'],
    experience: !exists(json, 'experience') ? undefined : json['experience'],
    location: !exists(json, 'location') ? undefined : json['location'],
    remote: !exists(json, 'remote') ? undefined : json['remote'],
    requisition_id: !exists(json, 'requisition_id') ? undefined : json['requisition_id'],
    department: !exists(json, 'department') ? undefined : DepartmentFromJSON(json['department']),
    branch: !exists(json, 'branch') ? undefined : BranchFromJSON(json['branch']),
    recruiters: !exists(json, 'recruiters') ? undefined : json['recruiters'],
    hiring_managers: !exists(json, 'hiring_managers') ? undefined : json['hiring_managers'],
    followers: !exists(json, 'followers') ? undefined : json['followers'],
    description: !exists(json, 'description') ? undefined : json['description'],
    description_html: !exists(json, 'description_html') ? undefined : json['description_html'],
    blocks: !exists(json, 'blocks') ? undefined : json['blocks'],
    closing: !exists(json, 'closing') ? undefined : json['closing'],
    closing_html: !exists(json, 'closing_html') ? undefined : json['closing_html'],
    closing_date: !exists(json, 'closing_date') ? undefined : json['closing_date'] === null ? null : new Date(json['closing_date']),
    salary: !exists(json, 'salary') ? undefined : JobSalaryFromJSON(json['salary']),
    url: !exists(json, 'url') ? undefined : json['url'],
    job_portal_url: !exists(json, 'job_portal_url') ? undefined : json['job_portal_url'],
    record_url: !exists(json, 'record_url') ? undefined : json['record_url'],
    links: !exists(json, 'links') ? undefined : json['links'].map(JobLinksFromJSON),
    confidential: !exists(json, 'confidential') ? undefined : json['confidential'],
    available_to_employees: !exists(json, 'available_to_employees') ? undefined : json['available_to_employees'],
    tags: !exists(json, 'tags') ? undefined : TagsFromJSON(json['tags']),
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    custom_fields: !exists(json, 'custom_fields') ? undefined : json['custom_fields'].map(CustomFieldFromJSON),
    deleted: !exists(json, 'deleted') ? undefined : json['deleted'],
    owner_id: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    published_at: !exists(json, 'published_at') ? undefined : json['published_at'] === null ? null : new Date(json['published_at']),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function JobToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    slug: value.slug,
    title: value.title,
    sequence: value.sequence,
    visibility: value.visibility,
    status: JobStatusToJSON(value.status),
    code: value.code,
    language: value.language,
    employment_terms: value.employment_terms,
    experience: value.experience,
    location: value.location,
    remote: value.remote,
    requisition_id: value.requisition_id,
    department: DepartmentToJSON(value.department),
    branch: BranchToJSON(value.branch),
    recruiters: value.recruiters,
    hiring_managers: value.hiring_managers,
    followers: value.followers,
    description: value.description,
    description_html: value.description_html,
    blocks: value.blocks,
    closing: value.closing,
    closing_html: value.closing_html,
    closing_date: value.closing_date === undefined ? undefined : value.closing_date === null ? null : new Date(value.closing_date).toISOString().substr(0, 10),
    salary: JobSalaryToJSON(value.salary),
    url: value.url,
    job_portal_url: value.job_portal_url,
    record_url: value.record_url,
    links: value.links === undefined ? undefined : value.links.map(JobLinksToJSON),
    confidential: value.confidential,
    available_to_employees: value.available_to_employees,
    tags: TagsToJSON(value.tags),
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    custom_fields: value.custom_fields === undefined ? undefined : value.custom_fields.map(CustomFieldToJSON),
    deleted: value.deleted,
    owner_id: value.owner_id
  };
}

/* tslint:disable */
function GetJobResponseFromJSON(json) {
  return GetJobResponseFromJSONTyped(json);
}
function GetJobResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: JobFromJSON(json['data'])
  };
}
function GetJobResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: JobToJSON(value.data)
  };
}

/* tslint:disable */
function GetJobsResponseFromJSON(json) {
  return GetJobsResponseFromJSONTyped(json);
}
function GetJobsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(JobFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetJobsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(JobToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var JournalEntryLineItemType;
(function (JournalEntryLineItemType) {
  JournalEntryLineItemType["debit"] = "debit";
  JournalEntryLineItemType["credit"] = "credit";
})(JournalEntryLineItemType || (JournalEntryLineItemType = {}));
function JournalEntryLineItemFromJSON(json) {
  return JournalEntryLineItemFromJSONTyped(json);
}
function JournalEntryLineItemFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: json['type'],
    ledger_account: LinkedLedgerAccountFromJSON(json['ledger_account']),
    id: !exists(json, 'id') ? undefined : json['id'],
    description: !exists(json, 'description') ? undefined : json['description'],
    tax_amount: !exists(json, 'tax_amount') ? undefined : json['tax_amount'],
    sub_total: !exists(json, 'sub_total') ? undefined : json['sub_total'],
    total_amount: !exists(json, 'total_amount') ? undefined : json['total_amount'],
    tax_rate: !exists(json, 'tax_rate') ? undefined : LinkedTaxRateFromJSON(json['tax_rate']),
    tracking_category: !exists(json, 'tracking_category') ? undefined : LinkedTrackingCategoryFromJSON(json['tracking_category']),
    department_id: !exists(json, 'department_id') ? undefined : json['department_id'],
    location_id: !exists(json, 'location_id') ? undefined : json['location_id']
  };
}
function JournalEntryLineItemToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    ledger_account: LinkedLedgerAccountToJSON(value.ledger_account),
    description: value.description,
    tax_amount: value.tax_amount,
    sub_total: value.sub_total,
    total_amount: value.total_amount,
    tax_rate: LinkedTaxRateToJSON(value.tax_rate),
    tracking_category: LinkedTrackingCategoryToJSON(value.tracking_category)
  };
}

/* tslint:disable */
function JournalEntryFromJSON(json) {
  return JournalEntryFromJSONTyped(json);
}
function JournalEntryFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    title: !exists(json, 'title') ? undefined : json['title'],
    currency_rate: !exists(json, 'currency_rate') ? undefined : json['currency_rate'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    line_items: !exists(json, 'line_items') ? undefined : json['line_items'].map(JournalEntryLineItemFromJSON),
    memo: !exists(json, 'memo') ? undefined : json['memo'],
    posted_at: !exists(json, 'posted_at') ? undefined : new Date(json['posted_at']),
    journal_symbol: !exists(json, 'journal_symbol') ? undefined : json['journal_symbol'],
    tax_type: !exists(json, 'tax_type') ? undefined : json['tax_type'],
    tax_code: !exists(json, 'tax_code') ? undefined : json['tax_code'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    row_version: !exists(json, 'row_version') ? undefined : json['row_version']
  };
}
function JournalEntryToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    title: value.title,
    currency_rate: value.currency_rate,
    currency: CurrencyToJSON(value.currency),
    line_items: value.line_items === undefined ? undefined : value.line_items.map(JournalEntryLineItemToJSON),
    memo: value.memo,
    posted_at: value.posted_at === undefined ? undefined : new Date(value.posted_at).toISOString(),
    journal_symbol: value.journal_symbol,
    tax_type: value.tax_type,
    tax_code: value.tax_code,
    row_version: value.row_version
  };
}

/* tslint:disable */
function GetJournalEntriesResponseFromJSON(json) {
  return GetJournalEntriesResponseFromJSONTyped(json);
}
function GetJournalEntriesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(JournalEntryFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetJournalEntriesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(JournalEntryToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetJournalEntryResponseFromJSON(json) {
  return GetJournalEntryResponseFromJSONTyped(json);
}
function GetJournalEntryResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: JournalEntryFromJSON(json['data'])
  };
}
function GetJournalEntryResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: JournalEntryToJSON(value.data)
  };
}

/* tslint:disable */
function LeadFromJSON(json) {
  return LeadFromJSONTyped(json);
}
function LeadFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    company_name: json['company_name'],
    id: !exists(json, 'id') ? undefined : json['id'],
    owner_id: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    company_id: !exists(json, 'company_id') ? undefined : json['company_id'],
    lead_id: !exists(json, 'lead_id') ? undefined : json['lead_id'],
    lead_source: !exists(json, 'lead_source') ? undefined : json['lead_source'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    prefix: !exists(json, 'prefix') ? undefined : json['prefix'],
    title: !exists(json, 'title') ? undefined : json['title'],
    language: !exists(json, 'language') ? undefined : json['language'],
    status: !exists(json, 'status') ? undefined : json['status'],
    monetary_amount: !exists(json, 'monetary_amount') ? undefined : json['monetary_amount'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    fax: !exists(json, 'fax') ? undefined : json['fax'],
    websites: !exists(json, 'websites') ? undefined : json['websites'].map(WebsiteFromJSON),
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    social_links: !exists(json, 'social_links') ? undefined : json['social_links'].map(SocialLinkFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON),
    custom_fields: !exists(json, 'custom_fields') ? undefined : json['custom_fields'].map(CustomFieldFromJSON),
    tags: !exists(json, 'tags') ? undefined : TagsFromJSON(json['tags']),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at']
  };
}
function LeadToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    company_name: value.company_name,
    owner_id: value.owner_id,
    company_id: value.company_id,
    lead_id: value.lead_id,
    lead_source: value.lead_source,
    first_name: value.first_name,
    last_name: value.last_name,
    description: value.description,
    prefix: value.prefix,
    title: value.title,
    language: value.language,
    status: value.status,
    monetary_amount: value.monetary_amount,
    currency: CurrencyToJSON(value.currency),
    fax: value.fax,
    websites: value.websites === undefined ? undefined : value.websites.map(WebsiteToJSON),
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    social_links: value.social_links === undefined ? undefined : value.social_links.map(SocialLinkToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON),
    custom_fields: value.custom_fields === undefined ? undefined : value.custom_fields.map(CustomFieldToJSON),
    tags: TagsToJSON(value.tags)
  };
}

/* tslint:disable */
function GetLeadResponseFromJSON(json) {
  return GetLeadResponseFromJSONTyped(json);
}
function GetLeadResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: LeadFromJSON(json['data'])
  };
}
function GetLeadResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: LeadToJSON(value.data)
  };
}

/* tslint:disable */
function GetLeadsResponseFromJSON(json) {
  return GetLeadsResponseFromJSONTyped(json);
}
function GetLeadsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(LeadFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetLeadsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(LeadToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function LedgerAccountCategoriesFromJSON(json) {
  return LedgerAccountCategoriesFromJSONTyped(json);
}
function LedgerAccountCategoriesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function LedgerAccountCategoriesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {};
}

/* tslint:disable */
function LedgerAccountParentAccountFromJSON(json) {
  return LedgerAccountParentAccountFromJSONTyped(json);
}
function LedgerAccountParentAccountFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    display_id: !exists(json, 'display_id') ? undefined : json['display_id']
  };
}
function LedgerAccountParentAccountToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    display_id: value.display_id
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var LedgerAccountClassification;
(function (LedgerAccountClassification) {
  LedgerAccountClassification["asset"] = "asset";
  LedgerAccountClassification["equity"] = "equity";
  LedgerAccountClassification["expense"] = "expense";
  LedgerAccountClassification["liability"] = "liability";
  LedgerAccountClassification["revenue"] = "revenue";
  LedgerAccountClassification["income"] = "income";
  LedgerAccountClassification["other_income"] = "other_income";
  LedgerAccountClassification["other_expense"] = "other_expense";
  LedgerAccountClassification["costs_of_sales"] = "costs_of_sales";
})(LedgerAccountClassification || (LedgerAccountClassification = {}));
/**
 * @export
 * @enum {string}
 */
var LedgerAccountType;
(function (LedgerAccountType) {
  LedgerAccountType["accounts_receivable"] = "accounts_receivable";
  LedgerAccountType["revenue"] = "revenue";
  LedgerAccountType["sales"] = "sales";
  LedgerAccountType["other_income"] = "other_income";
  LedgerAccountType["bank"] = "bank";
  LedgerAccountType["current_asset"] = "current_asset";
  LedgerAccountType["fixed_asset"] = "fixed_asset";
  LedgerAccountType["non_current_asset"] = "non_current_asset";
  LedgerAccountType["other_asset"] = "other_asset";
  LedgerAccountType["balancesheet"] = "balancesheet";
  LedgerAccountType["equity"] = "equity";
  LedgerAccountType["expense"] = "expense";
  LedgerAccountType["other_expense"] = "other_expense";
  LedgerAccountType["costs_of_sales"] = "costs_of_sales";
  LedgerAccountType["accounts_payable"] = "accounts_payable";
  LedgerAccountType["credit_card"] = "credit_card";
  LedgerAccountType["current_liability"] = "current_liability";
  LedgerAccountType["non_current_liability"] = "non_current_liability";
  LedgerAccountType["other_liability"] = "other_liability";
  LedgerAccountType["other"] = "other";
})(LedgerAccountType || (LedgerAccountType = {}));
/**
 * @export
 * @enum {string}
 */
var LedgerAccountStatus;
(function (LedgerAccountStatus) {
  LedgerAccountStatus["active"] = "active";
  LedgerAccountStatus["inactive"] = "inactive";
  LedgerAccountStatus["archived"] = "archived";
})(LedgerAccountStatus || (LedgerAccountStatus = {}));
function LedgerAccountFromJSON(json) {
  return LedgerAccountFromJSONTyped(json);
}
function LedgerAccountFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    ...json,
    id: !exists(json, 'id') ? undefined : json['id'],
    display_id: !exists(json, 'display_id') ? undefined : json['display_id'],
    nominal_code: !exists(json, 'nominal_code') ? undefined : json['nominal_code'],
    code: !exists(json, 'code') ? undefined : json['code'],
    classification: !exists(json, 'classification') ? undefined : json['classification'],
    type: !exists(json, 'type') ? undefined : json['type'],
    sub_type: !exists(json, 'sub_type') ? undefined : json['sub_type'],
    name: !exists(json, 'name') ? undefined : json['name'],
    fully_qualified_name: !exists(json, 'fully_qualified_name') ? undefined : json['fully_qualified_name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    opening_balance: !exists(json, 'opening_balance') ? undefined : json['opening_balance'],
    current_balance: !exists(json, 'current_balance') ? undefined : json['current_balance'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    tax_type: !exists(json, 'tax_type') ? undefined : json['tax_type'],
    tax_rate: !exists(json, 'tax_rate') ? undefined : LinkedTaxRateFromJSON(json['tax_rate']),
    level: !exists(json, 'level') ? undefined : json['level'],
    active: !exists(json, 'active') ? undefined : json['active'],
    status: !exists(json, 'status') ? undefined : json['status'],
    header: !exists(json, 'header') ? undefined : json['header'],
    bank_account: !exists(json, 'bank_account') ? undefined : BankAccountFromJSON(json['bank_account']),
    categories: !exists(json, 'categories') ? undefined : json['categories'].map(LedgerAccountCategoriesFromJSON),
    parent_account: !exists(json, 'parent_account') ? undefined : LedgerAccountParentAccountFromJSON(json['parent_account']),
    sub_account: !exists(json, 'sub_account') ? undefined : json['sub_account'],
    sub_accounts: !exists(json, 'sub_accounts') ? undefined : json['sub_accounts'],
    last_reconciliation_date: !exists(json, 'last_reconciliation_date') ? undefined : json['last_reconciliation_date'] === null ? null : new Date(json['last_reconciliation_date']),
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function LedgerAccountToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    ...value,
    display_id: value.display_id,
    nominal_code: value.nominal_code,
    code: value.code,
    classification: value.classification,
    type: value.type,
    sub_type: value.sub_type,
    name: value.name,
    fully_qualified_name: value.fully_qualified_name,
    description: value.description,
    opening_balance: value.opening_balance,
    current_balance: value.current_balance,
    currency: CurrencyToJSON(value.currency),
    tax_type: value.tax_type,
    tax_rate: LinkedTaxRateToJSON(value.tax_rate),
    level: value.level,
    active: value.active,
    status: value.status,
    header: value.header,
    bank_account: BankAccountToJSON(value.bank_account),
    parent_account: LedgerAccountParentAccountToJSON(value.parent_account),
    sub_account: value.sub_account,
    last_reconciliation_date: value.last_reconciliation_date === undefined ? undefined : value.last_reconciliation_date === null ? null : new Date(value.last_reconciliation_date).toISOString().substr(0, 10),
    row_version: value.row_version
  };
}

/* tslint:disable */
function GetLedgerAccountResponseFromJSON(json) {
  return GetLedgerAccountResponseFromJSONTyped(json);
}
function GetLedgerAccountResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: LedgerAccountFromJSON(json['data'])
  };
}
function GetLedgerAccountResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: LedgerAccountToJSON(value.data)
  };
}

/* tslint:disable */
function GetLedgerAccountsResponseFromJSON(json) {
  return GetLedgerAccountsResponseFromJSONTyped(json);
}
function GetLedgerAccountsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(LedgerAccountFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetLedgerAccountsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(LedgerAccountToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var LocationStatus;
(function (LocationStatus) {
  LocationStatus["active"] = "active";
  LocationStatus["inactive"] = "inactive";
  LocationStatus["other"] = "other";
})(LocationStatus || (LocationStatus = {}));
function LocationFromJSON(json) {
  return LocationFromJSONTyped(json);
}
function LocationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    business_name: !exists(json, 'business_name') ? undefined : json['business_name'],
    address: !exists(json, 'address') ? undefined : AddressFromJSON(json['address']),
    status: !exists(json, 'status') ? undefined : json['status'],
    merchant_id: !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function LocationToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    business_name: value.business_name,
    address: AddressToJSON(value.address),
    status: value.status,
    merchant_id: value.merchant_id,
    currency: CurrencyToJSON(value.currency)
  };
}

/* tslint:disable */
function GetLocationResponseFromJSON(json) {
  return GetLocationResponseFromJSONTyped(json);
}
function GetLocationResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: LocationFromJSON(json['data'])
  };
}
function GetLocationResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: LocationToJSON(value.data)
  };
}

/* tslint:disable */
function GetLocationsResponseFromJSON(json) {
  return GetLocationsResponseFromJSONTyped(json);
}
function GetLocationsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(LocationFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetLocationsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(LocationToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

function LogOperationFromJSON(json) {
  return LogOperationFromJSONTyped(json);
}
function LogOperationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name']
  };
}
function LogOperationToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name
  };
}

function LogServiceFromJSON(json) {
  return LogServiceFromJSONTyped(json);
}
function LogServiceFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name']
  };
}
function LogServiceToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var LogUnifiedApi;
(function (LogUnifiedApi) {
  LogUnifiedApi["crm"] = "crm";
  LogUnifiedApi["lead"] = "lead";
  LogUnifiedApi["proxy"] = "proxy";
  LogUnifiedApi["vault"] = "vault";
  LogUnifiedApi["accounting"] = "accounting";
  LogUnifiedApi["hris"] = "hris";
  LogUnifiedApi["ats"] = "ats";
  LogUnifiedApi["ecommerce"] = "ecommerce";
  LogUnifiedApi["issue_tracking"] = "issue-tracking";
  LogUnifiedApi["pos"] = "pos";
  LogUnifiedApi["file_storage"] = "file-storage";
  LogUnifiedApi["sms"] = "sms";
})(LogUnifiedApi || (LogUnifiedApi = {}));
function LogFromJSON(json) {
  return LogFromJSONTyped(json);
}
function LogFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    api_style: json['api_style'],
    base_url: json['base_url'],
    child_request: json['child_request'],
    consumer_id: json['consumer_id'],
    duration: json['duration'],
    execution: json['execution'],
    has_children: json['has_children'],
    http_method: json['http_method'],
    id: json['id'],
    latency: json['latency'],
    operation: LogOperationFromJSON(json['operation']),
    parent_id: json['parent_id'],
    path: json['path'],
    sandbox: json['sandbox'],
    service: LogServiceFromJSON(json['service']),
    status_code: json['status_code'],
    success: json['success'],
    timestamp: json['timestamp'],
    unified_api: json['unified_api'],
    error_message: !exists(json, 'error_message') ? undefined : json['error_message'],
    source_ip: !exists(json, 'source_ip') ? undefined : json['source_ip']
  };
}
function LogToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    api_style: value.api_style,
    base_url: value.base_url,
    child_request: value.child_request,
    consumer_id: value.consumer_id,
    duration: value.duration,
    execution: value.execution,
    has_children: value.has_children,
    http_method: value.http_method,
    id: value.id,
    latency: value.latency,
    operation: LogOperationToJSON(value.operation),
    parent_id: value.parent_id,
    path: value.path,
    sandbox: value.sandbox,
    service: LogServiceToJSON(value.service),
    status_code: value.status_code,
    success: value.success,
    timestamp: value.timestamp,
    unified_api: value.unified_api,
    error_message: value.error_message,
    source_ip: value.source_ip
  };
}

/* tslint:disable */
function GetLogsResponseFromJSON(json) {
  return GetLogsResponseFromJSONTyped(json);
}
function GetLogsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: json['data'].map(LogFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetLogsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: value.data.map(LogToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ServiceChargeType;
(function (ServiceChargeType) {
  ServiceChargeType["auto_gratuity"] = "auto_gratuity";
  ServiceChargeType["custom"] = "custom";
})(ServiceChargeType || (ServiceChargeType = {}));
function ServiceChargeFromJSON(json) {
  return ServiceChargeFromJSONTyped(json);
}
function ServiceChargeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    amount: !exists(json, 'amount') ? undefined : json['amount'],
    percentage: !exists(json, 'percentage') ? undefined : json['percentage'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    active: !exists(json, 'active') ? undefined : json['active'],
    type: !exists(json, 'type') ? undefined : json['type']
  };
}
function ServiceChargeToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    amount: value.amount,
    percentage: value.percentage,
    currency: CurrencyToJSON(value.currency),
    active: value.active,
    type: value.type
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var MerchantStatus;
(function (MerchantStatus) {
  MerchantStatus["active"] = "active";
  MerchantStatus["inactive"] = "inactive";
  MerchantStatus["other"] = "other";
})(MerchantStatus || (MerchantStatus = {}));
function MerchantFromJSON(json) {
  return MerchantFromJSONTyped(json);
}
function MerchantFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    address: !exists(json, 'address') ? undefined : AddressFromJSON(json['address']),
    owner_id: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    main_location_id: !exists(json, 'main_location_id') ? undefined : json['main_location_id'],
    status: !exists(json, 'status') ? undefined : json['status'],
    service_charges: !exists(json, 'service_charges') ? undefined : json['service_charges'].map(ServiceChargeFromJSON),
    language: !exists(json, 'language') ? undefined : json['language'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function MerchantToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    address: AddressToJSON(value.address),
    owner_id: value.owner_id,
    main_location_id: value.main_location_id,
    status: value.status,
    service_charges: value.service_charges === undefined ? undefined : value.service_charges.map(ServiceChargeToJSON),
    language: value.language,
    currency: CurrencyToJSON(value.currency)
  };
}

/* tslint:disable */
function GetMerchantResponseFromJSON(json) {
  return GetMerchantResponseFromJSONTyped(json);
}
function GetMerchantResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: MerchantFromJSON(json['data'])
  };
}
function GetMerchantResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: MerchantToJSON(value.data)
  };
}

/* tslint:disable */
function GetMerchantsResponseFromJSON(json) {
  return GetMerchantsResponseFromJSONTyped(json);
}
function GetMerchantsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(MerchantFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetMerchantsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(MerchantToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function PriceFromJSON(json) {
  return PriceFromJSONTyped(json);
}
function PriceFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    per_unit: !exists(json, 'per_unit') ? undefined : json['per_unit'],
    total_amount: !exists(json, 'total_amount') ? undefined : json['total_amount'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency'])
  };
}
function PriceToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    currency: CurrencyToJSON(value.currency)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var MessageType;
(function (MessageType) {
  MessageType["sms"] = "sms";
  MessageType["mms"] = "mms";
})(MessageType || (MessageType = {}));
/**
 * @export
 * @enum {string}
 */
var MessageDirection;
(function (MessageDirection) {
  MessageDirection["inbound"] = "inbound";
  MessageDirection["outbound_api"] = "outbound-api";
  MessageDirection["outbound_call"] = "outbound-call";
  MessageDirection["outbound_reply"] = "outbound-reply";
  MessageDirection["unknown"] = "unknown";
})(MessageDirection || (MessageDirection = {}));
/**
 * @export
 * @enum {string}
 */
var MessageStatus;
(function (MessageStatus) {
  MessageStatus["accepted"] = "accepted";
  MessageStatus["scheduled"] = "scheduled";
  MessageStatus["canceled"] = "canceled";
  MessageStatus["queued"] = "queued";
  MessageStatus["sending"] = "sending";
  MessageStatus["sent"] = "sent";
  MessageStatus["failed"] = "failed";
  MessageStatus["delivered"] = "delivered";
  MessageStatus["undelivered"] = "undelivered";
  MessageStatus["receiving"] = "receiving";
  MessageStatus["received"] = "received";
  MessageStatus["read"] = "read";
})(MessageStatus || (MessageStatus = {}));
function MessageFromJSON(json) {
  return MessageFromJSONTyped(json);
}
function MessageFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    from: json['from'],
    to: json['to'],
    body: json['body'],
    id: !exists(json, 'id') ? undefined : json['id'],
    subject: !exists(json, 'subject') ? undefined : json['subject'],
    type: !exists(json, 'type') ? undefined : json['type'],
    number_of_units: !exists(json, 'number_of_units') ? undefined : json['number_of_units'],
    number_of_media_files: !exists(json, 'number_of_media_files') ? undefined : json['number_of_media_files'],
    direction: !exists(json, 'direction') ? undefined : json['direction'],
    status: !exists(json, 'status') ? undefined : json['status'],
    scheduled_at: !exists(json, 'scheduled_at') ? undefined : new Date(json['scheduled_at']),
    sent_at: !exists(json, 'sent_at') ? undefined : new Date(json['sent_at']),
    webhook_url: !exists(json, 'webhook_url') ? undefined : json['webhook_url'],
    reference: !exists(json, 'reference') ? undefined : json['reference'],
    price: !exists(json, 'price') ? undefined : PriceFromJSON(json['price']),
    error: !exists(json, 'error') ? undefined : json['error'],
    messaging_service_id: !exists(json, 'messaging_service_id') ? undefined : json['messaging_service_id'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function MessageToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    from: value.from,
    to: value.to,
    body: value.body,
    subject: value.subject,
    type: value.type,
    scheduled_at: value.scheduled_at === undefined ? undefined : new Date(value.scheduled_at).toISOString(),
    webhook_url: value.webhook_url,
    reference: value.reference,
    price: PriceToJSON(value.price),
    error: value.error,
    messaging_service_id: value.messaging_service_id
  };
}

/* tslint:disable */
function GetMessageResponseFromJSON(json) {
  return GetMessageResponseFromJSONTyped(json);
}
function GetMessageResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: MessageFromJSON(json['data'])
  };
}
function GetMessageResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: MessageToJSON(value.data)
  };
}

/* tslint:disable */
function GetMessagesResponseFromJSON(json) {
  return GetMessagesResponseFromJSONTyped(json);
}
function GetMessagesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(MessageFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetMessagesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(MessageToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var ModifierGroupSelectionType;
(function (ModifierGroupSelectionType) {
  ModifierGroupSelectionType["single"] = "single";
  ModifierGroupSelectionType["multiple"] = "multiple";
})(ModifierGroupSelectionType || (ModifierGroupSelectionType = {}));
function ModifierGroupFromJSON(json) {
  return ModifierGroupFromJSONTyped(json);
}
function ModifierGroupFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    alternate_name: !exists(json, 'alternate_name') ? undefined : json['alternate_name'],
    minimum_required: !exists(json, 'minimum_required') ? undefined : json['minimum_required'],
    maximum_allowed: !exists(json, 'maximum_allowed') ? undefined : json['maximum_allowed'],
    selection_type: !exists(json, 'selection_type') ? undefined : json['selection_type'],
    present_at_all_locations: !exists(json, 'present_at_all_locations') ? undefined : json['present_at_all_locations'],
    modifiers: !exists(json, 'modifiers') ? undefined : json['modifiers'],
    deleted: !exists(json, 'deleted') ? undefined : json['deleted'],
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function ModifierGroupToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    alternate_name: value.alternate_name,
    minimum_required: value.minimum_required,
    maximum_allowed: value.maximum_allowed,
    selection_type: value.selection_type,
    present_at_all_locations: value.present_at_all_locations,
    modifiers: value.modifiers,
    deleted: value.deleted,
    row_version: value.row_version
  };
}

/* tslint:disable */
function GetModifierGroupResponseFromJSON(json) {
  return GetModifierGroupResponseFromJSONTyped(json);
}
function GetModifierGroupResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: ModifierGroupFromJSON(json['data'])
  };
}
function GetModifierGroupResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: ModifierGroupToJSON(value.data)
  };
}

/* tslint:disable */
function GetModifierGroupsResponseFromJSON(json) {
  return GetModifierGroupsResponseFromJSONTyped(json);
}
function GetModifierGroupsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(ModifierGroupFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetModifierGroupsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(ModifierGroupToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function ModifierFromJSON(json) {
  return ModifierFromJSONTyped(json);
}
function ModifierFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    modifier_group_id: json['modifier_group_id'],
    id: !exists(json, 'id') ? undefined : json['id'],
    idempotency_key: !exists(json, 'idempotency_key') ? undefined : json['idempotency_key'],
    alternate_name: !exists(json, 'alternate_name') ? undefined : json['alternate_name'],
    price_amount: !exists(json, 'price_amount') ? undefined : json['price_amount'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    available: !exists(json, 'available') ? undefined : json['available'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function ModifierToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    modifier_group_id: value.modifier_group_id,
    idempotency_key: value.idempotency_key,
    alternate_name: value.alternate_name,
    price_amount: value.price_amount,
    currency: CurrencyToJSON(value.currency),
    available: value.available
  };
}

/* tslint:disable */
function GetModifierResponseFromJSON(json) {
  return GetModifierResponseFromJSONTyped(json);
}
function GetModifierResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: ModifierFromJSON(json['data'])
  };
}
function GetModifierResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: ModifierToJSON(value.data)
  };
}

/* tslint:disable */
function GetModifiersResponseFromJSON(json) {
  return GetModifiersResponseFromJSONTyped(json);
}
function GetModifiersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(ModifierFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetModifiersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(ModifierToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function NoteFromJSON(json) {
  return NoteFromJSONTyped(json);
}
function NoteFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    title: !exists(json, 'title') ? undefined : json['title'],
    content: !exists(json, 'content') ? undefined : json['content'],
    owner_id: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    contact_id: !exists(json, 'contact_id') ? undefined : json['contact_id'],
    company_id: !exists(json, 'company_id') ? undefined : json['company_id'],
    opportunity_id: !exists(json, 'opportunity_id') ? undefined : json['opportunity_id'],
    lead_id: !exists(json, 'lead_id') ? undefined : json['lead_id'],
    active: !exists(json, 'active') ? undefined : json['active'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at']
  };
}
function NoteToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    title: value.title,
    content: value.content,
    owner_id: value.owner_id,
    contact_id: value.contact_id,
    company_id: value.company_id,
    opportunity_id: value.opportunity_id,
    lead_id: value.lead_id,
    active: value.active
  };
}

/* tslint:disable */
function GetNoteResponseFromJSON(json) {
  return GetNoteResponseFromJSONTyped(json);
}
function GetNoteResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: NoteFromJSON(json['data'])
  };
}
function GetNoteResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: NoteToJSON(value.data)
  };
}

/* tslint:disable */
function GetNotesResponseFromJSON(json) {
  return GetNotesResponseFromJSONTyped(json);
}
function GetNotesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(NoteFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetNotesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(NoteToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function OpportunityFromJSON(json) {
  return OpportunityFromJSONTyped(json);
}
function OpportunityFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    title: json['title'],
    primary_contact_id: json['primary_contact_id'],
    id: !exists(json, 'id') ? undefined : json['id'],
    description: !exists(json, 'description') ? undefined : json['description'],
    type: !exists(json, 'type') ? undefined : json['type'],
    monetary_amount: !exists(json, 'monetary_amount') ? undefined : json['monetary_amount'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    win_probability: !exists(json, 'win_probability') ? undefined : json['win_probability'],
    expected_revenue: !exists(json, 'expected_revenue') ? undefined : json['expected_revenue'],
    close_date: !exists(json, 'close_date') ? undefined : json['close_date'] === null ? null : new Date(json['close_date']),
    loss_reason_id: !exists(json, 'loss_reason_id') ? undefined : json['loss_reason_id'],
    loss_reason: !exists(json, 'loss_reason') ? undefined : json['loss_reason'],
    won_reason_id: !exists(json, 'won_reason_id') ? undefined : json['won_reason_id'],
    won_reason: !exists(json, 'won_reason') ? undefined : json['won_reason'],
    pipeline_id: !exists(json, 'pipeline_id') ? undefined : json['pipeline_id'],
    pipeline_stage_id: !exists(json, 'pipeline_stage_id') ? undefined : json['pipeline_stage_id'],
    source_id: !exists(json, 'source_id') ? undefined : json['source_id'],
    lead_id: !exists(json, 'lead_id') ? undefined : json['lead_id'],
    lead_source: !exists(json, 'lead_source') ? undefined : json['lead_source'],
    contact_id: !exists(json, 'contact_id') ? undefined : json['contact_id'],
    contact_ids: !exists(json, 'contact_ids') ? undefined : json['contact_ids'],
    company_id: !exists(json, 'company_id') ? undefined : json['company_id'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    owner_id: !exists(json, 'owner_id') ? undefined : json['owner_id'],
    priority: !exists(json, 'priority') ? undefined : json['priority'],
    status: !exists(json, 'status') ? undefined : json['status'],
    status_id: !exists(json, 'status_id') ? undefined : json['status_id'],
    tags: !exists(json, 'tags') ? undefined : TagsFromJSON(json['tags']),
    interaction_count: !exists(json, 'interaction_count') ? undefined : json['interaction_count'],
    custom_fields: !exists(json, 'custom_fields') ? undefined : json['custom_fields'].map(CustomFieldFromJSON),
    stage_last_changed_at: !exists(json, 'stage_last_changed_at') ? undefined : json['stage_last_changed_at'] === null ? null : new Date(json['stage_last_changed_at']),
    last_activity_at: !exists(json, 'last_activity_at') ? undefined : json['last_activity_at'],
    deleted: !exists(json, 'deleted') ? undefined : json['deleted'],
    date_stage_changed: !exists(json, 'date_stage_changed') ? undefined : json['date_stage_changed'] === null ? null : new Date(json['date_stage_changed']),
    date_last_contacted: !exists(json, 'date_last_contacted') ? undefined : json['date_last_contacted'] === null ? null : new Date(json['date_last_contacted']),
    date_lead_created: !exists(json, 'date_lead_created') ? undefined : json['date_lead_created'] === null ? null : new Date(json['date_lead_created']),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function OpportunityToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    title: value.title,
    primary_contact_id: value.primary_contact_id,
    description: value.description,
    type: value.type,
    monetary_amount: value.monetary_amount,
    currency: CurrencyToJSON(value.currency),
    win_probability: value.win_probability,
    close_date: value.close_date === undefined ? undefined : value.close_date === null ? null : new Date(value.close_date).toISOString().substr(0, 10),
    loss_reason_id: value.loss_reason_id,
    loss_reason: value.loss_reason,
    won_reason_id: value.won_reason_id,
    won_reason: value.won_reason,
    pipeline_id: value.pipeline_id,
    pipeline_stage_id: value.pipeline_stage_id,
    source_id: value.source_id,
    lead_id: value.lead_id,
    lead_source: value.lead_source,
    contact_id: value.contact_id,
    contact_ids: value.contact_ids,
    company_id: value.company_id,
    company_name: value.company_name,
    owner_id: value.owner_id,
    priority: value.priority,
    status: value.status,
    status_id: value.status_id,
    tags: TagsToJSON(value.tags),
    custom_fields: value.custom_fields === undefined ? undefined : value.custom_fields.map(CustomFieldToJSON),
    stage_last_changed_at: value.stage_last_changed_at === undefined ? undefined : value.stage_last_changed_at === null ? null : new Date(value.stage_last_changed_at).toISOString()
  };
}

/* tslint:disable */
function GetOpportunitiesResponseFromJSON(json) {
  return GetOpportunitiesResponseFromJSONTyped(json);
}
function GetOpportunitiesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(OpportunityFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetOpportunitiesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(OpportunityToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetOpportunityResponseFromJSON(json) {
  return GetOpportunityResponseFromJSONTyped(json);
}
function GetOpportunityResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: OpportunityFromJSON(json['data'])
  };
}
function GetOpportunityResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: OpportunityToJSON(value.data)
  };
}

/* tslint:disable */
function OrderCustomersFromJSON(json) {
  return OrderCustomersFromJSONTyped(json);
}
function OrderCustomersFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    middle_name: !exists(json, 'middle_name') ? undefined : json['middle_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON)
  };
}
function OrderCustomersToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    first_name: value.first_name,
    middle_name: value.middle_name,
    last_name: value.last_name,
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var OrderDiscountsType;
(function (OrderDiscountsType) {
  OrderDiscountsType["percentage"] = "percentage";
  OrderDiscountsType["flat_fee"] = "flat_fee";
})(OrderDiscountsType || (OrderDiscountsType = {}));
/**
 * @export
 * @enum {string}
 */
var OrderDiscountsScope;
(function (OrderDiscountsScope) {
  OrderDiscountsScope["order"] = "order";
  OrderDiscountsScope["line_item"] = "line_item";
})(OrderDiscountsScope || (OrderDiscountsScope = {}));
function OrderDiscountsFromJSON(json) {
  return OrderDiscountsFromJSONTyped(json);
}
function OrderDiscountsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: json['type'],
    id: !exists(json, 'id') ? undefined : json['id'],
    product_id: !exists(json, 'product_id') ? undefined : json['product_id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    amount: !exists(json, 'amount') ? undefined : json['amount'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    scope: !exists(json, 'scope') ? undefined : json['scope']
  };
}
function OrderDiscountsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    name: value.name,
    amount: value.amount,
    currency: CurrencyToJSON(value.currency),
    scope: value.scope
  };
}

/* tslint:disable */
function OrderPickupDetailsCurbsidePickupDetailsFromJSON(json) {
  return OrderPickupDetailsCurbsidePickupDetailsFromJSONTyped(json);
}
function OrderPickupDetailsCurbsidePickupDetailsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    curbside_details: !exists(json, 'curbside_details') ? undefined : json['curbside_details'],
    buyer_arrived_at: !exists(json, 'buyer_arrived_at') ? undefined : new Date(json['buyer_arrived_at'])
  };
}
function OrderPickupDetailsCurbsidePickupDetailsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    curbside_details: value.curbside_details,
    buyer_arrived_at: value.buyer_arrived_at === undefined ? undefined : new Date(value.buyer_arrived_at).toISOString()
  };
}

/* tslint:disable */
function OrderPickupDetailsRecipientFromJSON(json) {
  return OrderPickupDetailsRecipientFromJSONTyped(json);
}
function OrderPickupDetailsRecipientFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    customer_id: !exists(json, 'customer_id') ? undefined : json['customer_id'],
    display_name: !exists(json, 'display_name') ? undefined : json['display_name'],
    address: !exists(json, 'address') ? undefined : AddressFromJSON(json['address']),
    phone_number: !exists(json, 'phone_number') ? undefined : PhoneNumberFromJSON(json['phone_number']),
    email: !exists(json, 'email') ? undefined : EmailFromJSON(json['email'])
  };
}
function OrderPickupDetailsRecipientToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    customer_id: value.customer_id,
    display_name: value.display_name,
    address: AddressToJSON(value.address),
    phone_number: PhoneNumberToJSON(value.phone_number),
    email: EmailToJSON(value.email)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var OrderPickupDetailsScheduleType;
(function (OrderPickupDetailsScheduleType) {
  OrderPickupDetailsScheduleType["scheduled"] = "scheduled";
})(OrderPickupDetailsScheduleType || (OrderPickupDetailsScheduleType = {}));
function OrderPickupDetailsFromJSON(json) {
  return OrderPickupDetailsFromJSONTyped(json);
}
function OrderPickupDetailsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    accepted_at: !exists(json, 'accepted_at') ? undefined : json['accepted_at'] === null ? null : new Date(json['accepted_at']),
    auto_complete_duration: !exists(json, 'auto_complete_duration') ? undefined : json['auto_complete_duration'],
    cancel_reason: !exists(json, 'cancel_reason') ? undefined : json['cancel_reason'],
    expires_at: !exists(json, 'expires_at') ? undefined : new Date(json['expires_at']),
    schedule_type: !exists(json, 'schedule_type') ? undefined : json['schedule_type'],
    pickup_at: !exists(json, 'pickup_at') ? undefined : new Date(json['pickup_at']),
    pickup_window_duration: !exists(json, 'pickup_window_duration') ? undefined : json['pickup_window_duration'],
    prep_time_duration: !exists(json, 'prep_time_duration') ? undefined : json['prep_time_duration'],
    note: !exists(json, 'note') ? undefined : json['note'],
    placed_at: !exists(json, 'placed_at') ? undefined : new Date(json['placed_at']),
    rejected_at: !exists(json, 'rejected_at') ? undefined : new Date(json['rejected_at']),
    ready_at: !exists(json, 'ready_at') ? undefined : new Date(json['ready_at']),
    expired_at: !exists(json, 'expired_at') ? undefined : new Date(json['expired_at']),
    picked_up_at: !exists(json, 'picked_up_at') ? undefined : new Date(json['picked_up_at']),
    canceled_at: !exists(json, 'canceled_at') ? undefined : new Date(json['canceled_at']),
    is_curbside_pickup: !exists(json, 'is_curbside_pickup') ? undefined : json['is_curbside_pickup'],
    curbside_pickup_details: !exists(json, 'curbside_pickup_details') ? undefined : OrderPickupDetailsCurbsidePickupDetailsFromJSON(json['curbside_pickup_details']),
    recipient: !exists(json, 'recipient') ? undefined : OrderPickupDetailsRecipientFromJSON(json['recipient'])
  };
}
function OrderPickupDetailsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    auto_complete_duration: value.auto_complete_duration,
    cancel_reason: value.cancel_reason,
    expires_at: value.expires_at === undefined ? undefined : new Date(value.expires_at).toISOString(),
    schedule_type: value.schedule_type,
    pickup_at: value.pickup_at === undefined ? undefined : new Date(value.pickup_at).toISOString(),
    pickup_window_duration: value.pickup_window_duration,
    prep_time_duration: value.prep_time_duration,
    note: value.note,
    placed_at: value.placed_at === undefined ? undefined : new Date(value.placed_at).toISOString(),
    rejected_at: value.rejected_at === undefined ? undefined : new Date(value.rejected_at).toISOString(),
    ready_at: value.ready_at === undefined ? undefined : new Date(value.ready_at).toISOString(),
    expired_at: value.expired_at === undefined ? undefined : new Date(value.expired_at).toISOString(),
    picked_up_at: value.picked_up_at === undefined ? undefined : new Date(value.picked_up_at).toISOString(),
    canceled_at: value.canceled_at === undefined ? undefined : new Date(value.canceled_at).toISOString(),
    is_curbside_pickup: value.is_curbside_pickup,
    curbside_pickup_details: OrderPickupDetailsCurbsidePickupDetailsToJSON(value.curbside_pickup_details),
    recipient: OrderPickupDetailsRecipientToJSON(value.recipient)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var OrderFulfillmentsStatus;
(function (OrderFulfillmentsStatus) {
  OrderFulfillmentsStatus["proposed"] = "proposed";
  OrderFulfillmentsStatus["reserved"] = "reserved";
  OrderFulfillmentsStatus["prepared"] = "prepared";
  OrderFulfillmentsStatus["completed"] = "completed";
  OrderFulfillmentsStatus["cancelled"] = "cancelled";
  OrderFulfillmentsStatus["failed"] = "failed";
  OrderFulfillmentsStatus["other"] = "other";
})(OrderFulfillmentsStatus || (OrderFulfillmentsStatus = {}));
/**
 * @export
 * @enum {string}
 */
var OrderFulfillmentsType;
(function (OrderFulfillmentsType) {
  OrderFulfillmentsType["pickup"] = "pickup";
  OrderFulfillmentsType["shipment"] = "shipment";
})(OrderFulfillmentsType || (OrderFulfillmentsType = {}));
function OrderFulfillmentsFromJSON(json) {
  return OrderFulfillmentsFromJSONTyped(json);
}
function OrderFulfillmentsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    status: !exists(json, 'status') ? undefined : json['status'],
    type: !exists(json, 'type') ? undefined : json['type'],
    pickup_details: !exists(json, 'pickup_details') ? undefined : OrderPickupDetailsFromJSON(json['pickup_details']),
    shipment_details: !exists(json, 'shipment_details') ? undefined : json['shipment_details']
  };
}
function OrderFulfillmentsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    status: value.status,
    type: value.type,
    pickup_details: OrderPickupDetailsToJSON(value.pickup_details),
    shipment_details: value.shipment_details
  };
}

/* tslint:disable */
function OrderLineItemsFromJSON(json) {
  return OrderLineItemsFromJSONTyped(json);
}
function OrderLineItemsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    item: !exists(json, 'item') ? undefined : json['item'],
    total_tax: !exists(json, 'total_tax') ? undefined : json['total_tax'],
    total_discount: !exists(json, 'total_discount') ? undefined : json['total_discount'],
    total_amount: !exists(json, 'total_amount') ? undefined : json['total_amount'],
    quantity: !exists(json, 'quantity') ? undefined : json['quantity'],
    unit_price: !exists(json, 'unit_price') ? undefined : json['unit_price'],
    applied_taxes: !exists(json, 'applied_taxes') ? undefined : json['applied_taxes'],
    applied_discounts: !exists(json, 'applied_discounts') ? undefined : json['applied_discounts'],
    modifiers: !exists(json, 'modifiers') ? undefined : json['modifiers']
  };
}
function OrderLineItemsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    item: value.item,
    total_tax: value.total_tax,
    total_discount: value.total_discount,
    total_amount: value.total_amount,
    quantity: value.quantity,
    unit_price: value.unit_price,
    applied_taxes: value.applied_taxes,
    applied_discounts: value.applied_discounts,
    modifiers: value.modifiers
  };
}

/* tslint:disable */
function OrderPaymentsFromJSON(json) {
  return OrderPaymentsFromJSONTyped(json);
}
function OrderPaymentsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    amount: !exists(json, 'amount') ? undefined : json['amount'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency'])
  };
}
function OrderPaymentsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    amount: value.amount,
    currency: CurrencyToJSON(value.currency)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var OrderRefundsStatus;
(function (OrderRefundsStatus) {
  OrderRefundsStatus["pending"] = "pending";
  OrderRefundsStatus["approved"] = "approved";
  OrderRefundsStatus["rejected"] = "rejected";
  OrderRefundsStatus["failed"] = "failed";
})(OrderRefundsStatus || (OrderRefundsStatus = {}));
function OrderRefundsFromJSON(json) {
  return OrderRefundsFromJSONTyped(json);
}
function OrderRefundsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    location_id: !exists(json, 'location_id') ? undefined : json['location_id'],
    amount: !exists(json, 'amount') ? undefined : json['amount'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    reason: !exists(json, 'reason') ? undefined : json['reason'],
    status: !exists(json, 'status') ? undefined : json['status'],
    tender_id: !exists(json, 'tender_id') ? undefined : json['tender_id'],
    transaction_id: !exists(json, 'transaction_id') ? undefined : json['transaction_id']
  };
}
function OrderRefundsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    amount: value.amount,
    currency: CurrencyToJSON(value.currency),
    reason: value.reason,
    status: value.status
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var PaymentCardCardBrand;
(function (PaymentCardCardBrand) {
  PaymentCardCardBrand["visa"] = "visa";
  PaymentCardCardBrand["mastercard"] = "mastercard";
  PaymentCardCardBrand["amex"] = "amex";
  PaymentCardCardBrand["discover"] = "discover";
  PaymentCardCardBrand["discover_diners"] = "discover-diners";
  PaymentCardCardBrand["jcb"] = "jcb";
  PaymentCardCardBrand["china_unionpay"] = "china-unionpay";
  PaymentCardCardBrand["square_gift_card"] = "square-gift-card";
  PaymentCardCardBrand["square_capital_card"] = "square-capital-card";
  PaymentCardCardBrand["interac"] = "interac";
  PaymentCardCardBrand["eftpos"] = "eftpos";
  PaymentCardCardBrand["felica"] = "felica";
  PaymentCardCardBrand["ebt"] = "ebt";
  PaymentCardCardBrand["other"] = "other";
})(PaymentCardCardBrand || (PaymentCardCardBrand = {}));
/**
 * @export
 * @enum {string}
 */
var PaymentCardCardType;
(function (PaymentCardCardType) {
  PaymentCardCardType["credit"] = "credit";
  PaymentCardCardType["debit"] = "debit";
  PaymentCardCardType["prepaid"] = "prepaid";
  PaymentCardCardType["other"] = "other";
})(PaymentCardCardType || (PaymentCardCardType = {}));
/**
 * @export
 * @enum {string}
 */
var PaymentCardPrepaidType;
(function (PaymentCardPrepaidType) {
  PaymentCardPrepaidType["non_prepaid"] = "non-prepaid";
  PaymentCardPrepaidType["prepaid"] = "prepaid";
  PaymentCardPrepaidType["unknown"] = "unknown";
})(PaymentCardPrepaidType || (PaymentCardPrepaidType = {}));
function PaymentCardFromJSON(json) {
  return PaymentCardFromJSONTyped(json);
}
function PaymentCardFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    bin: !exists(json, 'bin') ? undefined : json['bin'],
    card_brand: !exists(json, 'card_brand') ? undefined : json['card_brand'],
    card_type: !exists(json, 'card_type') ? undefined : json['card_type'],
    prepaid_type: !exists(json, 'prepaid_type') ? undefined : json['prepaid_type'],
    cardholder_name: !exists(json, 'cardholder_name') ? undefined : json['cardholder_name'],
    customer_id: !exists(json, 'customer_id') ? undefined : json['customer_id'],
    merchant_id: !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
    exp_month: !exists(json, 'exp_month') ? undefined : json['exp_month'],
    exp_year: !exists(json, 'exp_year') ? undefined : json['exp_year'],
    fingerprint: !exists(json, 'fingerprint') ? undefined : json['fingerprint'],
    last_4: !exists(json, 'last_4') ? undefined : json['last_4'],
    enabled: !exists(json, 'enabled') ? undefined : json['enabled'],
    billing_address: !exists(json, 'billing_address') ? undefined : AddressFromJSON(json['billing_address']),
    reference_id: !exists(json, 'reference_id') ? undefined : json['reference_id'],
    version: !exists(json, 'version') ? undefined : json['version']
  };
}
function PaymentCardToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    bin: value.bin,
    card_brand: value.card_brand,
    card_type: value.card_type,
    prepaid_type: value.prepaid_type,
    cardholder_name: value.cardholder_name,
    customer_id: value.customer_id,
    merchant_id: value.merchant_id,
    exp_month: value.exp_month,
    exp_year: value.exp_year,
    fingerprint: value.fingerprint,
    last_4: value.last_4,
    enabled: value.enabled,
    billing_address: AddressToJSON(value.billing_address),
    reference_id: value.reference_id,
    version: value.version
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var OrderTendersType;
(function (OrderTendersType) {
  OrderTendersType["cash"] = "cash";
  OrderTendersType["card"] = "card";
  OrderTendersType["other"] = "other";
})(OrderTendersType || (OrderTendersType = {}));
/**
 * @export
 * @enum {string}
 */
var OrderTendersCardStatus;
(function (OrderTendersCardStatus) {
  OrderTendersCardStatus["authorized"] = "authorized";
  OrderTendersCardStatus["captured"] = "captured";
  OrderTendersCardStatus["failed"] = "failed";
  OrderTendersCardStatus["voided"] = "voided";
})(OrderTendersCardStatus || (OrderTendersCardStatus = {}));
/**
 * @export
 * @enum {string}
 */
var OrderTendersCardEntryMethod;
(function (OrderTendersCardEntryMethod) {
  OrderTendersCardEntryMethod["evm"] = "evm";
  OrderTendersCardEntryMethod["swiped"] = "swiped";
  OrderTendersCardEntryMethod["keyed"] = "keyed";
  OrderTendersCardEntryMethod["on_file"] = "on-file";
  OrderTendersCardEntryMethod["contactless"] = "contactless";
})(OrderTendersCardEntryMethod || (OrderTendersCardEntryMethod = {}));
function OrderTendersFromJSON(json) {
  return OrderTendersFromJSONTyped(json);
}
function OrderTendersFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    type: !exists(json, 'type') ? undefined : json['type'],
    note: !exists(json, 'note') ? undefined : json['note'],
    amount: !exists(json, 'amount') ? undefined : json['amount'],
    percentage: !exists(json, 'percentage') ? undefined : json['percentage'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    total_amount: !exists(json, 'total_amount') ? undefined : json['total_amount'],
    total_tip: !exists(json, 'total_tip') ? undefined : json['total_tip'],
    total_processing_fee: !exists(json, 'total_processing_fee') ? undefined : json['total_processing_fee'],
    total_tax: !exists(json, 'total_tax') ? undefined : json['total_tax'],
    total_discount: !exists(json, 'total_discount') ? undefined : json['total_discount'],
    total_refund: !exists(json, 'total_refund') ? undefined : json['total_refund'],
    total_service_charge: !exists(json, 'total_service_charge') ? undefined : json['total_service_charge'],
    buyer_tendered_cash_amount: !exists(json, 'buyer_tendered_cash_amount') ? undefined : json['buyer_tendered_cash_amount'],
    change_back_cash_amount: !exists(json, 'change_back_cash_amount') ? undefined : json['change_back_cash_amount'],
    card: !exists(json, 'card') ? undefined : PaymentCardFromJSON(json['card']),
    card_status: !exists(json, 'card_status') ? undefined : json['card_status'],
    card_entry_method: !exists(json, 'card_entry_method') ? undefined : json['card_entry_method'],
    payment_id: !exists(json, 'payment_id') ? undefined : json['payment_id'],
    location_id: !exists(json, 'location_id') ? undefined : json['location_id'],
    transaction_id: !exists(json, 'transaction_id') ? undefined : json['transaction_id']
  };
}
function OrderTendersToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    type: value.type,
    note: value.note,
    amount: value.amount,
    percentage: value.percentage,
    currency: CurrencyToJSON(value.currency),
    total_amount: value.total_amount,
    total_tip: value.total_tip,
    total_processing_fee: value.total_processing_fee,
    total_tax: value.total_tax,
    total_discount: value.total_discount,
    total_refund: value.total_refund,
    total_service_charge: value.total_service_charge,
    buyer_tendered_cash_amount: value.buyer_tendered_cash_amount,
    change_back_cash_amount: value.change_back_cash_amount,
    card: PaymentCardToJSON(value.card),
    card_status: value.card_status,
    card_entry_method: value.card_entry_method
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ServiceChargesFromJSON(json) {
  return ServiceChargesFromJSONTyped(json);
}
function ServiceChargesFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ServiceChargesToJSON(value) {
  return value;
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var OrderStatus;
(function (OrderStatus) {
  OrderStatus["open"] = "open";
  OrderStatus["draft"] = "draft";
  OrderStatus["delivered"] = "delivered";
  OrderStatus["delayed"] = "delayed";
  OrderStatus["voided"] = "voided";
  OrderStatus["completed"] = "completed";
  OrderStatus["hidden"] = "hidden";
})(OrderStatus || (OrderStatus = {}));
/**
 * @export
 * @enum {string}
 */
var OrderPaymentStatus;
(function (OrderPaymentStatus) {
  OrderPaymentStatus["open"] = "open";
  OrderPaymentStatus["paid"] = "paid";
  OrderPaymentStatus["refunded"] = "refunded";
  OrderPaymentStatus["credited"] = "credited";
  OrderPaymentStatus["partially_paid"] = "partially_paid";
  OrderPaymentStatus["partially_refunded"] = "partially_refunded";
  OrderPaymentStatus["unknown"] = "unknown";
})(OrderPaymentStatus || (OrderPaymentStatus = {}));
/**
 * @export
 * @enum {string}
 */
var OrderSource;
(function (OrderSource) {
  OrderSource["in_store"] = "in-store";
  OrderSource["online"] = "online";
  OrderSource["opt"] = "opt";
  OrderSource["api"] = "api";
  OrderSource["kiosk"] = "kiosk";
  OrderSource["caller_id"] = "caller-id";
  OrderSource["google"] = "google";
  OrderSource["invoice"] = "invoice";
})(OrderSource || (OrderSource = {}));
function OrderFromJSON(json) {
  return OrderFromJSONTyped(json);
}
function OrderFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    merchant_id: json['merchant_id'],
    location_id: json['location_id'],
    id: !exists(json, 'id') ? undefined : json['id'],
    idempotency_key: !exists(json, 'idempotency_key') ? undefined : json['idempotency_key'],
    order_number: !exists(json, 'order_number') ? undefined : json['order_number'],
    order_date: !exists(json, 'order_date') ? undefined : json['order_date'] === null ? null : new Date(json['order_date']),
    closed_date: !exists(json, 'closed_date') ? undefined : json['closed_date'] === null ? null : new Date(json['closed_date']),
    reference_id: !exists(json, 'reference_id') ? undefined : json['reference_id'],
    status: !exists(json, 'status') ? undefined : json['status'],
    payment_status: !exists(json, 'payment_status') ? undefined : json['payment_status'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    title: !exists(json, 'title') ? undefined : json['title'],
    note: !exists(json, 'note') ? undefined : json['note'],
    customer_id: !exists(json, 'customer_id') ? undefined : json['customer_id'],
    employee_id: !exists(json, 'employee_id') ? undefined : json['employee_id'],
    order_type_id: !exists(json, 'order_type_id') ? undefined : json['order_type_id'],
    table: !exists(json, 'table') ? undefined : json['table'],
    seat: !exists(json, 'seat') ? undefined : json['seat'],
    total_amount: !exists(json, 'total_amount') ? undefined : json['total_amount'],
    total_tip: !exists(json, 'total_tip') ? undefined : json['total_tip'],
    total_tax: !exists(json, 'total_tax') ? undefined : json['total_tax'],
    total_discount: !exists(json, 'total_discount') ? undefined : json['total_discount'],
    total_refund: !exists(json, 'total_refund') ? undefined : json['total_refund'],
    total_service_charge: !exists(json, 'total_service_charge') ? undefined : json['total_service_charge'],
    refunded: !exists(json, 'refunded') ? undefined : json['refunded'],
    customers: !exists(json, 'customers') ? undefined : json['customers'].map(OrderCustomersFromJSON),
    fulfillments: !exists(json, 'fulfillments') ? undefined : json['fulfillments'].map(OrderFulfillmentsFromJSON),
    line_items: !exists(json, 'line_items') ? undefined : json['line_items'].map(OrderLineItemsFromJSON),
    payments: !exists(json, 'payments') ? undefined : json['payments'].map(OrderPaymentsFromJSON),
    service_charges: !exists(json, 'service_charges') ? undefined : ServiceChargesFromJSON(json['service_charges']),
    refunds: !exists(json, 'refunds') ? undefined : json['refunds'].map(OrderRefundsFromJSON),
    taxes: !exists(json, 'taxes') ? undefined : json['taxes'],
    discounts: !exists(json, 'discounts') ? undefined : json['discounts'].map(OrderDiscountsFromJSON),
    tenders: !exists(json, 'tenders') ? undefined : json['tenders'].map(OrderTendersFromJSON),
    source: !exists(json, 'source') ? undefined : json['source'],
    voided: !exists(json, 'voided') ? undefined : json['voided'],
    voided_at: !exists(json, 'voided_at') ? undefined : new Date(json['voided_at']),
    version: !exists(json, 'version') ? undefined : json['version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function OrderToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    merchant_id: value.merchant_id,
    location_id: value.location_id,
    idempotency_key: value.idempotency_key,
    order_number: value.order_number,
    order_date: value.order_date === undefined ? undefined : value.order_date === null ? null : new Date(value.order_date).toISOString().substr(0, 10),
    closed_date: value.closed_date === undefined ? undefined : value.closed_date === null ? null : new Date(value.closed_date).toISOString().substr(0, 10),
    reference_id: value.reference_id,
    status: value.status,
    payment_status: value.payment_status,
    currency: CurrencyToJSON(value.currency),
    title: value.title,
    note: value.note,
    customer_id: value.customer_id,
    employee_id: value.employee_id,
    order_type_id: value.order_type_id,
    table: value.table,
    seat: value.seat,
    total_amount: value.total_amount,
    total_tip: value.total_tip,
    total_tax: value.total_tax,
    total_discount: value.total_discount,
    total_refund: value.total_refund,
    total_service_charge: value.total_service_charge,
    refunded: value.refunded,
    customers: value.customers === undefined ? undefined : value.customers.map(OrderCustomersToJSON),
    fulfillments: value.fulfillments === undefined ? undefined : value.fulfillments.map(OrderFulfillmentsToJSON),
    line_items: value.line_items === undefined ? undefined : value.line_items.map(OrderLineItemsToJSON),
    payments: value.payments === undefined ? undefined : value.payments.map(OrderPaymentsToJSON),
    service_charges: ServiceChargesToJSON(value.service_charges),
    refunds: value.refunds === undefined ? undefined : value.refunds.map(OrderRefundsToJSON),
    taxes: value.taxes,
    discounts: value.discounts === undefined ? undefined : value.discounts.map(OrderDiscountsToJSON),
    tenders: value.tenders === undefined ? undefined : value.tenders.map(OrderTendersToJSON),
    voided: value.voided,
    version: value.version
  };
}

/* tslint:disable */
function GetOrderResponseFromJSON(json) {
  return GetOrderResponseFromJSONTyped(json);
}
function GetOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: OrderFromJSON(json['data'])
  };
}
function GetOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: OrderToJSON(value.data)
  };
}

/* tslint:disable */
function GetOrdersResponseFromJSON(json) {
  return GetOrdersResponseFromJSONTyped(json);
}
function GetOrdersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(OrderFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetOrdersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(OrderToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function OrderTypeFromJSON(json) {
  return OrderTypeFromJSONTyped(json);
}
function OrderTypeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    _default: !exists(json, 'default') ? undefined : json['default'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function OrderTypeToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    default: value._default
  };
}

/* tslint:disable */
function GetOrderTypeResponseFromJSON(json) {
  return GetOrderTypeResponseFromJSONTyped(json);
}
function GetOrderTypeResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: OrderTypeFromJSON(json['data'])
  };
}
function GetOrderTypeResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: OrderTypeToJSON(value.data)
  };
}

/* tslint:disable */
function GetOrderTypesResponseFromJSON(json) {
  return GetOrderTypesResponseFromJSONTyped(json);
}
function GetOrderTypesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(OrderTypeFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetOrderTypesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(OrderTypeToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var PaymentAllocationsType;
(function (PaymentAllocationsType) {
  PaymentAllocationsType["invoice"] = "invoice";
  PaymentAllocationsType["order"] = "order";
  PaymentAllocationsType["expense"] = "expense";
  PaymentAllocationsType["credit_memo"] = "credit_memo";
  PaymentAllocationsType["over_payment"] = "over_payment";
  PaymentAllocationsType["pre_payment"] = "pre_payment";
})(PaymentAllocationsType || (PaymentAllocationsType = {}));
function PaymentAllocationsFromJSON(json) {
  return PaymentAllocationsFromJSONTyped(json);
}
function PaymentAllocationsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    type: !exists(json, 'type') ? undefined : json['type'],
    code: !exists(json, 'code') ? undefined : json['code'],
    amount: !exists(json, 'amount') ? undefined : json['amount']
  };
}
function PaymentAllocationsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    type: value.type,
    amount: value.amount
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var PaymentStatus;
(function (PaymentStatus) {
  PaymentStatus["authorised"] = "authorised";
  PaymentStatus["paid"] = "paid";
  PaymentStatus["voided"] = "voided";
  PaymentStatus["deleted"] = "deleted";
})(PaymentStatus || (PaymentStatus = {}));
/**
 * @export
 * @enum {string}
 */
var PaymentType;
(function (PaymentType) {
  PaymentType["receivable"] = "accounts_receivable";
  PaymentType["payable"] = "accounts_payable";
  PaymentType["receivable_credit"] = "accounts_receivable_credit";
  PaymentType["payable_credit"] = "accounts_payable_credit";
  PaymentType["receivable_overpayment"] = "accounts_receivable_overpayment";
  PaymentType["payable_overpayment"] = "accounts_payable_overpayment";
  PaymentType["receivable_prepayment"] = "accounts_receivable_prepayment";
  PaymentType["payable_prepayment"] = "accounts_payable_prepayment";
})(PaymentType || (PaymentType = {}));
function PaymentFromJSON(json) {
  return PaymentFromJSONTyped(json);
}
function PaymentFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    total_amount: json['total_amount'],
    transaction_date: new Date(json['transaction_date']),
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    currency_rate: !exists(json, 'currency_rate') ? undefined : json['currency_rate'],
    reference: !exists(json, 'reference') ? undefined : json['reference'],
    payment_method: !exists(json, 'payment_method') ? undefined : json['payment_method'],
    payment_method_reference: !exists(json, 'payment_method_reference') ? undefined : json['payment_method_reference'],
    payment_method_id: !exists(json, 'payment_method_id') ? undefined : json['payment_method_id'],
    accounts_receivable_account_type: !exists(json, 'accounts_receivable_account_type') ? undefined : json['accounts_receivable_account_type'],
    accounts_receivable_account_id: !exists(json, 'accounts_receivable_account_id') ? undefined : json['accounts_receivable_account_id'],
    account: !exists(json, 'account') ? undefined : LinkedLedgerAccountFromJSON(json['account']),
    customer: !exists(json, 'customer') ? undefined : LinkedCustomerFromJSON(json['customer']),
    supplier: !exists(json, 'supplier') ? undefined : LinkedSupplierFromJSON(json['supplier']),
    reconciled: !exists(json, 'reconciled') ? undefined : json['reconciled'],
    status: !exists(json, 'status') ? undefined : json['status'],
    type: !exists(json, 'type') ? undefined : json['type'],
    allocations: !exists(json, 'allocations') ? undefined : json['allocations'].map(PaymentAllocationsFromJSON),
    note: !exists(json, 'note') ? undefined : json['note'],
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    display_id: !exists(json, 'display_id') ? undefined : json['display_id'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at'])
  };
}
function PaymentToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total_amount: value.total_amount,
    transaction_date: new Date(value.transaction_date).toISOString(),
    currency: CurrencyToJSON(value.currency),
    currency_rate: value.currency_rate,
    reference: value.reference,
    payment_method: value.payment_method,
    payment_method_reference: value.payment_method_reference,
    payment_method_id: value.payment_method_id,
    accounts_receivable_account_type: value.accounts_receivable_account_type,
    accounts_receivable_account_id: value.accounts_receivable_account_id,
    account: LinkedLedgerAccountToJSON(value.account),
    customer: LinkedCustomerToJSON(value.customer),
    supplier: LinkedSupplierToJSON(value.supplier),
    reconciled: value.reconciled,
    status: value.status,
    type: value.type,
    allocations: value.allocations === undefined ? undefined : value.allocations.map(PaymentAllocationsToJSON),
    note: value.note,
    row_version: value.row_version,
    display_id: value.display_id
  };
}

/* tslint:disable */
function GetPaymentResponseFromJSON(json) {
  return GetPaymentResponseFromJSONTyped(json);
}
function GetPaymentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: PaymentFromJSON(json['data'])
  };
}
function GetPaymentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: PaymentToJSON(value.data)
  };
}

/* tslint:disable */
function GetPaymentsResponseFromJSON(json) {
  return GetPaymentsResponseFromJSONTyped(json);
}
function GetPaymentsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(PaymentFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetPaymentsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(PaymentToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetPayrollResponseFromJSON(json) {
  return GetPayrollResponseFromJSONTyped(json);
}
function GetPayrollResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: PayrollFromJSON(json['data'])
  };
}
function GetPayrollResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: PayrollToJSON(value.data)
  };
}

/* tslint:disable */
function GetPayrollsResponseFromJSON(json) {
  return GetPayrollsResponseFromJSONTyped(json);
}
function GetPayrollsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(PayrollFromJSON)
  };
}
function GetPayrollsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(PayrollToJSON)
  };
}

/* tslint:disable */
function PipelineStagesFromJSON(json) {
  return PipelineStagesFromJSONTyped(json);
}
function PipelineStagesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    value: !exists(json, 'value') ? undefined : json['value'],
    win_probability: !exists(json, 'win_probability') ? undefined : json['win_probability'],
    display_order: !exists(json, 'display_order') ? undefined : json['display_order']
  };
}
function PipelineStagesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    value: value.value,
    win_probability: value.win_probability,
    display_order: value.display_order
  };
}

/* tslint:disable */
function PipelineFromJSON(json) {
  return PipelineFromJSONTyped(json);
}
function PipelineFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    id: !exists(json, 'id') ? undefined : json['id'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    archived: !exists(json, 'archived') ? undefined : json['archived'],
    active: !exists(json, 'active') ? undefined : json['active'],
    display_order: !exists(json, 'display_order') ? undefined : json['display_order'],
    win_probability_enabled: !exists(json, 'win_probability_enabled') ? undefined : json['win_probability_enabled'],
    stages: !exists(json, 'stages') ? undefined : json['stages'].map(PipelineStagesFromJSON),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function PipelineToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    id: value.id,
    currency: CurrencyToJSON(value.currency),
    archived: value.archived,
    active: value.active,
    display_order: value.display_order,
    win_probability_enabled: value.win_probability_enabled,
    stages: value.stages === undefined ? undefined : value.stages.map(PipelineStagesToJSON)
  };
}

/* tslint:disable */
function GetPipelineResponseFromJSON(json) {
  return GetPipelineResponseFromJSONTyped(json);
}
function GetPipelineResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: PipelineFromJSON(json['data'])
  };
}
function GetPipelineResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: PipelineToJSON(value.data)
  };
}

/* tslint:disable */
function GetPipelinesResponseFromJSON(json) {
  return GetPipelinesResponseFromJSONTyped(json);
}
function GetPipelinesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(PipelineFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetPipelinesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(PipelineToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function PosBankAccountAchDetailsFromJSON(json) {
  return PosBankAccountAchDetailsFromJSONTyped(json);
}
function PosBankAccountAchDetailsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    routing_number: !exists(json, 'routing_number') ? undefined : json['routing_number'],
    account_number_suffix: !exists(json, 'account_number_suffix') ? undefined : json['account_number_suffix'],
    account_type: !exists(json, 'account_type') ? undefined : json['account_type']
  };
}
function PosBankAccountAchDetailsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    routing_number: value.routing_number,
    account_number_suffix: value.account_number_suffix,
    account_type: value.account_type
  };
}

/* tslint:disable */
function PosBankAccountFromJSON(json) {
  return PosBankAccountFromJSONTyped(json);
}
function PosBankAccountFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    bank_name: !exists(json, 'bank_name') ? undefined : json['bank_name'],
    transfer_type: !exists(json, 'transfer_type') ? undefined : json['transfer_type'],
    account_ownership_type: !exists(json, 'account_ownership_type') ? undefined : json['account_ownership_type'],
    fingerprint: !exists(json, 'fingerprint') ? undefined : json['fingerprint'],
    country: !exists(json, 'country') ? undefined : json['country'],
    statement_description: !exists(json, 'statement_description') ? undefined : json['statement_description'],
    ach_details: !exists(json, 'ach_details') ? undefined : PosBankAccountAchDetailsFromJSON(json['ach_details'])
  };
}
function PosBankAccountToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    bank_name: value.bank_name,
    transfer_type: value.transfer_type,
    account_ownership_type: value.account_ownership_type,
    fingerprint: value.fingerprint,
    country: value.country,
    statement_description: value.statement_description,
    ach_details: PosBankAccountAchDetailsToJSON(value.ach_details)
  };
}

/* tslint:disable */
function PosPaymentCardDetailsFromJSON(json) {
  return PosPaymentCardDetailsFromJSONTyped(json);
}
function PosPaymentCardDetailsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    card: !exists(json, 'card') ? undefined : PaymentCardFromJSON(json['card'])
  };
}
function PosPaymentCardDetailsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    card: PaymentCardToJSON(value.card)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var PosPaymentExternalDetailsType;
(function (PosPaymentExternalDetailsType) {
  PosPaymentExternalDetailsType["check"] = "check";
  PosPaymentExternalDetailsType["bank_transfer"] = "bank_transfer";
  PosPaymentExternalDetailsType["other_gift_card"] = "other_gift_card";
  PosPaymentExternalDetailsType["crypto"] = "crypto";
  PosPaymentExternalDetailsType["square_cash"] = "square_cash";
  PosPaymentExternalDetailsType["social"] = "social";
  PosPaymentExternalDetailsType["external"] = "external";
  PosPaymentExternalDetailsType["emoney"] = "emoney";
  PosPaymentExternalDetailsType["card"] = "card";
  PosPaymentExternalDetailsType["stored_balance"] = "stored_balance";
  PosPaymentExternalDetailsType["food_voucher"] = "food_voucher";
  PosPaymentExternalDetailsType["other"] = "other";
})(PosPaymentExternalDetailsType || (PosPaymentExternalDetailsType = {}));
function PosPaymentExternalDetailsFromJSON(json) {
  return PosPaymentExternalDetailsFromJSONTyped(json);
}
function PosPaymentExternalDetailsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: json['type'],
    source: json['source'],
    source_id: !exists(json, 'source_id') ? undefined : json['source_id'],
    source_fee_amount: !exists(json, 'source_fee_amount') ? undefined : json['source_fee_amount']
  };
}
function PosPaymentExternalDetailsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    source: value.source,
    source_id: value.source_id,
    source_fee_amount: value.source_fee_amount
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var WalletDetailsStatus;
(function (WalletDetailsStatus) {
  WalletDetailsStatus["authorized"] = "authorized";
  WalletDetailsStatus["captured"] = "captured";
  WalletDetailsStatus["voided"] = "voided";
  WalletDetailsStatus["failed"] = "failed";
  WalletDetailsStatus["other"] = "other";
})(WalletDetailsStatus || (WalletDetailsStatus = {}));
function WalletDetailsFromJSON(json) {
  return WalletDetailsFromJSONTyped(json);
}
function WalletDetailsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status: !exists(json, 'status') ? undefined : json['status']
  };
}
function WalletDetailsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status: value.status
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var PosPaymentSource;
(function (PosPaymentSource) {
  PosPaymentSource["card"] = "card";
  PosPaymentSource["bank_account"] = "bank_account";
  PosPaymentSource["wallet"] = "wallet";
  PosPaymentSource["bnpl"] = "bnpl";
  PosPaymentSource["cash"] = "cash";
  PosPaymentSource["external"] = "external";
  PosPaymentSource["other"] = "other";
})(PosPaymentSource || (PosPaymentSource = {}));
/**
 * @export
 * @enum {string}
 */
var PosPaymentStatus;
(function (PosPaymentStatus) {
  PosPaymentStatus["approved"] = "approved";
  PosPaymentStatus["pending"] = "pending";
  PosPaymentStatus["completed"] = "completed";
  PosPaymentStatus["canceled"] = "canceled";
  PosPaymentStatus["failed"] = "failed";
  PosPaymentStatus["other"] = "other";
})(PosPaymentStatus || (PosPaymentStatus = {}));
function PosPaymentFromJSON(json) {
  return PosPaymentFromJSONTyped(json);
}
function PosPaymentFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    source_id: json['source_id'],
    order_id: json['order_id'],
    customer_id: json['customer_id'],
    tender_id: json['tender_id'],
    amount: json['amount'],
    currency: CurrencyFromJSON(json['currency']),
    id: !exists(json, 'id') ? undefined : json['id'],
    merchant_id: !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
    employee_id: !exists(json, 'employee_id') ? undefined : json['employee_id'],
    location_id: !exists(json, 'location_id') ? undefined : json['location_id'],
    device_id: !exists(json, 'device_id') ? undefined : json['device_id'],
    external_payment_id: !exists(json, 'external_payment_id') ? undefined : json['external_payment_id'],
    idempotency_key: !exists(json, 'idempotency_key') ? undefined : json['idempotency_key'],
    tip: !exists(json, 'tip') ? undefined : json['tip'],
    tax: !exists(json, 'tax') ? undefined : json['tax'],
    total: !exists(json, 'total') ? undefined : json['total'],
    app_fee: !exists(json, 'app_fee') ? undefined : json['app_fee'],
    change_back_cash_amount: !exists(json, 'change_back_cash_amount') ? undefined : json['change_back_cash_amount'],
    approved: !exists(json, 'approved') ? undefined : json['approved'],
    refunded: !exists(json, 'refunded') ? undefined : json['refunded'],
    processing_fees: !exists(json, 'processing_fees') ? undefined : json['processing_fees'],
    source: !exists(json, 'source') ? undefined : json['source'],
    status: !exists(json, 'status') ? undefined : json['status'],
    cash: !exists(json, 'cash') ? undefined : CashDetailsFromJSON(json['cash']),
    card_details: !exists(json, 'card_details') ? undefined : PosPaymentCardDetailsFromJSON(json['card_details']),
    bank_account: !exists(json, 'bank_account') ? undefined : PosBankAccountFromJSON(json['bank_account']),
    wallet: !exists(json, 'wallet') ? undefined : WalletDetailsFromJSON(json['wallet']),
    external_details: !exists(json, 'external_details') ? undefined : PosPaymentExternalDetailsFromJSON(json['external_details']),
    service_charges: !exists(json, 'service_charges') ? undefined : ServiceChargesFromJSON(json['service_charges']),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function PosPaymentToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    source_id: value.source_id,
    order_id: value.order_id,
    customer_id: value.customer_id,
    tender_id: value.tender_id,
    amount: value.amount,
    currency: CurrencyToJSON(value.currency),
    merchant_id: value.merchant_id,
    employee_id: value.employee_id,
    location_id: value.location_id,
    device_id: value.device_id,
    external_payment_id: value.external_payment_id,
    idempotency_key: value.idempotency_key,
    tip: value.tip,
    tax: value.tax,
    total: value.total,
    app_fee: value.app_fee,
    change_back_cash_amount: value.change_back_cash_amount,
    approved: value.approved,
    refunded: value.refunded,
    processing_fees: value.processing_fees,
    source: value.source,
    status: value.status,
    cash: CashDetailsToJSON(value.cash),
    card_details: PosPaymentCardDetailsToJSON(value.card_details),
    bank_account: PosBankAccountToJSON(value.bank_account),
    wallet: WalletDetailsToJSON(value.wallet),
    external_details: PosPaymentExternalDetailsToJSON(value.external_details),
    service_charges: ServiceChargesToJSON(value.service_charges)
  };
}

/* tslint:disable */
function GetPosPaymentResponseFromJSON(json) {
  return GetPosPaymentResponseFromJSONTyped(json);
}
function GetPosPaymentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: PosPaymentFromJSON(json['data'])
  };
}
function GetPosPaymentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: PosPaymentToJSON(value.data)
  };
}

/* tslint:disable */
function GetPosPaymentsResponseFromJSON(json) {
  return GetPosPaymentsResponseFromJSONTyped(json);
}
function GetPosPaymentsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(PosPaymentFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetPosPaymentsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(PosPaymentToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetProductResponseFromJSON(json) {
  return GetProductResponseFromJSONTyped(json);
}
function GetProductResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: EcommerceProductFromJSON(json['data'])
  };
}
function GetProductResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: EcommerceProductToJSON(value.data)
  };
}

/* tslint:disable */
function GetProductsResponseFromJSON(json) {
  return GetProductsResponseFromJSONTyped(json);
}
function GetProductsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(EcommerceProductFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetProductsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(EcommerceProductToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function ProfitAndLossRecordsFromJSON(json) {
  return ProfitAndLossRecordsFromJSONTyped(json);
}
function ProfitAndLossRecordsFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ProfitAndLossRecordsToJSON(value) {
  return value;
}

/* tslint:disable */
function ProfitAndLossExpensesFromJSON(json) {
  return ProfitAndLossExpensesFromJSONTyped(json);
}
function ProfitAndLossExpensesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    total: json['total'],
    records: ProfitAndLossRecordsFromJSON(json['records'])
  };
}
function ProfitAndLossExpensesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    records: ProfitAndLossRecordsToJSON(value.records)
  };
}

/* tslint:disable */
function ProfitAndLossGrossProfitFromJSON(json) {
  return ProfitAndLossGrossProfitFromJSONTyped(json);
}
function ProfitAndLossGrossProfitFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    total: json['total'],
    records: ProfitAndLossRecordsFromJSON(json['records'])
  };
}
function ProfitAndLossGrossProfitToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    records: ProfitAndLossRecordsToJSON(value.records)
  };
}

/* tslint:disable */
function ProfitAndLossIncomeFromJSON(json) {
  return ProfitAndLossIncomeFromJSONTyped(json);
}
function ProfitAndLossIncomeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    total: json['total'],
    records: ProfitAndLossRecordsFromJSON(json['records'])
  };
}
function ProfitAndLossIncomeToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    records: ProfitAndLossRecordsToJSON(value.records)
  };
}

/* tslint:disable */
function ProfitAndLossNetIncomeFromJSON(json) {
  return ProfitAndLossNetIncomeFromJSONTyped(json);
}
function ProfitAndLossNetIncomeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    total: json['total'],
    records: ProfitAndLossRecordsFromJSON(json['records'])
  };
}
function ProfitAndLossNetIncomeToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    records: ProfitAndLossRecordsToJSON(value.records)
  };
}

/* tslint:disable */
function ProfitAndLossNetOperatingIncomeFromJSON(json) {
  return ProfitAndLossNetOperatingIncomeFromJSONTyped(json);
}
function ProfitAndLossNetOperatingIncomeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    total: json['total'],
    records: ProfitAndLossRecordsFromJSON(json['records'])
  };
}
function ProfitAndLossNetOperatingIncomeToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    total: value.total,
    records: ProfitAndLossRecordsToJSON(value.records)
  };
}

/* tslint:disable */
function ProfitAndLossFromJSON(json) {
  return ProfitAndLossFromJSONTyped(json);
}
function ProfitAndLossFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    report_name: json['report_name'],
    currency: json['currency'],
    income: ProfitAndLossIncomeFromJSON(json['income']),
    expenses: ProfitAndLossExpensesFromJSON(json['expenses']),
    id: !exists(json, 'id') ? undefined : json['id'],
    start_date: !exists(json, 'start_date') ? undefined : json['start_date'],
    end_date: !exists(json, 'end_date') ? undefined : json['end_date'],
    customer_id: !exists(json, 'customer_id') ? undefined : json['customer_id'],
    net_income: !exists(json, 'net_income') ? undefined : ProfitAndLossNetIncomeFromJSON(json['net_income']),
    net_operating_income: !exists(json, 'net_operating_income') ? undefined : ProfitAndLossNetOperatingIncomeFromJSON(json['net_operating_income']),
    gross_profit: !exists(json, 'gross_profit') ? undefined : ProfitAndLossGrossProfitFromJSON(json['gross_profit'])
  };
}
function ProfitAndLossToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    report_name: value.report_name,
    currency: value.currency,
    income: ProfitAndLossIncomeToJSON(value.income),
    expenses: ProfitAndLossExpensesToJSON(value.expenses),
    start_date: value.start_date,
    end_date: value.end_date,
    customer_id: value.customer_id,
    net_income: ProfitAndLossNetIncomeToJSON(value.net_income),
    net_operating_income: ProfitAndLossNetOperatingIncomeToJSON(value.net_operating_income),
    gross_profit: ProfitAndLossGrossProfitToJSON(value.gross_profit)
  };
}

/* tslint:disable */
function GetProfitAndLossResponseFromJSON(json) {
  return GetProfitAndLossResponseFromJSONTyped(json);
}
function GetProfitAndLossResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: ProfitAndLossFromJSON(json['data'])
  };
}
function GetProfitAndLossResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: ProfitAndLossToJSON(value.data)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var PurchaseOrderStatus;
(function (PurchaseOrderStatus) {
  PurchaseOrderStatus["draft"] = "draft";
  PurchaseOrderStatus["open"] = "open";
  PurchaseOrderStatus["closed"] = "closed";
  PurchaseOrderStatus["deleted"] = "deleted";
  PurchaseOrderStatus["billed"] = "billed";
  PurchaseOrderStatus["other"] = "other";
})(PurchaseOrderStatus || (PurchaseOrderStatus = {}));
function PurchaseOrderFromJSON(json) {
  return PurchaseOrderFromJSONTyped(json);
}
function PurchaseOrderFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    po_number: !exists(json, 'po_number') ? undefined : json['po_number'],
    reference: !exists(json, 'reference') ? undefined : json['reference'],
    supplier: !exists(json, 'supplier') ? undefined : LinkedSupplierFromJSON(json['supplier']),
    status: !exists(json, 'status') ? undefined : json['status'],
    issued_date: !exists(json, 'issued_date') ? undefined : json['issued_date'] === null ? null : new Date(json['issued_date']),
    delivery_date: !exists(json, 'delivery_date') ? undefined : json['delivery_date'] === null ? null : new Date(json['delivery_date']),
    expected_arrival_date: !exists(json, 'expected_arrival_date') ? undefined : json['expected_arrival_date'] === null ? null : new Date(json['expected_arrival_date']),
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    currency_rate: !exists(json, 'currency_rate') ? undefined : json['currency_rate'],
    sub_total: !exists(json, 'sub_total') ? undefined : json['sub_total'],
    total_tax: !exists(json, 'total_tax') ? undefined : json['total_tax'],
    total: !exists(json, 'total') ? undefined : json['total'],
    tax_inclusive: !exists(json, 'tax_inclusive') ? undefined : json['tax_inclusive'],
    line_items: !exists(json, 'line_items') ? undefined : json['line_items'].map(InvoiceLineItemFromJSON),
    shipping_address: !exists(json, 'shipping_address') ? undefined : AddressFromJSON(json['shipping_address']),
    ledger_account: !exists(json, 'ledger_account') ? undefined : LinkedLedgerAccountFromJSON(json['ledger_account']),
    template_id: !exists(json, 'template_id') ? undefined : json['template_id'],
    discount_percentage: !exists(json, 'discount_percentage') ? undefined : json['discount_percentage'],
    bank_account: !exists(json, 'bank_account') ? undefined : BankAccountFromJSON(json['bank_account']),
    accounting_by_row: !exists(json, 'accounting_by_row') ? undefined : json['accounting_by_row'],
    due_date: !exists(json, 'due_date') ? undefined : new Date(json['due_date']),
    payment_method: !exists(json, 'payment_method') ? undefined : json['payment_method'],
    tax_code: !exists(json, 'tax_code') ? undefined : json['tax_code'],
    channel: !exists(json, 'channel') ? undefined : json['channel'],
    row_version: !exists(json, 'row_version') ? undefined : json['row_version'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function PurchaseOrderToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    po_number: value.po_number,
    reference: value.reference,
    supplier: LinkedSupplierToJSON(value.supplier),
    status: value.status,
    issued_date: value.issued_date === undefined ? undefined : value.issued_date === null ? null : new Date(value.issued_date).toISOString().substr(0, 10),
    delivery_date: value.delivery_date === undefined ? undefined : value.delivery_date === null ? null : new Date(value.delivery_date).toISOString().substr(0, 10),
    expected_arrival_date: value.expected_arrival_date === undefined ? undefined : value.expected_arrival_date === null ? null : new Date(value.expected_arrival_date).toISOString().substr(0, 10),
    currency: CurrencyToJSON(value.currency),
    currency_rate: value.currency_rate,
    sub_total: value.sub_total,
    total_tax: value.total_tax,
    total: value.total,
    tax_inclusive: value.tax_inclusive,
    line_items: value.line_items === undefined ? undefined : value.line_items.map(InvoiceLineItemToJSON),
    shipping_address: AddressToJSON(value.shipping_address),
    ledger_account: LinkedLedgerAccountToJSON(value.ledger_account),
    template_id: value.template_id,
    discount_percentage: value.discount_percentage,
    bank_account: BankAccountToJSON(value.bank_account),
    accounting_by_row: value.accounting_by_row,
    due_date: value.due_date === undefined ? undefined : new Date(value.due_date).toISOString().substr(0, 10),
    payment_method: value.payment_method,
    tax_code: value.tax_code,
    channel: value.channel,
    row_version: value.row_version
  };
}

/* tslint:disable */
function GetPurchaseOrderResponseFromJSON(json) {
  return GetPurchaseOrderResponseFromJSONTyped(json);
}
function GetPurchaseOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: PurchaseOrderFromJSON(json['data'])
  };
}
function GetPurchaseOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: PurchaseOrderToJSON(value.data)
  };
}

/* tslint:disable */
function GetPurchaseOrdersResponseFromJSON(json) {
  return GetPurchaseOrdersResponseFromJSONTyped(json);
}
function GetPurchaseOrdersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(PurchaseOrderFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetPurchaseOrdersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(PurchaseOrderToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function SharedLinkTargetFromJSON(json) {
  return SharedLinkTargetFromJSONTyped(json);
}
function SharedLinkTargetFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    type: !exists(json, 'type') ? undefined : FileTypeFromJSON(json['type'])
  };
}
function SharedLinkTargetToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    type: FileTypeToJSON(value.type)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var SharedLinkScope;
(function (SharedLinkScope) {
  SharedLinkScope["public"] = "public";
  SharedLinkScope["company"] = "company";
})(SharedLinkScope || (SharedLinkScope = {}));
function SharedLinkFromJSON(json) {
  return SharedLinkFromJSONTyped(json);
}
function SharedLinkFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    target_id: json['target_id'],
    url: !exists(json, 'url') ? undefined : json['url'],
    download_url: !exists(json, 'download_url') ? undefined : json['download_url'],
    target: !exists(json, 'target') ? undefined : SharedLinkTargetFromJSON(json['target']),
    scope: !exists(json, 'scope') ? undefined : json['scope'],
    password_protected: !exists(json, 'password_protected') ? undefined : json['password_protected'],
    password: !exists(json, 'password') ? undefined : json['password'],
    expires_at: !exists(json, 'expires_at') ? undefined : json['expires_at'] === null ? null : new Date(json['expires_at']),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function SharedLinkToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    target_id: value.target_id,
    download_url: value.download_url,
    target: SharedLinkTargetToJSON(value.target),
    scope: value.scope,
    password: value.password
  };
}

/* tslint:disable */
function GetSharedLinkResponseFromJSON(json) {
  return GetSharedLinkResponseFromJSONTyped(json);
}
function GetSharedLinkResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: SharedLinkFromJSON(json['data'])
  };
}
function GetSharedLinkResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: SharedLinkToJSON(value.data)
  };
}

/* tslint:disable */
function GetSharedLinksResponseFromJSON(json) {
  return GetSharedLinksResponseFromJSONTyped(json);
}
function GetSharedLinksResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(SharedLinkFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetSharedLinksResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(SharedLinkToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetStoreResponseFromJSON(json) {
  return GetStoreResponseFromJSONTyped(json);
}
function GetStoreResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: EcommerceStoreFromJSON(json['data'])
  };
}
function GetStoreResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: EcommerceStoreToJSON(value.data)
  };
}

/* tslint:disable */
function GetStoresResponseFromJSON(json) {
  return GetStoresResponseFromJSONTyped(json);
}
function GetStoresResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(EcommerceStoreFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetStoresResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(EcommerceStoreToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var SupplierStatus;
(function (SupplierStatus) {
  SupplierStatus["active"] = "active";
  SupplierStatus["inactive"] = "inactive";
  SupplierStatus["archived"] = "archived";
  SupplierStatus["gdpr_erasure_request"] = "gdpr-erasure-request";
  SupplierStatus["unknown"] = "unknown";
})(SupplierStatus || (SupplierStatus = {}));
function SupplierFromJSON(json) {
  return SupplierFromJSONTyped(json);
}
function SupplierFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    downstream_id: !exists(json, 'downstream_id') ? undefined : json['downstream_id'],
    display_id: !exists(json, 'display_id') ? undefined : json['display_id'],
    display_name: !exists(json, 'display_name') ? undefined : json['display_name'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    title: !exists(json, 'title') ? undefined : json['title'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    middle_name: !exists(json, 'middle_name') ? undefined : json['middle_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    suffix: !exists(json, 'suffix') ? undefined : json['suffix'],
    individual: !exists(json, 'individual') ? undefined : json['individual'],
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    emails: !exists(json, 'emails') ? undefined : json['emails'].map(EmailFromJSON),
    websites: !exists(json, 'websites') ? undefined : json['websites'].map(WebsiteFromJSON),
    bank_accounts: !exists(json, 'bank_accounts') ? undefined : json['bank_accounts'].map(BankAccountFromJSON),
    notes: !exists(json, 'notes') ? undefined : json['notes'],
    tax_rate: !exists(json, 'tax_rate') ? undefined : LinkedTaxRateFromJSON(json['tax_rate']),
    tax_number: !exists(json, 'tax_number') ? undefined : json['tax_number'],
    currency: !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
    account: !exists(json, 'account') ? undefined : LinkedLedgerAccountFromJSON(json['account']),
    status: !exists(json, 'status') ? undefined : json['status'],
    payment_method: !exists(json, 'payment_method') ? undefined : json['payment_method'],
    channel: !exists(json, 'channel') ? undefined : json['channel'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    row_version: !exists(json, 'row_version') ? undefined : json['row_version']
  };
}
function SupplierToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    display_id: value.display_id,
    display_name: value.display_name,
    company_name: value.company_name,
    title: value.title,
    first_name: value.first_name,
    middle_name: value.middle_name,
    last_name: value.last_name,
    suffix: value.suffix,
    individual: value.individual,
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON),
    emails: value.emails === undefined ? undefined : value.emails.map(EmailToJSON),
    websites: value.websites === undefined ? undefined : value.websites.map(WebsiteToJSON),
    bank_accounts: value.bank_accounts === undefined ? undefined : value.bank_accounts.map(BankAccountToJSON),
    notes: value.notes,
    tax_rate: LinkedTaxRateToJSON(value.tax_rate),
    tax_number: value.tax_number,
    currency: CurrencyToJSON(value.currency),
    account: LinkedLedgerAccountToJSON(value.account),
    status: value.status,
    payment_method: value.payment_method,
    channel: value.channel,
    row_version: value.row_version
  };
}

/* tslint:disable */
function GetSupplierResponseFromJSON(json) {
  return GetSupplierResponseFromJSONTyped(json);
}
function GetSupplierResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: SupplierFromJSON(json['data'])
  };
}
function GetSupplierResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: SupplierToJSON(value.data)
  };
}

/* tslint:disable */
function GetSuppliersResponseFromJSON(json) {
  return GetSuppliersResponseFromJSONTyped(json);
}
function GetSuppliersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(SupplierFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetSuppliersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(SupplierToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetTaxRateResponseFromJSON(json) {
  return GetTaxRateResponseFromJSONTyped(json);
}
function GetTaxRateResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: TaxRateFromJSON(json['data'])
  };
}
function GetTaxRateResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: TaxRateToJSON(value.data)
  };
}

/* tslint:disable */
function GetTaxRatesResponseFromJSON(json) {
  return GetTaxRatesResponseFromJSONTyped(json);
}
function GetTaxRatesResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(TaxRateFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetTaxRatesResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(TaxRateToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function TenderFromJSON(json) {
  return TenderFromJSONTyped(json);
}
function TenderFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    key: !exists(json, 'key') ? undefined : json['key'],
    label: !exists(json, 'label') ? undefined : json['label'],
    active: !exists(json, 'active') ? undefined : json['active'],
    hidden: !exists(json, 'hidden') ? undefined : json['hidden'],
    editable: !exists(json, 'editable') ? undefined : json['editable'],
    opens_cash_drawer: !exists(json, 'opens_cash_drawer') ? undefined : json['opens_cash_drawer'],
    allows_tipping: !exists(json, 'allows_tipping') ? undefined : json['allows_tipping'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function TenderToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    key: value.key,
    label: value.label,
    active: value.active,
    hidden: value.hidden,
    editable: value.editable,
    opens_cash_drawer: value.opens_cash_drawer,
    allows_tipping: value.allows_tipping
  };
}

/* tslint:disable */
function GetTenderResponseFromJSON(json) {
  return GetTenderResponseFromJSONTyped(json);
}
function GetTenderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: TenderFromJSON(json['data'])
  };
}
function GetTenderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: TenderToJSON(value.data)
  };
}

/* tslint:disable */
function GetTendersResponseFromJSON(json) {
  return GetTendersResponseFromJSONTyped(json);
}
function GetTendersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(TenderFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetTendersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(TenderToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var TicketPriority;
(function (TicketPriority) {
  TicketPriority["low"] = "low";
  TicketPriority["normal"] = "normal";
  TicketPriority["high"] = "high";
  TicketPriority["urgent"] = "urgent";
})(TicketPriority || (TicketPriority = {}));
function TicketFromJSON(json) {
  return TicketFromJSONTyped(json);
}
function TicketFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    parent_id: !exists(json, 'parent_id') ? undefined : json['parent_id'],
    collection_id: !exists(json, 'collection_id') ? undefined : json['collection_id'],
    type: !exists(json, 'type') ? undefined : json['type'],
    subject: !exists(json, 'subject') ? undefined : json['subject'],
    description: !exists(json, 'description') ? undefined : json['description'],
    status: !exists(json, 'status') ? undefined : json['status'],
    priority: !exists(json, 'priority') ? undefined : json['priority'],
    assignees: !exists(json, 'assignees') ? undefined : json['assignees'].map(AssigneeFromJSON),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at']),
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    due_date: !exists(json, 'due_date') ? undefined : json['due_date'] === null ? null : new Date(json['due_date']),
    completed_at: !exists(json, 'completed_at') ? undefined : json['completed_at'] === null ? null : new Date(json['completed_at']),
    tags: !exists(json, 'tags') ? undefined : json['tags'].map(CollectionTagFromJSON)
  };
}
function TicketToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    parent_id: value.parent_id,
    type: value.type,
    subject: value.subject,
    description: value.description,
    status: value.status,
    priority: value.priority,
    assignees: value.assignees === undefined ? undefined : value.assignees.map(AssigneeToJSON),
    due_date: value.due_date === undefined ? undefined : value.due_date === null ? null : new Date(value.due_date).toISOString(),
    tags: value.tags === undefined ? undefined : value.tags.map(CollectionTagToJSON)
  };
}

/* tslint:disable */
function GetTicketResponseFromJSON(json) {
  return GetTicketResponseFromJSONTyped(json);
}
function GetTicketResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: TicketFromJSON(json['data'])
  };
}
function GetTicketResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: TicketToJSON(value.data)
  };
}

/* tslint:disable */
function GetTicketsResponseFromJSON(json) {
  return GetTicketsResponseFromJSONTyped(json);
}
function GetTicketsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(TicketFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetTicketsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(TicketToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function TimeOffRequestNotesFromJSON(json) {
  return TimeOffRequestNotesFromJSONTyped(json);
}
function TimeOffRequestNotesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    employee: !exists(json, 'employee') ? undefined : json['employee'],
    manager: !exists(json, 'manager') ? undefined : json['manager']
  };
}
function TimeOffRequestNotesToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    employee: value.employee,
    manager: value.manager
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var TimeOffRequestStatus;
(function (TimeOffRequestStatus) {
  TimeOffRequestStatus["requested"] = "requested";
  TimeOffRequestStatus["approved"] = "approved";
  TimeOffRequestStatus["declined"] = "declined";
  TimeOffRequestStatus["cancelled"] = "cancelled";
  TimeOffRequestStatus["deleted"] = "deleted";
  TimeOffRequestStatus["other"] = "other";
})(TimeOffRequestStatus || (TimeOffRequestStatus = {}));
/**
 * @export
 * @enum {string}
 */
var TimeOffRequestRequestType;
(function (TimeOffRequestRequestType) {
  TimeOffRequestRequestType["vacation"] = "vacation";
  TimeOffRequestRequestType["sick"] = "sick";
  TimeOffRequestRequestType["personal"] = "personal";
  TimeOffRequestRequestType["jury_duty"] = "jury_duty";
  TimeOffRequestRequestType["volunteer"] = "volunteer";
  TimeOffRequestRequestType["bereavement"] = "bereavement";
  TimeOffRequestRequestType["other"] = "other";
})(TimeOffRequestRequestType || (TimeOffRequestRequestType = {}));
/**
 * @export
 * @enum {string}
 */
var TimeOffRequestUnits;
(function (TimeOffRequestUnits) {
  TimeOffRequestUnits["days"] = "days";
  TimeOffRequestUnits["hours"] = "hours";
  TimeOffRequestUnits["other"] = "other";
})(TimeOffRequestUnits || (TimeOffRequestUnits = {}));
function TimeOffRequestFromJSON(json) {
  return TimeOffRequestFromJSONTyped(json);
}
function TimeOffRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    employee_id: !exists(json, 'employee_id') ? undefined : json['employee_id'],
    policy_id: !exists(json, 'policy_id') ? undefined : json['policy_id'],
    status: !exists(json, 'status') ? undefined : json['status'],
    description: !exists(json, 'description') ? undefined : json['description'],
    start_date: !exists(json, 'start_date') ? undefined : json['start_date'],
    end_date: !exists(json, 'end_date') ? undefined : json['end_date'],
    request_date: !exists(json, 'request_date') ? undefined : json['request_date'],
    request_type: !exists(json, 'request_type') ? undefined : json['request_type'],
    approval_date: !exists(json, 'approval_date') ? undefined : json['approval_date'],
    units: !exists(json, 'units') ? undefined : json['units'],
    amount: !exists(json, 'amount') ? undefined : json['amount'],
    notes: !exists(json, 'notes') ? undefined : TimeOffRequestNotesFromJSON(json['notes']),
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function TimeOffRequestToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    employee_id: value.employee_id,
    policy_id: value.policy_id,
    status: value.status,
    description: value.description,
    start_date: value.start_date,
    end_date: value.end_date,
    request_date: value.request_date,
    request_type: value.request_type,
    approval_date: value.approval_date,
    units: value.units,
    amount: value.amount,
    notes: TimeOffRequestNotesToJSON(value.notes)
  };
}

/* tslint:disable */
function GetTimeOffRequestResponseFromJSON(json) {
  return GetTimeOffRequestResponseFromJSONTyped(json);
}
function GetTimeOffRequestResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: TimeOffRequestFromJSON(json['data'])
  };
}
function GetTimeOffRequestResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: TimeOffRequestToJSON(value.data)
  };
}

/* tslint:disable */
function GetTimeOffRequestsResponseFromJSON(json) {
  return GetTimeOffRequestsResponseFromJSONTyped(json);
}
function GetTimeOffRequestsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(TimeOffRequestFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetTimeOffRequestsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(TimeOffRequestToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function UploadSessionFromJSON(json) {
  return UploadSessionFromJSONTyped(json);
}
function UploadSessionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    success: !exists(json, 'success') ? undefined : json['success'],
    part_size: !exists(json, 'part_size') ? undefined : json['part_size'],
    parallel_upload_supported: !exists(json, 'parallel_upload_supported') ? undefined : json['parallel_upload_supported'],
    uploaded_byte_range: !exists(json, 'uploaded_byte_range') ? undefined : json['uploaded_byte_range'],
    expires_at: !exists(json, 'expires_at') ? undefined : json['expires_at'] === null ? null : new Date(json['expires_at'])
  };
}
function UploadSessionToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {};
}

/* tslint:disable */
function GetUploadSessionResponseFromJSON(json) {
  return GetUploadSessionResponseFromJSONTyped(json);
}
function GetUploadSessionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UploadSessionFromJSON(json['data'])
  };
}
function GetUploadSessionResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UploadSessionToJSON(value.data)
  };
}

/* tslint:disable */
function UserFromJSON(json) {
  return UserFromJSONTyped(json);
}
function UserFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    emails: json['emails'].map(EmailFromJSON),
    id: !exists(json, 'id') ? undefined : json['id'],
    parent_id: !exists(json, 'parent_id') ? undefined : json['parent_id'],
    username: !exists(json, 'username') ? undefined : json['username'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    title: !exists(json, 'title') ? undefined : json['title'],
    division: !exists(json, 'division') ? undefined : json['division'],
    department: !exists(json, 'department') ? undefined : json['department'],
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    employee_number: !exists(json, 'employee_number') ? undefined : json['employee_number'],
    description: !exists(json, 'description') ? undefined : json['description'],
    image: !exists(json, 'image') ? undefined : json['image'],
    language: !exists(json, 'language') ? undefined : json['language'],
    status: !exists(json, 'status') ? undefined : json['status'],
    password: !exists(json, 'password') ? undefined : json['password'],
    addresses: !exists(json, 'addresses') ? undefined : json['addresses'].map(AddressFromJSON),
    phone_numbers: !exists(json, 'phone_numbers') ? undefined : json['phone_numbers'].map(PhoneNumberFromJSON),
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'],
    created_at: !exists(json, 'created_at') ? undefined : json['created_at']
  };
}
function UserToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    emails: value.emails.map(EmailToJSON),
    parent_id: value.parent_id,
    username: value.username,
    first_name: value.first_name,
    last_name: value.last_name,
    title: value.title,
    division: value.division,
    department: value.department,
    company_name: value.company_name,
    employee_number: value.employee_number,
    description: value.description,
    image: value.image,
    language: value.language,
    status: value.status,
    password: value.password,
    addresses: value.addresses === undefined ? undefined : value.addresses.map(AddressToJSON),
    phone_numbers: value.phone_numbers === undefined ? undefined : value.phone_numbers.map(PhoneNumberToJSON)
  };
}

/* tslint:disable */
function GetUserResponseFromJSON(json) {
  return GetUserResponseFromJSONTyped(json);
}
function GetUserResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UserFromJSON(json['data'])
  };
}
function GetUserResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UserToJSON(value.data)
  };
}

/* tslint:disable */
function GetUsersResponseFromJSON(json) {
  return GetUsersResponseFromJSONTyped(json);
}
function GetUsersResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: json['data'].map(UserFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetUsersResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: value.data.map(UserToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function WebhookEventLogAttemptsFromJSON(json) {
  return WebhookEventLogAttemptsFromJSONTyped(json);
}
function WebhookEventLogAttemptsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    timestamp: !exists(json, 'timestamp') ? undefined : json['timestamp'],
    execution_attempt: !exists(json, 'execution_attempt') ? undefined : json['execution_attempt'],
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    success: !exists(json, 'success') ? undefined : json['success']
  };
}
function WebhookEventLogAttemptsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    timestamp: value.timestamp,
    execution_attempt: value.execution_attempt,
    status_code: value.status_code,
    success: value.success
  };
}

function WebhookEventLogServiceFromJSON(json) {
  return WebhookEventLogServiceFromJSONTyped(json);
}
function WebhookEventLogServiceFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name']
  };
}
function WebhookEventLogServiceToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name
  };
}

/* tslint:disable */
function WebhookEventLogFromJSON(json) {
  return WebhookEventLogFromJSONTyped(json);
}
function WebhookEventLogFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    success: !exists(json, 'success') ? undefined : json['success'],
    application_id: !exists(json, 'application_id') ? undefined : json['application_id'],
    consumer_id: !exists(json, 'consumer_id') ? undefined : json['consumer_id'],
    unified_api: !exists(json, 'unified_api') ? undefined : UnifiedApiIdFromJSON(json['unified_api']),
    service: !exists(json, 'service') ? undefined : WebhookEventLogServiceFromJSON(json['service']),
    endpoint: !exists(json, 'endpoint') ? undefined : json['endpoint'],
    event_type: !exists(json, 'event_type') ? undefined : json['event_type'],
    execution_attempt: !exists(json, 'execution_attempt') ? undefined : json['execution_attempt'],
    http_method: !exists(json, 'http_method') ? undefined : json['http_method'],
    timestamp: !exists(json, 'timestamp') ? undefined : json['timestamp'],
    entity_type: !exists(json, 'entity_type') ? undefined : json['entity_type'],
    request_body: !exists(json, 'request_body') ? undefined : json['request_body'],
    response_body: !exists(json, 'response_body') ? undefined : json['response_body'],
    retry_scheduled: !exists(json, 'retry_scheduled') ? undefined : json['retry_scheduled'],
    attempts: !exists(json, 'attempts') ? undefined : json['attempts'].map(WebhookEventLogAttemptsFromJSON)
  };
}
function WebhookEventLogToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    status_code: value.status_code,
    success: value.success,
    application_id: value.application_id,
    consumer_id: value.consumer_id,
    unified_api: UnifiedApiIdToJSON(value.unified_api),
    service: WebhookEventLogServiceToJSON(value.service),
    endpoint: value.endpoint,
    event_type: value.event_type,
    execution_attempt: value.execution_attempt,
    http_method: value.http_method,
    timestamp: value.timestamp,
    entity_type: value.entity_type,
    request_body: value.request_body,
    response_body: value.response_body,
    retry_scheduled: value.retry_scheduled,
    attempts: value.attempts === undefined ? undefined : value.attempts.map(WebhookEventLogAttemptsToJSON)
  };
}

/* tslint:disable */
function GetWebhookEventLogsResponseFromJSON(json) {
  return GetWebhookEventLogsResponseFromJSONTyped(json);
}
function GetWebhookEventLogsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: json['data'].map(WebhookEventLogFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetWebhookEventLogsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: value.data.map(WebhookEventLogToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
function GetWebhookResponseFromJSON(json) {
  return GetWebhookResponseFromJSONTyped(json);
}
function GetWebhookResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: WebhookFromJSON(json['data'])
  };
}
function GetWebhookResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: WebhookToJSON(value.data)
  };
}

/* tslint:disable */
function GetWebhooksResponseFromJSON(json) {
  return GetWebhooksResponseFromJSONTyped(json);
}
function GetWebhooksResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: json['data'].map(WebhookFromJSON),
    meta: !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    links: !exists(json, 'links') ? undefined : LinksFromJSON(json['links'])
  };
}
function GetWebhooksResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: value.data.map(WebhookToJSON),
    meta: MetaToJSON(value.meta),
    links: LinksToJSON(value.links)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
var HrisEventType;
(function (HrisEventType) {
  HrisEventType["Star"] = "*";
  HrisEventType["hris_employee_created"] = "hris.employee.created";
  HrisEventType["hris_employee_updated"] = "hris.employee.updated";
  HrisEventType["hris_employee_terminated"] = "hris.employee.terminated";
  HrisEventType["hris_employee_deleted"] = "hris.employee.deleted";
  HrisEventType["hris_company_created"] = "hris.company.created";
  HrisEventType["hris_company_updated"] = "hris.company.updated";
  HrisEventType["hris_company_deleted"] = "hris.company.deleted";
})(HrisEventType || (HrisEventType = {}));
function HrisEventTypeFromJSON(json) {
  return HrisEventTypeFromJSONTyped(json);
}
function HrisEventTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function HrisEventTypeToJSON(value) {
  return value;
}

/* tslint:disable */
function InvoiceItemsFilterFromJSON(json) {
  return InvoiceItemsFilterFromJSONTyped(json);
}
function InvoiceItemsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name']
  };
}
function InvoiceItemsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var InvoicesSortBy;
(function (InvoicesSortBy) {
  InvoicesSortBy["updated_at"] = "updated_at";
})(InvoicesSortBy || (InvoicesSortBy = {}));
function InvoicesSortFromJSON(json) {
  return InvoicesSortFromJSONTyped(json);
}
function InvoicesSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function InvoicesSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

/* tslint:disable */
function IssuesFilterFromJSON(json) {
  return IssuesFilterFromJSONTyped(json);
}
function IssuesFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status: !exists(json, 'status') ? undefined : json['status'],
    since: !exists(json, 'since') ? undefined : new Date(json['since']),
    assignee_id: !exists(json, 'assignee_id') ? undefined : json['assignee_id']
  };
}
function IssuesFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status: value.status,
    since: value.since === undefined ? undefined : new Date(value.since).toISOString(),
    assignee_id: value.assignee_id
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
var IssueTrackingEventType;
(function (IssueTrackingEventType) {
  IssueTrackingEventType["Star"] = "*";
  IssueTrackingEventType["issue_tracking_ticket_created"] = "issue-tracking.ticket.created";
  IssueTrackingEventType["issue_tracking_ticket_updated"] = "issue-tracking.ticket.updated";
  IssueTrackingEventType["issue_tracking_ticket_deleted"] = "issue-tracking.ticket.deleted";
})(IssueTrackingEventType || (IssueTrackingEventType = {}));
function IssueTrackingEventTypeFromJSON(json) {
  return IssueTrackingEventTypeFromJSONTyped(json);
}
function IssueTrackingEventTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function IssueTrackingEventTypeToJSON(value) {
  return value;
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
var LeadEventType;
(function (LeadEventType) {
  LeadEventType["Star"] = "*";
  LeadEventType["lead_lead_created"] = "lead.lead.created";
  LeadEventType["lead_lead_updated"] = "lead.lead.updated";
  LeadEventType["lead_lead_deleted"] = "lead.lead.deleted";
})(LeadEventType || (LeadEventType = {}));
function LeadEventTypeFromJSON(json) {
  return LeadEventTypeFromJSONTyped(json);
}
function LeadEventTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function LeadEventTypeToJSON(value) {
  return value;
}

/* tslint:disable */
function LeadsFilterFromJSON(json) {
  return LeadsFilterFromJSONTyped(json);
}
function LeadsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    email: !exists(json, 'email') ? undefined : json['email']
  };
}
function LeadsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    first_name: value.first_name,
    last_name: value.last_name,
    email: value.email
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var LeadsSortBy;
(function (LeadsSortBy) {
  LeadsSortBy["created_at"] = "created_at";
  LeadsSortBy["updated_at"] = "updated_at";
  LeadsSortBy["name"] = "name";
  LeadsSortBy["first_name"] = "first_name";
  LeadsSortBy["last_name"] = "last_name";
  LeadsSortBy["email"] = "email";
})(LeadsSortBy || (LeadsSortBy = {}));
function LeadsSortFromJSON(json) {
  return LeadsSortFromJSONTyped(json);
}
function LeadsSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function LeadsSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
function LedgerAccountsFromJSON(json) {
  return LedgerAccountsFromJSONTyped(json);
}
function LedgerAccountsFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function LedgerAccountsToJSON(value) {
  return value;
}

/* tslint:disable */
function LogsFilterFromJSON(json) {
  return LogsFilterFromJSONTyped(json);
}
function LogsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    connector_id: !exists(json, 'connector_id') ? undefined : json['connector_id'],
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    exclude_unified_apis: !exists(json, 'exclude_unified_apis') ? undefined : json['exclude_unified_apis']
  };
}
function LogsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    connector_id: value.connector_id,
    status_code: value.status_code,
    exclude_unified_apis: value.exclude_unified_apis
  };
}

/* tslint:disable */
function ModelErrorFromJSON(json) {
  return ModelErrorFromJSONTyped(json);
}
function ModelErrorFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    code: !exists(json, 'code') ? undefined : json['code'],
    message: !exists(json, 'message') ? undefined : json['message']
  };
}
function ModelErrorToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {};
}

/* tslint:disable */
function ModifierGroupFilterFromJSON(json) {
  return ModifierGroupFilterFromJSONTyped(json);
}
function ModifierGroupFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    modifier_group_id: !exists(json, 'modifier_group_id') ? undefined : json['modifier_group_id']
  };
}
function ModifierGroupFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    modifier_group_id: value.modifier_group_id
  };
}

/* tslint:disable */
function NotFoundResponseFromJSON(json) {
  return NotFoundResponseFromJSONTyped(json);
}
function NotFoundResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    error: !exists(json, 'error') ? undefined : json['error'],
    type_name: !exists(json, 'type_name') ? undefined : json['type_name'],
    message: !exists(json, 'message') ? undefined : json['message'],
    detail: !exists(json, 'detail') ? undefined : json['detail'],
    ref: !exists(json, 'ref') ? undefined : json['ref']
  };
}
function NotFoundResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    error: value.error,
    type_name: value.type_name,
    message: value.message,
    detail: value.detail,
    ref: value.ref
  };
}

/* tslint:disable */
function NotImplementedResponseFromJSON(json) {
  return NotImplementedResponseFromJSONTyped(json);
}
function NotImplementedResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    error: !exists(json, 'error') ? undefined : json['error'],
    type_name: !exists(json, 'type_name') ? undefined : json['type_name'],
    message: !exists(json, 'message') ? undefined : json['message'],
    detail: !exists(json, 'detail') ? undefined : json['detail'],
    ref: !exists(json, 'ref') ? undefined : json['ref']
  };
}
function NotImplementedResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    error: value.error,
    type_name: value.type_name,
    message: value.message,
    detail: value.detail,
    ref: value.ref
  };
}

/* tslint:disable */
function OfferFromJSON(json) {
  return OfferFromJSONTyped(json);
}
function OfferFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    application_id: !exists(json, 'application_id') ? undefined : json['application_id'],
    updated_by: !exists(json, 'updated_by') ? undefined : json['updated_by'],
    created_by: !exists(json, 'created_by') ? undefined : json['created_by'],
    updated_at: !exists(json, 'updated_at') ? undefined : json['updated_at'] === null ? null : new Date(json['updated_at']),
    created_at: !exists(json, 'created_at') ? undefined : json['created_at'] === null ? null : new Date(json['created_at'])
  };
}
function OfferToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    application_id: value.application_id
  };
}

/* tslint:disable */
function OpportunitiesFilterFromJSON(json) {
  return OpportunitiesFilterFromJSONTyped(json);
}
function OpportunitiesFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    title: !exists(json, 'title') ? undefined : json['title'],
    status: !exists(json, 'status') ? undefined : json['status'],
    monetary_amount: !exists(json, 'monetary_amount') ? undefined : json['monetary_amount'],
    win_probability: !exists(json, 'win_probability') ? undefined : json['win_probability'],
    company_id: !exists(json, 'company_id') ? undefined : json['company_id']
  };
}
function OpportunitiesFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    title: value.title,
    status: value.status,
    monetary_amount: value.monetary_amount,
    win_probability: value.win_probability,
    company_id: value.company_id
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var OpportunitiesSortBy;
(function (OpportunitiesSortBy) {
  OpportunitiesSortBy["created_at"] = "created_at";
  OpportunitiesSortBy["updated_at"] = "updated_at";
  OpportunitiesSortBy["title"] = "title";
  OpportunitiesSortBy["win_probability"] = "win_probability";
  OpportunitiesSortBy["monetary_amount"] = "monetary_amount";
  OpportunitiesSortBy["status"] = "status";
})(OpportunitiesSortBy || (OpportunitiesSortBy = {}));
function OpportunitiesSortFromJSON(json) {
  return OpportunitiesSortFromJSONTyped(json);
}
function OpportunitiesSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function OpportunitiesSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

/* tslint:disable */
function PassThroughQueryFromJSON(json) {
  return PassThroughQueryFromJSONTyped(json);
}
function PassThroughQueryFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    ...json,
    example_downstream_property: !exists(json, 'example_downstream_property') ? undefined : json['example_downstream_property']
  };
}
function PassThroughQueryToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    ...value,
    example_downstream_property: value.example_downstream_property
  };
}

/* tslint:disable */
function PaymentRequiredResponseFromJSON(json) {
  return PaymentRequiredResponseFromJSONTyped(json);
}
function PaymentRequiredResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    error: !exists(json, 'error') ? undefined : json['error'],
    type_name: !exists(json, 'type_name') ? undefined : json['type_name'],
    message: !exists(json, 'message') ? undefined : json['message'],
    detail: !exists(json, 'detail') ? undefined : json['detail'],
    ref: !exists(json, 'ref') ? undefined : json['ref']
  };
}
function PaymentRequiredResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    error: value.error,
    type_name: value.type_name,
    message: value.message,
    detail: value.detail,
    ref: value.ref
  };
}

/* tslint:disable */
function PaymentsFilterFromJSON(json) {
  return PaymentsFilterFromJSONTyped(json);
}
function PaymentsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    invoice_number: !exists(json, 'invoice_number') ? undefined : json['invoice_number']
  };
}
function PaymentsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    invoice_number: value.invoice_number
  };
}

/* tslint:disable */
function PayrollsFilterFromJSON(json) {
  return PayrollsFilterFromJSONTyped(json);
}
function PayrollsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    start_date: !exists(json, 'start_date') ? undefined : json['start_date'],
    end_date: !exists(json, 'end_date') ? undefined : json['end_date']
  };
}
function PayrollsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    start_date: value.start_date,
    end_date: value.end_date
  };
}

/* tslint:disable */
function PayrollTotalsFromJSON(json) {
  return PayrollTotalsFromJSONTyped(json);
}
function PayrollTotalsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    company_debit: !exists(json, 'company_debit') ? undefined : json['company_debit'],
    tax_debit: !exists(json, 'tax_debit') ? undefined : json['tax_debit'],
    check_amount: !exists(json, 'check_amount') ? undefined : json['check_amount'],
    net_pay: !exists(json, 'net_pay') ? undefined : json['net_pay'],
    gross_pay: !exists(json, 'gross_pay') ? undefined : json['gross_pay'],
    employer_taxes: !exists(json, 'employer_taxes') ? undefined : json['employer_taxes'],
    employee_taxes: !exists(json, 'employee_taxes') ? undefined : json['employee_taxes'],
    employer_benefit_contributions: !exists(json, 'employer_benefit_contributions') ? undefined : json['employer_benefit_contributions'],
    employee_benefit_deductions: !exists(json, 'employee_benefit_deductions') ? undefined : json['employee_benefit_deductions']
  };
}
function PayrollTotalsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    company_debit: value.company_debit,
    tax_debit: value.tax_debit,
    check_amount: value.check_amount,
    net_pay: value.net_pay,
    gross_pay: value.gross_pay,
    employer_taxes: value.employer_taxes,
    employee_taxes: value.employee_taxes,
    employer_benefit_contributions: value.employer_benefit_contributions,
    employee_benefit_deductions: value.employee_benefit_deductions
  };
}

/* tslint:disable */
function ProfitAndLossFilterFromJSON(json) {
  return ProfitAndLossFilterFromJSONTyped(json);
}
function ProfitAndLossFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    customer_id: !exists(json, 'customer_id') ? undefined : json['customer_id'],
    start_date: !exists(json, 'start_date') ? undefined : json['start_date'],
    end_date: !exists(json, 'end_date') ? undefined : json['end_date']
  };
}
function ProfitAndLossFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    customer_id: value.customer_id,
    start_date: value.start_date,
    end_date: value.end_date
  };
}

/* tslint:disable */
function ProfitAndLossRecordFromJSON(json) {
  return ProfitAndLossRecordFromJSONTyped(json);
}
function ProfitAndLossRecordFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: json['type'],
    id: !exists(json, 'id') ? undefined : json['id'],
    title: !exists(json, 'title') ? undefined : json['title'],
    value: !exists(json, 'value') ? undefined : json['value']
  };
}
function ProfitAndLossRecordToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    id: value.id,
    title: value.title,
    value: value.value
  };
}

/* tslint:disable */
function ProfitAndLossSectionFromJSON(json) {
  return ProfitAndLossSectionFromJSONTyped(json);
}
function ProfitAndLossSectionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: json['type'],
    id: !exists(json, 'id') ? undefined : json['id'],
    title: !exists(json, 'title') ? undefined : json['title'],
    total: !exists(json, 'total') ? undefined : json['total'],
    records: !exists(json, 'records') ? undefined : ProfitAndLossRecordsFromJSON(json['records'])
  };
}
function ProfitAndLossSectionToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    id: value.id,
    title: value.title,
    total: value.total,
    records: ProfitAndLossRecordsToJSON(value.records)
  };
}

function ResolveWebhookEventRequestFromJSON(json) {
  return ResolveWebhookEventRequestFromJSONTyped(json);
}
function ResolveWebhookEventRequestFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ResolveWebhookEventRequestToJSON(value) {
  return value;
}

function ResolveWebhookEventsRequestFromJSON(json) {
  return ResolveWebhookEventsRequestFromJSONTyped(json);
}
function ResolveWebhookEventsRequestFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function ResolveWebhookEventsRequestToJSON(value) {
  return value;
}

/* tslint:disable */
function ResolveWebhookResponseFromJSON(json) {
  return ResolveWebhookResponseFromJSONTyped(json);
}
function ResolveWebhookResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    request_id: !exists(json, 'request_id') ? undefined : json['request_id'],
    timestamp: !exists(json, 'timestamp') ? undefined : json['timestamp']
  };
}
function ResolveWebhookResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    request_id: value.request_id,
    timestamp: value.timestamp
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var SessionSettingsAllowActions;
(function (SessionSettingsAllowActions) {
  SessionSettingsAllowActions["delete"] = "delete";
  SessionSettingsAllowActions["disconnect"] = "disconnect";
  SessionSettingsAllowActions["reauthorize"] = "reauthorize";
  SessionSettingsAllowActions["disable"] = "disable";
})(SessionSettingsAllowActions || (SessionSettingsAllowActions = {}));
function SessionSettingsFromJSON(json) {
  return SessionSettingsFromJSONTyped(json);
}
function SessionSettingsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    unified_apis: !exists(json, 'unified_apis') ? undefined : json['unified_apis'].map(UnifiedApiIdFromJSON),
    hide_resource_settings: !exists(json, 'hide_resource_settings') ? undefined : json['hide_resource_settings'],
    sandbox_mode: !exists(json, 'sandbox_mode') ? undefined : json['sandbox_mode'],
    isolation_mode: !exists(json, 'isolation_mode') ? undefined : json['isolation_mode'],
    session_length: !exists(json, 'session_length') ? undefined : json['session_length'],
    show_logs: !exists(json, 'show_logs') ? undefined : json['show_logs'],
    show_suggestions: !exists(json, 'show_suggestions') ? undefined : json['show_suggestions'],
    show_sidebar: !exists(json, 'show_sidebar') ? undefined : json['show_sidebar'],
    auto_redirect: !exists(json, 'auto_redirect') ? undefined : json['auto_redirect'],
    hide_guides: !exists(json, 'hide_guides') ? undefined : json['hide_guides'],
    allow_actions: !exists(json, 'allow_actions') ? undefined : json['allow_actions']
  };
}
function SessionSettingsToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    unified_apis: value.unified_apis === undefined ? undefined : value.unified_apis.map(UnifiedApiIdToJSON),
    hide_resource_settings: value.hide_resource_settings,
    sandbox_mode: value.sandbox_mode,
    isolation_mode: value.isolation_mode,
    session_length: value.session_length,
    show_logs: value.show_logs,
    show_suggestions: value.show_suggestions,
    show_sidebar: value.show_sidebar,
    auto_redirect: value.auto_redirect,
    hide_guides: value.hide_guides,
    allow_actions: value.allow_actions
  };
}

/* tslint:disable */
function SessionThemeFromJSON(json) {
  return SessionThemeFromJSONTyped(json);
}
function SessionThemeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    favicon: !exists(json, 'favicon') ? undefined : json['favicon'],
    logo: !exists(json, 'logo') ? undefined : json['logo'],
    primary_color: !exists(json, 'primary_color') ? undefined : json['primary_color'],
    sidepanel_background_color: !exists(json, 'sidepanel_background_color') ? undefined : json['sidepanel_background_color'],
    sidepanel_text_color: !exists(json, 'sidepanel_text_color') ? undefined : json['sidepanel_text_color'],
    vault_name: !exists(json, 'vault_name') ? undefined : json['vault_name'],
    privacy_url: !exists(json, 'privacy_url') ? undefined : json['privacy_url'],
    terms_url: !exists(json, 'terms_url') ? undefined : json['terms_url']
  };
}
function SessionThemeToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    favicon: value.favicon,
    logo: value.logo,
    primary_color: value.primary_color,
    sidepanel_background_color: value.sidepanel_background_color,
    sidepanel_text_color: value.sidepanel_text_color,
    vault_name: value.vault_name,
    privacy_url: value.privacy_url,
    terms_url: value.terms_url
  };
}

/* tslint:disable */
function SessionFromJSON(json) {
  return SessionFromJSONTyped(json);
}
function SessionFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    consumer_metadata: !exists(json, 'consumer_metadata') ? undefined : ConsumerMetadataFromJSON(json['consumer_metadata']),
    redirect_uri: !exists(json, 'redirect_uri') ? undefined : json['redirect_uri'],
    settings: !exists(json, 'settings') ? undefined : SessionSettingsFromJSON(json['settings']),
    theme: !exists(json, 'theme') ? undefined : SessionThemeFromJSON(json['theme']),
    custom_consumer_settings: !exists(json, 'custom_consumer_settings') ? undefined : json['custom_consumer_settings']
  };
}
function SessionToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    consumer_metadata: ConsumerMetadataToJSON(value.consumer_metadata),
    redirect_uri: value.redirect_uri,
    settings: SessionSettingsToJSON(value.settings),
    theme: SessionThemeToJSON(value.theme),
    custom_consumer_settings: value.custom_consumer_settings
  };
}

/* tslint:disable */
function SuppliersFilterFromJSON(json) {
  return SuppliersFilterFromJSONTyped(json);
}
function SuppliersFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    company_name: !exists(json, 'company_name') ? undefined : json['company_name'],
    display_name: !exists(json, 'display_name') ? undefined : json['display_name'],
    first_name: !exists(json, 'first_name') ? undefined : json['first_name'],
    last_name: !exists(json, 'last_name') ? undefined : json['last_name'],
    email: !exists(json, 'email') ? undefined : json['email']
  };
}
function SuppliersFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    company_name: value.company_name,
    display_name: value.display_name,
    first_name: value.first_name,
    last_name: value.last_name,
    email: value.email
  };
}

/* tslint:disable */
function TaxRatesFilterFromJSON(json) {
  return TaxRatesFilterFromJSONTyped(json);
}
function TaxRatesFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    assets: !exists(json, 'assets') ? undefined : json['assets'],
    equity: !exists(json, 'equity') ? undefined : json['equity'],
    expenses: !exists(json, 'expenses') ? undefined : json['expenses'],
    liabilities: !exists(json, 'liabilities') ? undefined : json['liabilities'],
    revenue: !exists(json, 'revenue') ? undefined : json['revenue']
  };
}
function TaxRatesFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    assets: value.assets,
    equity: value.equity,
    expenses: value.expenses,
    liabilities: value.liabilities,
    revenue: value.revenue
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var TicketsSortBy;
(function (TicketsSortBy) {
  TicketsSortBy["created_at"] = "created_at";
  TicketsSortBy["updated_at"] = "updated_at";
})(TicketsSortBy || (TicketsSortBy = {}));
function TicketsSortFromJSON(json) {
  return TicketsSortFromJSONTyped(json);
}
function TicketsSortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    by: !exists(json, 'by') ? undefined : json['by'],
    direction: !exists(json, 'direction') ? undefined : SortDirectionFromJSON(json['direction'])
  };
}
function TicketsSortToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    by: value.by,
    direction: SortDirectionToJSON(value.direction)
  };
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var TimeOffRequestsFilterTimeOffRequestStatus;
(function (TimeOffRequestsFilterTimeOffRequestStatus) {
  TimeOffRequestsFilterTimeOffRequestStatus["requested"] = "requested";
  TimeOffRequestsFilterTimeOffRequestStatus["approved"] = "approved";
  TimeOffRequestsFilterTimeOffRequestStatus["declined"] = "declined";
  TimeOffRequestsFilterTimeOffRequestStatus["cancelled"] = "cancelled";
  TimeOffRequestsFilterTimeOffRequestStatus["deleted"] = "deleted";
  TimeOffRequestsFilterTimeOffRequestStatus["other"] = "other";
})(TimeOffRequestsFilterTimeOffRequestStatus || (TimeOffRequestsFilterTimeOffRequestStatus = {}));
function TimeOffRequestsFilterFromJSON(json) {
  return TimeOffRequestsFilterFromJSONTyped(json);
}
function TimeOffRequestsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    start_date: !exists(json, 'start_date') ? undefined : json['start_date'],
    end_date: !exists(json, 'end_date') ? undefined : json['end_date'],
    employee_id: !exists(json, 'employee_id') ? undefined : json['employee_id'],
    time_off_request_status: !exists(json, 'time_off_request_status') ? undefined : json['time_off_request_status']
  };
}
function TimeOffRequestsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    start_date: value.start_date,
    end_date: value.end_date,
    employee_id: value.employee_id,
    time_off_request_status: value.time_off_request_status
  };
}

/* tslint:disable */
function TooManyRequestsResponseDetailFromJSON(json) {
  return TooManyRequestsResponseDetailFromJSONTyped(json);
}
function TooManyRequestsResponseDetailFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    context: !exists(json, 'context') ? undefined : json['context'],
    error: !exists(json, 'error') ? undefined : json['error']
  };
}
function TooManyRequestsResponseDetailToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    context: value.context,
    error: value.error
  };
}

/* tslint:disable */
function TooManyRequestsResponseFromJSON(json) {
  return TooManyRequestsResponseFromJSONTyped(json);
}
function TooManyRequestsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    error: !exists(json, 'error') ? undefined : json['error'],
    type_name: !exists(json, 'type_name') ? undefined : json['type_name'],
    message: !exists(json, 'message') ? undefined : json['message'],
    detail: !exists(json, 'detail') ? undefined : TooManyRequestsResponseDetailFromJSON(json['detail']),
    ref: !exists(json, 'ref') ? undefined : json['ref']
  };
}
function TooManyRequestsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    error: value.error,
    type_name: value.type_name,
    message: value.message,
    detail: TooManyRequestsResponseDetailToJSON(value.detail),
    ref: value.ref
  };
}

/* tslint:disable */
function UnauthorizedResponseFromJSON(json) {
  return UnauthorizedResponseFromJSONTyped(json);
}
function UnauthorizedResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    error: !exists(json, 'error') ? undefined : json['error'],
    type_name: !exists(json, 'type_name') ? undefined : json['type_name'],
    message: !exists(json, 'message') ? undefined : json['message'],
    detail: !exists(json, 'detail') ? undefined : json['detail'],
    ref: !exists(json, 'ref') ? undefined : json['ref']
  };
}
function UnauthorizedResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    error: value.error,
    type_name: value.type_name,
    message: value.message,
    detail: value.detail,
    ref: value.ref
  };
}

/* tslint:disable */
function UnexpectedErrorResponseFromJSON(json) {
  return UnexpectedErrorResponseFromJSONTyped(json);
}
function UnexpectedErrorResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    error: !exists(json, 'error') ? undefined : json['error'],
    type_name: !exists(json, 'type_name') ? undefined : json['type_name'],
    message: !exists(json, 'message') ? undefined : json['message'],
    detail: !exists(json, 'detail') ? undefined : json['detail'],
    ref: !exists(json, 'ref') ? undefined : json['ref']
  };
}
function UnexpectedErrorResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    error: value.error,
    type_name: value.type_name,
    message: value.message,
    detail: value.detail,
    ref: value.ref
  };
}

/* tslint:disable */
function UnprocessableResponseFromJSON(json) {
  return UnprocessableResponseFromJSONTyped(json);
}
function UnprocessableResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: !exists(json, 'status_code') ? undefined : json['status_code'],
    error: !exists(json, 'error') ? undefined : json['error'],
    type_name: !exists(json, 'type_name') ? undefined : json['type_name'],
    message: !exists(json, 'message') ? undefined : json['message'],
    detail: !exists(json, 'detail') ? undefined : json['detail'],
    ref: !exists(json, 'ref') ? undefined : json['ref']
  };
}
function UnprocessableResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    error: value.error,
    type_name: value.type_name,
    message: value.message,
    detail: value.detail,
    ref: value.ref
  };
}

/* tslint:disable */
function UpdateActivityResponseFromJSON(json) {
  return UpdateActivityResponseFromJSONTyped(json);
}
function UpdateActivityResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateActivityResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateApplicantResponseFromJSON(json) {
  return UpdateApplicantResponseFromJSONTyped(json);
}
function UpdateApplicantResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateApplicantResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateApplicationResponseFromJSON(json) {
  return UpdateApplicationResponseFromJSONTyped(json);
}
function UpdateApplicationResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateApplicationResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateBillResponseFromJSON(json) {
  return UpdateBillResponseFromJSONTyped(json);
}
function UpdateBillResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateBillResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateCommentResponseFromJSON(json) {
  return UpdateCommentResponseFromJSONTyped(json);
}
function UpdateCommentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateCommentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateCompanyResponseFromJSON(json) {
  return UpdateCompanyResponseFromJSONTyped(json);
}
function UpdateCompanyResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateCompanyResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateConnectionResponseFromJSON(json) {
  return UpdateConnectionResponseFromJSONTyped(json);
}
function UpdateConnectionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ConnectionFromJSON(json['data'])
  };
}
function UpdateConnectionResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ConnectionToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateConsumerRequestFromJSON(json) {
  return UpdateConsumerRequestFromJSONTyped(json);
}
function UpdateConsumerRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    metadata: !exists(json, 'metadata') ? undefined : ConsumerMetadataFromJSON(json['metadata'])
  };
}
function UpdateConsumerRequestToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    metadata: ConsumerMetadataToJSON(value.metadata)
  };
}

/* tslint:disable */
function UpdateConsumerResponseFromJSON(json) {
  return UpdateConsumerResponseFromJSONTyped(json);
}
function UpdateConsumerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: ConsumerFromJSON(json['data'])
  };
}
function UpdateConsumerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: ConsumerToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateContactResponseFromJSON(json) {
  return UpdateContactResponseFromJSONTyped(json);
}
function UpdateContactResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateContactResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateCreditNoteResponseFromJSON(json) {
  return UpdateCreditNoteResponseFromJSONTyped(json);
}
function UpdateCreditNoteResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateCreditNoteResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateCustomerResponseFromJSON(json) {
  return UpdateCustomerResponseFromJSONTyped(json);
}
function UpdateCustomerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateCustomerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateDepartmentResponseFromJSON(json) {
  return UpdateDepartmentResponseFromJSONTyped(json);
}
function UpdateDepartmentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateDepartmentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateDriveGroupResponseFromJSON(json) {
  return UpdateDriveGroupResponseFromJSONTyped(json);
}
function UpdateDriveGroupResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateDriveGroupResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateDriveResponseFromJSON(json) {
  return UpdateDriveResponseFromJSONTyped(json);
}
function UpdateDriveResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateDriveResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateEcommerceCustomerResponseFromJSON(json) {
  return UpdateEcommerceCustomerResponseFromJSONTyped(json);
}
function UpdateEcommerceCustomerResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateEcommerceCustomerResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateEcommerceOrderResponseFromJSON(json) {
  return UpdateEcommerceOrderResponseFromJSONTyped(json);
}
function UpdateEcommerceOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateEcommerceOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateEmployeeResponseFromJSON(json) {
  return UpdateEmployeeResponseFromJSONTyped(json);
}
function UpdateEmployeeResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateEmployeeResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateFileRequestFromJSON(json) {
  return UpdateFileRequestFromJSONTyped(json);
}
function UpdateFileRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    parent_folder_id: !exists(json, 'parent_folder_id') ? undefined : json['parent_folder_id']
  };
}
function UpdateFileRequestToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description,
    parent_folder_id: value.parent_folder_id
  };
}

/* tslint:disable */
function UpdateFileResponseFromJSON(json) {
  return UpdateFileResponseFromJSONTyped(json);
}
function UpdateFileResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateFileResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateFolderRequestFromJSON(json) {
  return UpdateFolderRequestFromJSONTyped(json);
}
function UpdateFolderRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    parent_folder_id: !exists(json, 'parent_folder_id') ? undefined : json['parent_folder_id']
  };
}
function UpdateFolderRequestToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description,
    parent_folder_id: value.parent_folder_id
  };
}

/* tslint:disable */
function UpdateFolderResponseFromJSON(json) {
  return UpdateFolderResponseFromJSONTyped(json);
}
function UpdateFolderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateFolderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateHrisCompanyResponseFromJSON(json) {
  return UpdateHrisCompanyResponseFromJSONTyped(json);
}
function UpdateHrisCompanyResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateHrisCompanyResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateInvoiceItemsResponseFromJSON(json) {
  return UpdateInvoiceItemsResponseFromJSONTyped(json);
}
function UpdateInvoiceItemsResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateInvoiceItemsResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateInvoiceResponseFromJSON(json) {
  return UpdateInvoiceResponseFromJSONTyped(json);
}
function UpdateInvoiceResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: InvoiceResponseFromJSON(json['data'])
  };
}
function UpdateInvoiceResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: InvoiceResponseToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateItemResponseFromJSON(json) {
  return UpdateItemResponseFromJSONTyped(json);
}
function UpdateItemResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateItemResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateJobResponseFromJSON(json) {
  return UpdateJobResponseFromJSONTyped(json);
}
function UpdateJobResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateJobResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateJournalEntryResponseFromJSON(json) {
  return UpdateJournalEntryResponseFromJSONTyped(json);
}
function UpdateJournalEntryResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateJournalEntryResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateLeadResponseFromJSON(json) {
  return UpdateLeadResponseFromJSONTyped(json);
}
function UpdateLeadResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateLeadResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateLedgerAccountResponseFromJSON(json) {
  return UpdateLedgerAccountResponseFromJSONTyped(json);
}
function UpdateLedgerAccountResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateLedgerAccountResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateLocationResponseFromJSON(json) {
  return UpdateLocationResponseFromJSONTyped(json);
}
function UpdateLocationResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateLocationResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateMerchantResponseFromJSON(json) {
  return UpdateMerchantResponseFromJSONTyped(json);
}
function UpdateMerchantResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateMerchantResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateMessageResponseFromJSON(json) {
  return UpdateMessageResponseFromJSONTyped(json);
}
function UpdateMessageResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateMessageResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateModifierGroupResponseFromJSON(json) {
  return UpdateModifierGroupResponseFromJSONTyped(json);
}
function UpdateModifierGroupResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateModifierGroupResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateModifierResponseFromJSON(json) {
  return UpdateModifierResponseFromJSONTyped(json);
}
function UpdateModifierResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateModifierResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateNoteResponseFromJSON(json) {
  return UpdateNoteResponseFromJSONTyped(json);
}
function UpdateNoteResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateNoteResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateOpportunityResponseFromJSON(json) {
  return UpdateOpportunityResponseFromJSONTyped(json);
}
function UpdateOpportunityResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateOpportunityResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateOrderResponseFromJSON(json) {
  return UpdateOrderResponseFromJSONTyped(json);
}
function UpdateOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateOrderTypeResponseFromJSON(json) {
  return UpdateOrderTypeResponseFromJSONTyped(json);
}
function UpdateOrderTypeResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateOrderTypeResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdatePaymentResponseFromJSON(json) {
  return UpdatePaymentResponseFromJSONTyped(json);
}
function UpdatePaymentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdatePaymentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdatePipelineResponseFromJSON(json) {
  return UpdatePipelineResponseFromJSONTyped(json);
}
function UpdatePipelineResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdatePipelineResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdatePosPaymentResponseFromJSON(json) {
  return UpdatePosPaymentResponseFromJSONTyped(json);
}
function UpdatePosPaymentResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdatePosPaymentResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateProductResponseFromJSON(json) {
  return UpdateProductResponseFromJSONTyped(json);
}
function UpdateProductResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateProductResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdatePurchaseOrderResponseFromJSON(json) {
  return UpdatePurchaseOrderResponseFromJSONTyped(json);
}
function UpdatePurchaseOrderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdatePurchaseOrderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateSharedLinkResponseFromJSON(json) {
  return UpdateSharedLinkResponseFromJSONTyped(json);
}
function UpdateSharedLinkResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateSharedLinkResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateSupplierResponseFromJSON(json) {
  return UpdateSupplierResponseFromJSONTyped(json);
}
function UpdateSupplierResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateSupplierResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateTaxRateResponseFromJSON(json) {
  return UpdateTaxRateResponseFromJSONTyped(json);
}
function UpdateTaxRateResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateTaxRateResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateTenderResponseFromJSON(json) {
  return UpdateTenderResponseFromJSONTyped(json);
}
function UpdateTenderResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateTenderResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateTicketResponseFromJSON(json) {
  return UpdateTicketResponseFromJSONTyped(json);
}
function UpdateTicketResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateTicketResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateTimeOffRequestResponseFromJSON(json) {
  return UpdateTimeOffRequestResponseFromJSONTyped(json);
}
function UpdateTimeOffRequestResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateTimeOffRequestResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateUploadSessionResponseFromJSON(json) {
  return UpdateUploadSessionResponseFromJSONTyped(json);
}
function UpdateUploadSessionResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateUploadSessionResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateUserResponseFromJSON(json) {
  return UpdateUserResponseFromJSONTyped(json);
}
function UpdateUserResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    service: json['service'],
    resource: json['resource'],
    operation: json['operation'],
    data: UnifiedIdFromJSON(json['data'])
  };
}
function UpdateUserResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    service: value.service,
    resource: value.resource,
    operation: value.operation,
    data: UnifiedIdToJSON(value.data)
  };
}

/* tslint:disable */
function UpdateWebhookRequestFromJSON(json) {
  return UpdateWebhookRequestFromJSONTyped(json);
}
function UpdateWebhookRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    description: !exists(json, 'description') ? undefined : json['description'],
    status: !exists(json, 'status') ? undefined : StatusFromJSON(json['status']),
    delivery_url: !exists(json, 'delivery_url') ? undefined : json['delivery_url'],
    events: !exists(json, 'events') ? undefined : json['events'].map(WebhookEventTypeFromJSON)
  };
}
function UpdateWebhookRequestToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    description: value.description,
    status: StatusToJSON(value.status),
    delivery_url: value.delivery_url,
    events: value.events === undefined ? undefined : value.events.map(WebhookEventTypeToJSON)
  };
}

/* tslint:disable */
function UpdateWebhookResponseFromJSON(json) {
  return UpdateWebhookResponseFromJSONTyped(json);
}
function UpdateWebhookResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    status_code: json['status_code'],
    status: json['status'],
    data: WebhookFromJSON(json['data'])
  };
}
function UpdateWebhookResponseToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status_code: value.status_code,
    status: value.status,
    data: WebhookToJSON(value.data)
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Apideck
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
var VaultEventType;
(function (VaultEventType) {
  VaultEventType["Star"] = "*";
  VaultEventType["vault_connection_created"] = "vault.connection.created";
  VaultEventType["vault_connection_updated"] = "vault.connection.updated";
  VaultEventType["vault_connection_disabled"] = "vault.connection.disabled";
  VaultEventType["vault_connection_deleted"] = "vault.connection.deleted";
  VaultEventType["vault_connection_callable"] = "vault.connection.callable";
  VaultEventType["vault_connection_revoked"] = "vault.connection.revoked";
  VaultEventType["vault_connection_token_refresh_failed"] = "vault.connection.token_refresh.failed";
})(VaultEventType || (VaultEventType = {}));
function VaultEventTypeFromJSON(json) {
  return VaultEventTypeFromJSONTyped(json);
}
function VaultEventTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function VaultEventTypeToJSON(value) {
  return value;
}

/* tslint:disable */
/**
 * @export
 * @enum {string}
 */
var WebhookEventUnifiedApi;
(function (WebhookEventUnifiedApi) {
  WebhookEventUnifiedApi["accounting"] = "accounting";
  WebhookEventUnifiedApi["ats"] = "ats";
  WebhookEventUnifiedApi["calendar"] = "calendar";
  WebhookEventUnifiedApi["crm"] = "crm";
  WebhookEventUnifiedApi["csp"] = "csp";
  WebhookEventUnifiedApi["customer_support"] = "customer-support";
  WebhookEventUnifiedApi["ecommerce"] = "ecommerce";
  WebhookEventUnifiedApi["email"] = "email";
  WebhookEventUnifiedApi["email_marketing"] = "email-marketing";
  WebhookEventUnifiedApi["expense_management"] = "expense-management";
  WebhookEventUnifiedApi["file_storage"] = "file-storage";
  WebhookEventUnifiedApi["form"] = "form";
  WebhookEventUnifiedApi["hris"] = "hris";
  WebhookEventUnifiedApi["lead"] = "lead";
  WebhookEventUnifiedApi["payroll"] = "payroll";
  WebhookEventUnifiedApi["pos"] = "pos";
  WebhookEventUnifiedApi["procurement"] = "procurement";
  WebhookEventUnifiedApi["project_management"] = "project-management";
  WebhookEventUnifiedApi["script"] = "script";
  WebhookEventUnifiedApi["sms"] = "sms";
  WebhookEventUnifiedApi["spreadsheet"] = "spreadsheet";
  WebhookEventUnifiedApi["team_messaging"] = "team-messaging";
  WebhookEventUnifiedApi["issue_tracking"] = "issue-tracking";
  WebhookEventUnifiedApi["time_registration"] = "time-registration";
  WebhookEventUnifiedApi["transactional_email"] = "transactional-email";
  WebhookEventUnifiedApi["vault"] = "vault";
  WebhookEventUnifiedApi["data_warehouse"] = "data-warehouse";
})(WebhookEventUnifiedApi || (WebhookEventUnifiedApi = {}));
function WebhookEventFromJSON(json) {
  return WebhookEventFromJSONTyped(json);
}
function WebhookEventFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    event_id: !exists(json, 'event_id') ? undefined : json['event_id'],
    unified_api: !exists(json, 'unified_api') ? undefined : json['unified_api'],
    service_id: !exists(json, 'service_id') ? undefined : json['service_id'],
    consumer_id: !exists(json, 'consumer_id') ? undefined : json['consumer_id'],
    entity_id: !exists(json, 'entity_id') ? undefined : json['entity_id'],
    entity_type: !exists(json, 'entity_type') ? undefined : json['entity_type'],
    entity_url: !exists(json, 'entity_url') ? undefined : json['entity_url'],
    execution_attempt: !exists(json, 'execution_attempt') ? undefined : json['execution_attempt'],
    occurred_at: !exists(json, 'occurred_at') ? undefined : json['occurred_at']
  };
}
function WebhookEventToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    event_id: value.event_id,
    unified_api: value.unified_api,
    service_id: value.service_id,
    consumer_id: value.consumer_id,
    entity_id: value.entity_id,
    entity_type: value.entity_type,
    entity_url: value.entity_url,
    execution_attempt: value.execution_attempt,
    occurred_at: value.occurred_at
  };
}

/* tslint:disable */
function WebhookEventLogsFilterServiceFromJSON(json) {
  return WebhookEventLogsFilterServiceFromJSONTyped(json);
}
function WebhookEventLogsFilterServiceFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id']
  };
}
function WebhookEventLogsFilterServiceToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id
  };
}

/* tslint:disable */
function WebhookEventLogsFilterFromJSON(json) {
  return WebhookEventLogsFilterFromJSONTyped(json);
}
function WebhookEventLogsFilterFromJSONTyped(json, ignoreDiscriminator) {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    exclude_apis: !exists(json, 'exclude_apis') ? undefined : json['exclude_apis'],
    service: !exists(json, 'service') ? undefined : WebhookEventLogsFilterServiceFromJSON(json['service']),
    consumer_id: !exists(json, 'consumer_id') ? undefined : json['consumer_id'],
    entity_type: !exists(json, 'entity_type') ? undefined : json['entity_type'],
    event_type: !exists(json, 'event_type') ? undefined : json['event_type']
  };
}
function WebhookEventLogsFilterToJSON(value) {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    exclude_apis: value.exclude_apis,
    service: WebhookEventLogsFilterServiceToJSON(value.service),
    consumer_id: value.consumer_id,
    entity_type: value.entity_type,
    event_type: value.event_type
  };
}

/* tslint:disable */
/**
 *
 */
class AccountingApi extends BaseAPI {
  /**
   * Get BalanceSheet
   * Get BalanceSheet
   */
  async balanceSheetOneRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/balance-sheet`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetBalanceSheetResponseFromJSON(jsonValue));
  }
  /**
   * Get BalanceSheet
   * Get BalanceSheet
   */
  async balanceSheetOne(requestParameters = {}, initOverrides) {
    const response = await this.balanceSheetOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Bill
   * Create Bill
   */
  async billsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.bill === null || requestParameters.bill === undefined) {
      throw new RequiredError('bill', 'Required parameter requestParameters.bill was null or undefined when calling billsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/bills`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: BillToJSON(requestParameters.bill)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateBillResponseFromJSON(jsonValue));
  }
  /**
   * Create Bill
   * Create Bill
   */
  async billsAdd(requestParameters, initOverrides) {
    const response = await this.billsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Bills
   * List Bills
   */
  async billsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/bills`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetBillsResponseFromJSON(jsonValue));
  }
  /**
   * List Bills
   * List Bills
   */
  async billsAll(requestParameters = {}, initOverrides) {
    const response = await this.billsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Bill
   * Delete Bill
   */
  async billsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling billsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/bills/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteBillResponseFromJSON(jsonValue));
  }
  /**
   * Delete Bill
   * Delete Bill
   */
  async billsDelete(requestParameters, initOverrides) {
    const response = await this.billsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Bill
   * Get Bill
   */
  async billsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling billsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/bills/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetBillResponseFromJSON(jsonValue));
  }
  /**
   * Get Bill
   * Get Bill
   */
  async billsOne(requestParameters, initOverrides) {
    const response = await this.billsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Bill
   * Update Bill
   */
  async billsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling billsUpdate.');
    }
    if (requestParameters.bill === null || requestParameters.bill === undefined) {
      throw new RequiredError('bill', 'Required parameter requestParameters.bill was null or undefined when calling billsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/bills/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: BillToJSON(requestParameters.bill)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateBillResponseFromJSON(jsonValue));
  }
  /**
   * Update Bill
   * Update Bill
   */
  async billsUpdate(requestParameters, initOverrides) {
    const response = await this.billsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get company info
   * Get company info
   */
  async companyInfoOneRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/company-info`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCompanyInfoResponseFromJSON(jsonValue));
  }
  /**
   * Get company info
   * Get company info
   */
  async companyInfoOne(requestParameters = {}, initOverrides) {
    const response = await this.companyInfoOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Credit Note
   * Create Credit Note
   */
  async creditNotesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.creditNote === null || requestParameters.creditNote === undefined) {
      throw new RequiredError('creditNote', 'Required parameter requestParameters.creditNote was null or undefined when calling creditNotesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/credit-notes`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreditNoteToJSON(requestParameters.creditNote)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateCreditNoteResponseFromJSON(jsonValue));
  }
  /**
   * Create Credit Note
   * Create Credit Note
   */
  async creditNotesAdd(requestParameters, initOverrides) {
    const response = await this.creditNotesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Credit Notes
   * List Credit Notes
   */
  async creditNotesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/credit-notes`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCreditNotesResponseFromJSON(jsonValue));
  }
  /**
   * List Credit Notes
   * List Credit Notes
   */
  async creditNotesAll(requestParameters = {}, initOverrides) {
    const response = await this.creditNotesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Credit Note
   * Delete Credit Note
   */
  async creditNotesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling creditNotesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/credit-notes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteCreditNoteResponseFromJSON(jsonValue));
  }
  /**
   * Delete Credit Note
   * Delete Credit Note
   */
  async creditNotesDelete(requestParameters, initOverrides) {
    const response = await this.creditNotesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Credit Note
   * Get Credit Note
   */
  async creditNotesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling creditNotesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/credit-notes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCreditNoteResponseFromJSON(jsonValue));
  }
  /**
   * Get Credit Note
   * Get Credit Note
   */
  async creditNotesOne(requestParameters, initOverrides) {
    const response = await this.creditNotesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Credit Note
   * Update Credit Note
   */
  async creditNotesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling creditNotesUpdate.');
    }
    if (requestParameters.creditNote === null || requestParameters.creditNote === undefined) {
      throw new RequiredError('creditNote', 'Required parameter requestParameters.creditNote was null or undefined when calling creditNotesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/credit-notes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: CreditNoteToJSON(requestParameters.creditNote)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateCreditNoteResponseFromJSON(jsonValue));
  }
  /**
   * Update Credit Note
   * Update Credit Note
   */
  async creditNotesUpdate(requestParameters, initOverrides) {
    const response = await this.creditNotesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Customer
   * Create Customer
   */
  async customersAddRaw(requestParameters, initOverrides) {
    if (requestParameters.customer === null || requestParameters.customer === undefined) {
      throw new RequiredError('customer', 'Required parameter requestParameters.customer was null or undefined when calling customersAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/customers`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CustomerToJSON(requestParameters.customer)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateCustomerResponseFromJSON(jsonValue));
  }
  /**
   * Create Customer
   * Create Customer
   */
  async customersAdd(requestParameters, initOverrides) {
    const response = await this.customersAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Customers
   * List Customers
   */
  async customersAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/customers`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCustomersResponseFromJSON(jsonValue));
  }
  /**
   * List Customers
   * List Customers
   */
  async customersAll(requestParameters = {}, initOverrides) {
    const response = await this.customersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Customer
   * Delete Customer
   */
  async customersDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling customersDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/customers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteCustomerResponseFromJSON(jsonValue));
  }
  /**
   * Delete Customer
   * Delete Customer
   */
  async customersDelete(requestParameters, initOverrides) {
    const response = await this.customersDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Customer
   * Get Customer
   */
  async customersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling customersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/customers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCustomerResponseFromJSON(jsonValue));
  }
  /**
   * Get Customer
   * Get Customer
   */
  async customersOne(requestParameters, initOverrides) {
    const response = await this.customersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Customer
   * Update Customer
   */
  async customersUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling customersUpdate.');
    }
    if (requestParameters.customer === null || requestParameters.customer === undefined) {
      throw new RequiredError('customer', 'Required parameter requestParameters.customer was null or undefined when calling customersUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/customers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: CustomerToJSON(requestParameters.customer)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateCustomerResponseFromJSON(jsonValue));
  }
  /**
   * Update Customer
   * Update Customer
   */
  async customersUpdate(requestParameters, initOverrides) {
    const response = await this.customersUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Invoice Item
   * Create Invoice Item
   */
  async invoiceItemsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.invoiceItem === null || requestParameters.invoiceItem === undefined) {
      throw new RequiredError('invoiceItem', 'Required parameter requestParameters.invoiceItem was null or undefined when calling invoiceItemsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoice-items`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: InvoiceItemToJSON(requestParameters.invoiceItem)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateInvoiceItemResponseFromJSON(jsonValue));
  }
  /**
   * Create Invoice Item
   * Create Invoice Item
   */
  async invoiceItemsAdd(requestParameters, initOverrides) {
    const response = await this.invoiceItemsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Invoice Items
   * List Invoice Items
   */
  async invoiceItemsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoice-items`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetInvoiceItemsResponseFromJSON(jsonValue));
  }
  /**
   * List Invoice Items
   * List Invoice Items
   */
  async invoiceItemsAll(requestParameters = {}, initOverrides) {
    const response = await this.invoiceItemsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Invoice Item
   * Delete Invoice Item
   */
  async invoiceItemsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling invoiceItemsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoice-items/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteTaxRateResponseFromJSON(jsonValue));
  }
  /**
   * Delete Invoice Item
   * Delete Invoice Item
   */
  async invoiceItemsDelete(requestParameters, initOverrides) {
    const response = await this.invoiceItemsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Invoice Item
   * Get Invoice Item
   */
  async invoiceItemsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling invoiceItemsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoice-items/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetInvoiceItemResponseFromJSON(jsonValue));
  }
  /**
   * Get Invoice Item
   * Get Invoice Item
   */
  async invoiceItemsOne(requestParameters, initOverrides) {
    const response = await this.invoiceItemsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Invoice Item
   * Update Invoice Item
   */
  async invoiceItemsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling invoiceItemsUpdate.');
    }
    if (requestParameters.invoiceItem === null || requestParameters.invoiceItem === undefined) {
      throw new RequiredError('invoiceItem', 'Required parameter requestParameters.invoiceItem was null or undefined when calling invoiceItemsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoice-items/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: InvoiceItemToJSON(requestParameters.invoiceItem)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateInvoiceItemsResponseFromJSON(jsonValue));
  }
  /**
   * Update Invoice Item
   * Update Invoice Item
   */
  async invoiceItemsUpdate(requestParameters, initOverrides) {
    const response = await this.invoiceItemsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Invoice
   * Create Invoice
   */
  async invoicesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
      throw new RequiredError('invoice', 'Required parameter requestParameters.invoice was null or undefined when calling invoicesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: InvoiceToJSON(requestParameters.invoice)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateInvoiceResponseFromJSON(jsonValue));
  }
  /**
   * Create Invoice
   * Create Invoice
   */
  async invoicesAdd(requestParameters, initOverrides) {
    const response = await this.invoicesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Invoices
   * List Invoices
   */
  async invoicesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetInvoicesResponseFromJSON(jsonValue));
  }
  /**
   * List Invoices
   * List Invoices
   */
  async invoicesAll(requestParameters = {}, initOverrides) {
    const response = await this.invoicesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Invoice
   * Delete Invoice
   */
  async invoicesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling invoicesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteInvoiceResponseFromJSON(jsonValue));
  }
  /**
   * Delete Invoice
   * Delete Invoice
   */
  async invoicesDelete(requestParameters, initOverrides) {
    const response = await this.invoicesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Invoice
   * Get Invoice
   */
  async invoicesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling invoicesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetInvoiceResponseFromJSON(jsonValue));
  }
  /**
   * Get Invoice
   * Get Invoice
   */
  async invoicesOne(requestParameters, initOverrides) {
    const response = await this.invoicesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Invoice
   * Update Invoice
   */
  async invoicesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling invoicesUpdate.');
    }
    if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
      throw new RequiredError('invoice', 'Required parameter requestParameters.invoice was null or undefined when calling invoicesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/invoices/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: InvoiceToJSON(requestParameters.invoice)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateInvoiceResponseFromJSON(jsonValue));
  }
  /**
   * Update Invoice
   * Update Invoice
   */
  async invoicesUpdate(requestParameters, initOverrides) {
    const response = await this.invoicesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Journal Entry
   * Create Journal Entry
   */
  async journalEntriesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.journalEntry === null || requestParameters.journalEntry === undefined) {
      throw new RequiredError('journalEntry', 'Required parameter requestParameters.journalEntry was null or undefined when calling journalEntriesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/journal-entries`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: JournalEntryToJSON(requestParameters.journalEntry)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateJournalEntryResponseFromJSON(jsonValue));
  }
  /**
   * Create Journal Entry
   * Create Journal Entry
   */
  async journalEntriesAdd(requestParameters, initOverrides) {
    const response = await this.journalEntriesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Journal Entries
   * List Journal Entries
   */
  async journalEntriesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/journal-entries`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetJournalEntriesResponseFromJSON(jsonValue));
  }
  /**
   * List Journal Entries
   * List Journal Entries
   */
  async journalEntriesAll(requestParameters = {}, initOverrides) {
    const response = await this.journalEntriesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Journal Entry
   * Delete Journal Entry
   */
  async journalEntriesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling journalEntriesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/journal-entries/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteJournalEntryResponseFromJSON(jsonValue));
  }
  /**
   * Delete Journal Entry
   * Delete Journal Entry
   */
  async journalEntriesDelete(requestParameters, initOverrides) {
    const response = await this.journalEntriesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Journal Entry
   * Get Journal Entry
   */
  async journalEntriesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling journalEntriesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/journal-entries/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetJournalEntryResponseFromJSON(jsonValue));
  }
  /**
   * Get Journal Entry
   * Get Journal Entry
   */
  async journalEntriesOne(requestParameters, initOverrides) {
    const response = await this.journalEntriesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Journal Entry
   * Update Journal Entry
   */
  async journalEntriesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling journalEntriesUpdate.');
    }
    if (requestParameters.journalEntry === null || requestParameters.journalEntry === undefined) {
      throw new RequiredError('journalEntry', 'Required parameter requestParameters.journalEntry was null or undefined when calling journalEntriesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/journal-entries/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: JournalEntryToJSON(requestParameters.journalEntry)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateJournalEntryResponseFromJSON(jsonValue));
  }
  /**
   * Update Journal Entry
   * Update Journal Entry
   */
  async journalEntriesUpdate(requestParameters, initOverrides) {
    const response = await this.journalEntriesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Ledger Account
   * Create Ledger Account
   */
  async ledgerAccountsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.ledgerAccount === null || requestParameters.ledgerAccount === undefined) {
      throw new RequiredError('ledgerAccount', 'Required parameter requestParameters.ledgerAccount was null or undefined when calling ledgerAccountsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/ledger-accounts`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: LedgerAccountToJSON(requestParameters.ledgerAccount)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateLedgerAccountResponseFromJSON(jsonValue));
  }
  /**
   * Create Ledger Account
   * Create Ledger Account
   */
  async ledgerAccountsAdd(requestParameters, initOverrides) {
    const response = await this.ledgerAccountsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Ledger Accounts
   * List Ledger Accounts
   */
  async ledgerAccountsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/ledger-accounts`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetLedgerAccountsResponseFromJSON(jsonValue));
  }
  /**
   * List Ledger Accounts
   * List Ledger Accounts
   */
  async ledgerAccountsAll(requestParameters = {}, initOverrides) {
    const response = await this.ledgerAccountsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Ledger Account
   * Delete Ledger Account
   */
  async ledgerAccountsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ledgerAccountsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/ledger-accounts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteLedgerAccountResponseFromJSON(jsonValue));
  }
  /**
   * Delete Ledger Account
   * Delete Ledger Account
   */
  async ledgerAccountsDelete(requestParameters, initOverrides) {
    const response = await this.ledgerAccountsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Ledger Account
   * Get Ledger Account
   */
  async ledgerAccountsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ledgerAccountsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/ledger-accounts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetLedgerAccountResponseFromJSON(jsonValue));
  }
  /**
   * Get Ledger Account
   * Get Ledger Account
   */
  async ledgerAccountsOne(requestParameters, initOverrides) {
    const response = await this.ledgerAccountsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Ledger Account
   * Update Ledger Account
   */
  async ledgerAccountsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ledgerAccountsUpdate.');
    }
    if (requestParameters.ledgerAccount === null || requestParameters.ledgerAccount === undefined) {
      throw new RequiredError('ledgerAccount', 'Required parameter requestParameters.ledgerAccount was null or undefined when calling ledgerAccountsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/ledger-accounts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: LedgerAccountToJSON(requestParameters.ledgerAccount)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateLedgerAccountResponseFromJSON(jsonValue));
  }
  /**
   * Update Ledger Account
   * Update Ledger Account
   */
  async ledgerAccountsUpdate(requestParameters, initOverrides) {
    const response = await this.ledgerAccountsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Payment
   * Create Payment
   */
  async paymentsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.payment === null || requestParameters.payment === undefined) {
      throw new RequiredError('payment', 'Required parameter requestParameters.payment was null or undefined when calling paymentsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/payments`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: PaymentToJSON(requestParameters.payment)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreatePaymentResponseFromJSON(jsonValue));
  }
  /**
   * Create Payment
   * Create Payment
   */
  async paymentsAdd(requestParameters, initOverrides) {
    const response = await this.paymentsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Payments
   * List Payments
   */
  async paymentsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/payments`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetPaymentsResponseFromJSON(jsonValue));
  }
  /**
   * List Payments
   * List Payments
   */
  async paymentsAll(requestParameters = {}, initOverrides) {
    const response = await this.paymentsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Payment
   * Delete Payment
   */
  async paymentsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling paymentsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/payments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeletePaymentResponseFromJSON(jsonValue));
  }
  /**
   * Delete Payment
   * Delete Payment
   */
  async paymentsDelete(requestParameters, initOverrides) {
    const response = await this.paymentsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Payment
   * Get Payment
   */
  async paymentsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling paymentsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/payments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetPaymentResponseFromJSON(jsonValue));
  }
  /**
   * Get Payment
   * Get Payment
   */
  async paymentsOne(requestParameters, initOverrides) {
    const response = await this.paymentsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Payment
   * Update Payment
   */
  async paymentsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling paymentsUpdate.');
    }
    if (requestParameters.payment === null || requestParameters.payment === undefined) {
      throw new RequiredError('payment', 'Required parameter requestParameters.payment was null or undefined when calling paymentsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/payments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: PaymentToJSON(requestParameters.payment)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdatePaymentResponseFromJSON(jsonValue));
  }
  /**
   * Update Payment
   * Update Payment
   */
  async paymentsUpdate(requestParameters, initOverrides) {
    const response = await this.paymentsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Profit and Loss
   * Get Profit and Loss
   */
  async profitAndLossOneRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/profit-and-loss`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetProfitAndLossResponseFromJSON(jsonValue));
  }
  /**
   * Get Profit and Loss
   * Get Profit and Loss
   */
  async profitAndLossOne(requestParameters = {}, initOverrides) {
    const response = await this.profitAndLossOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Purchase Order
   * Create Purchase Order
   */
  async purchaseOrdersAddRaw(requestParameters, initOverrides) {
    if (requestParameters.purchaseOrder === null || requestParameters.purchaseOrder === undefined) {
      throw new RequiredError('purchaseOrder', 'Required parameter requestParameters.purchaseOrder was null or undefined when calling purchaseOrdersAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/purchase-orders`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: PurchaseOrderToJSON(requestParameters.purchaseOrder)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreatePurchaseOrderResponseFromJSON(jsonValue));
  }
  /**
   * Create Purchase Order
   * Create Purchase Order
   */
  async purchaseOrdersAdd(requestParameters, initOverrides) {
    const response = await this.purchaseOrdersAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Purchase Orders
   * List Purchase Orders
   */
  async purchaseOrdersAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/purchase-orders`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetPurchaseOrdersResponseFromJSON(jsonValue));
  }
  /**
   * List Purchase Orders
   * List Purchase Orders
   */
  async purchaseOrdersAll(requestParameters = {}, initOverrides) {
    const response = await this.purchaseOrdersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Purchase Order
   * Delete Purchase Order
   */
  async purchaseOrdersDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling purchaseOrdersDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/purchase-orders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeletePurchaseOrderResponseFromJSON(jsonValue));
  }
  /**
   * Delete Purchase Order
   * Delete Purchase Order
   */
  async purchaseOrdersDelete(requestParameters, initOverrides) {
    const response = await this.purchaseOrdersDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Purchase Order
   * Get Purchase Order
   */
  async purchaseOrdersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling purchaseOrdersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/purchase-orders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetPurchaseOrderResponseFromJSON(jsonValue));
  }
  /**
   * Get Purchase Order
   * Get Purchase Order
   */
  async purchaseOrdersOne(requestParameters, initOverrides) {
    const response = await this.purchaseOrdersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Purchase Order
   * Update Purchase Order
   */
  async purchaseOrdersUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling purchaseOrdersUpdate.');
    }
    if (requestParameters.purchaseOrder === null || requestParameters.purchaseOrder === undefined) {
      throw new RequiredError('purchaseOrder', 'Required parameter requestParameters.purchaseOrder was null or undefined when calling purchaseOrdersUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/purchase-orders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: PurchaseOrderToJSON(requestParameters.purchaseOrder)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdatePurchaseOrderResponseFromJSON(jsonValue));
  }
  /**
   * Update Purchase Order
   * Update Purchase Order
   */
  async purchaseOrdersUpdate(requestParameters, initOverrides) {
    const response = await this.purchaseOrdersUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Supplier
   * Create Supplier
   */
  async suppliersAddRaw(requestParameters, initOverrides) {
    if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
      throw new RequiredError('supplier', 'Required parameter requestParameters.supplier was null or undefined when calling suppliersAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/suppliers`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: SupplierToJSON(requestParameters.supplier)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateSupplierResponseFromJSON(jsonValue));
  }
  /**
   * Create Supplier
   * Create Supplier
   */
  async suppliersAdd(requestParameters, initOverrides) {
    const response = await this.suppliersAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Suppliers
   * List Suppliers
   */
  async suppliersAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/suppliers`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetSuppliersResponseFromJSON(jsonValue));
  }
  /**
   * List Suppliers
   * List Suppliers
   */
  async suppliersAll(requestParameters = {}, initOverrides) {
    const response = await this.suppliersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Supplier
   * Delete Supplier
   */
  async suppliersDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling suppliersDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/suppliers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteSupplierResponseFromJSON(jsonValue));
  }
  /**
   * Delete Supplier
   * Delete Supplier
   */
  async suppliersDelete(requestParameters, initOverrides) {
    const response = await this.suppliersDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Supplier
   * Get Supplier
   */
  async suppliersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling suppliersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/suppliers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetSupplierResponseFromJSON(jsonValue));
  }
  /**
   * Get Supplier
   * Get Supplier
   */
  async suppliersOne(requestParameters, initOverrides) {
    const response = await this.suppliersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Supplier
   * Update Supplier
   */
  async suppliersUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling suppliersUpdate.');
    }
    if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
      throw new RequiredError('supplier', 'Required parameter requestParameters.supplier was null or undefined when calling suppliersUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/suppliers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: SupplierToJSON(requestParameters.supplier)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateSupplierResponseFromJSON(jsonValue));
  }
  /**
   * Update Supplier
   * Update Supplier
   */
  async suppliersUpdate(requestParameters, initOverrides) {
    const response = await this.suppliersUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Tax Rate
   * Create Tax Rate
   */
  async taxRatesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.taxRate === null || requestParameters.taxRate === undefined) {
      throw new RequiredError('taxRate', 'Required parameter requestParameters.taxRate was null or undefined when calling taxRatesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: TaxRateToJSON(requestParameters.taxRate)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateTaxRateResponseFromJSON(jsonValue));
  }
  /**
   * Create Tax Rate
   * Create Tax Rate
   */
  async taxRatesAdd(requestParameters, initOverrides) {
    const response = await this.taxRatesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
   * List Tax Rates
   */
  async taxRatesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetTaxRatesResponseFromJSON(jsonValue));
  }
  /**
   * List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
   * List Tax Rates
   */
  async taxRatesAll(requestParameters = {}, initOverrides) {
    const response = await this.taxRatesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Tax Rate
   * Delete Tax Rate
   */
  async taxRatesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling taxRatesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteTaxRateResponseFromJSON(jsonValue));
  }
  /**
   * Delete Tax Rate
   * Delete Tax Rate
   */
  async taxRatesDelete(requestParameters, initOverrides) {
    const response = await this.taxRatesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
   * Get Tax Rate
   */
  async taxRatesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling taxRatesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetTaxRateResponseFromJSON(jsonValue));
  }
  /**
   * Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
   * Get Tax Rate
   */
  async taxRatesOne(requestParameters, initOverrides) {
    const response = await this.taxRatesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Tax Rate
   * Update Tax Rate
   */
  async taxRatesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling taxRatesUpdate.');
    }
    if (requestParameters.taxRate === null || requestParameters.taxRate === undefined) {
      throw new RequiredError('taxRate', 'Required parameter requestParameters.taxRate was null or undefined when calling taxRatesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/accounting/tax-rates/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: TaxRateToJSON(requestParameters.taxRate)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateTaxRateResponseFromJSON(jsonValue));
  }
  /**
   * Update Tax Rate
   * Update Tax Rate
   */
  async taxRatesUpdate(requestParameters, initOverrides) {
    const response = await this.taxRatesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class AtsApi extends BaseAPI {
  /**
   * Create Applicant
   * Create Applicant
   */
  async applicantsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.applicant === null || requestParameters.applicant === undefined) {
      throw new RequiredError('applicant', 'Required parameter requestParameters.applicant was null or undefined when calling applicantsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/applicants`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ApplicantToJSON(requestParameters.applicant)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateApplicantResponseFromJSON(jsonValue));
  }
  /**
   * Create Applicant
   * Create Applicant
   */
  async applicantsAdd(requestParameters, initOverrides) {
    const response = await this.applicantsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Applicants
   * List Applicants
   */
  async applicantsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/applicants`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetApplicantsResponseFromJSON(jsonValue));
  }
  /**
   * List Applicants
   * List Applicants
   */
  async applicantsAll(requestParameters = {}, initOverrides) {
    const response = await this.applicantsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Applicant
   * Delete Applicant
   */
  async applicantsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling applicantsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/applicants/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteApplicantResponseFromJSON(jsonValue));
  }
  /**
   * Delete Applicant
   * Delete Applicant
   */
  async applicantsDelete(requestParameters, initOverrides) {
    const response = await this.applicantsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Applicant
   * Get Applicant
   */
  async applicantsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling applicantsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/applicants/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetApplicantResponseFromJSON(jsonValue));
  }
  /**
   * Get Applicant
   * Get Applicant
   */
  async applicantsOne(requestParameters, initOverrides) {
    const response = await this.applicantsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Applicant
   * Update Applicant
   */
  async applicantsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling applicantsUpdate.');
    }
    if (requestParameters.applicant === null || requestParameters.applicant === undefined) {
      throw new RequiredError('applicant', 'Required parameter requestParameters.applicant was null or undefined when calling applicantsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/applicants/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ApplicantToJSON(requestParameters.applicant)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateApplicantResponseFromJSON(jsonValue));
  }
  /**
   * Update Applicant
   * Update Applicant
   */
  async applicantsUpdate(requestParameters, initOverrides) {
    const response = await this.applicantsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Application
   * Create Application
   */
  async applicationsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.application === null || requestParameters.application === undefined) {
      throw new RequiredError('application', 'Required parameter requestParameters.application was null or undefined when calling applicationsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/applications`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ApplicationToJSON(requestParameters.application)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateApplicationResponseFromJSON(jsonValue));
  }
  /**
   * Create Application
   * Create Application
   */
  async applicationsAdd(requestParameters, initOverrides) {
    const response = await this.applicationsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Applications
   * List Applications
   */
  async applicationsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/applications`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetApplicationsResponseFromJSON(jsonValue));
  }
  /**
   * List Applications
   * List Applications
   */
  async applicationsAll(requestParameters = {}, initOverrides) {
    const response = await this.applicationsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Application
   * Delete Application
   */
  async applicationsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling applicationsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/applications/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteApplicationResponseFromJSON(jsonValue));
  }
  /**
   * Delete Application
   * Delete Application
   */
  async applicationsDelete(requestParameters, initOverrides) {
    const response = await this.applicationsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Application
   * Get Application
   */
  async applicationsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling applicationsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/applications/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetApplicationResponseFromJSON(jsonValue));
  }
  /**
   * Get Application
   * Get Application
   */
  async applicationsOne(requestParameters, initOverrides) {
    const response = await this.applicationsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Application
   * Update Application
   */
  async applicationsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling applicationsUpdate.');
    }
    if (requestParameters.application === null || requestParameters.application === undefined) {
      throw new RequiredError('application', 'Required parameter requestParameters.application was null or undefined when calling applicationsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/applications/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ApplicationToJSON(requestParameters.application)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateApplicationResponseFromJSON(jsonValue));
  }
  /**
   * Update Application
   * Update Application
   */
  async applicationsUpdate(requestParameters, initOverrides) {
    const response = await this.applicationsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Jobs
   * List Jobs
   */
  async jobsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/jobs`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetJobsResponseFromJSON(jsonValue));
  }
  /**
   * List Jobs
   * List Jobs
   */
  async jobsAll(requestParameters = {}, initOverrides) {
    const response = await this.jobsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Job
   * Get Job
   */
  async jobsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling jobsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ats/jobs/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetJobResponseFromJSON(jsonValue));
  }
  /**
   * Get Job
   * Get Job
   */
  async jobsOne(requestParameters, initOverrides) {
    const response = await this.jobsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class ConnectorApi extends BaseAPI {
  /**
   * Get API Resource Coverage
   * Get API Resource Coverage
   */
  async apiResourceCoverageOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling apiResourceCoverageOne.');
    }
    if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
      throw new RequiredError('resourceId', 'Required parameter requestParameters.resourceId was null or undefined when calling apiResourceCoverageOne.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/connector/apis/{id}/resources/{resource_id}/coverage`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${'resource_id'}}`, encodeURIComponent(String(requestParameters.resourceId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetApiResourceCoverageResponseFromJSON(jsonValue));
  }
  /**
   * Get API Resource Coverage
   * Get API Resource Coverage
   */
  async apiResourceCoverageOne(requestParameters, initOverrides) {
    const response = await this.apiResourceCoverageOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get API Resource
   * Get API Resource
   */
  async apiResourcesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling apiResourcesOne.');
    }
    if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
      throw new RequiredError('resourceId', 'Required parameter requestParameters.resourceId was null or undefined when calling apiResourcesOne.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/connector/apis/{id}/resources/{resource_id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${'resource_id'}}`, encodeURIComponent(String(requestParameters.resourceId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetApiResourceResponseFromJSON(jsonValue));
  }
  /**
   * Get API Resource
   * Get API Resource
   */
  async apiResourcesOne(requestParameters, initOverrides) {
    const response = await this.apiResourcesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List APIs
   * List APIs
   */
  async apisAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/connector/apis`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetApisResponseFromJSON(jsonValue));
  }
  /**
   * List APIs
   * List APIs
   */
  async apisAll(requestParameters = {}, initOverrides) {
    const response = await this.apisAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get API
   * Get API
   */
  async apisOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling apisOne.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/connector/apis/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetApiResponseFromJSON(jsonValue));
  }
  /**
   * Get API
   * Get API
   */
  async apisOne(requestParameters, initOverrides) {
    const response = await this.apisOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Connector Doc content
   * Get Connector Doc content
   */
  async connectorDocsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling connectorDocsOne.');
    }
    if (requestParameters.docId === null || requestParameters.docId === undefined) {
      throw new RequiredError('docId', 'Required parameter requestParameters.docId was null or undefined when calling connectorDocsOne.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/connector/connectors/{id}/docs/{doc_id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${'doc_id'}}`, encodeURIComponent(String(requestParameters.docId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new TextApiResponse(response);
  }
  /**
   * Get Connector Doc content
   * Get Connector Doc content
   */
  async connectorDocsOne(requestParameters, initOverrides) {
    const response = await this.connectorDocsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Connector Resource
   * Get Connector Resource
   */
  async connectorResourcesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling connectorResourcesOne.');
    }
    if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
      throw new RequiredError('resourceId', 'Required parameter requestParameters.resourceId was null or undefined when calling connectorResourcesOne.');
    }
    const queryParameters = {};
    if (requestParameters.unifiedApi !== undefined) {
      queryParameters['unified_api'] = requestParameters.unifiedApi;
    }
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/connector/connectors/{id}/resources/{resource_id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${'resource_id'}}`, encodeURIComponent(String(requestParameters.resourceId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetConnectorResourceResponseFromJSON(jsonValue));
  }
  /**
   * Get Connector Resource
   * Get Connector Resource
   */
  async connectorResourcesOne(requestParameters, initOverrides) {
    const response = await this.connectorResourcesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Connectors
   * List Connectors
   */
  async connectorsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/connector/connectors`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetConnectorsResponseFromJSON(jsonValue));
  }
  /**
   * List Connectors
   * List Connectors
   */
  async connectorsAll(requestParameters = {}, initOverrides) {
    const response = await this.connectorsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Connector
   * Get Connector
   */
  async connectorsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling connectorsOne.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/connector/connectors/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetConnectorResponseFromJSON(jsonValue));
  }
  /**
   * Get Connector
   * Get Connector
   */
  async connectorsOne(requestParameters, initOverrides) {
    const response = await this.connectorsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class CrmApi extends BaseAPI {
  /**
   * Create activity
   * Create activity
   */
  async activitiesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.activity === null || requestParameters.activity === undefined) {
      throw new RequiredError('activity', 'Required parameter requestParameters.activity was null or undefined when calling activitiesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/activities`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ActivityToJSON(requestParameters.activity)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateActivityResponseFromJSON(jsonValue));
  }
  /**
   * Create activity
   * Create activity
   */
  async activitiesAdd(requestParameters, initOverrides) {
    const response = await this.activitiesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List activities
   * List activities
   */
  async activitiesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/activities`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetActivitiesResponseFromJSON(jsonValue));
  }
  /**
   * List activities
   * List activities
   */
  async activitiesAll(requestParameters = {}, initOverrides) {
    const response = await this.activitiesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete activity
   * Delete activity
   */
  async activitiesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling activitiesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/activities/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteActivityResponseFromJSON(jsonValue));
  }
  /**
   * Delete activity
   * Delete activity
   */
  async activitiesDelete(requestParameters, initOverrides) {
    const response = await this.activitiesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get activity
   * Get activity
   */
  async activitiesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling activitiesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/activities/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetActivityResponseFromJSON(jsonValue));
  }
  /**
   * Get activity
   * Get activity
   */
  async activitiesOne(requestParameters, initOverrides) {
    const response = await this.activitiesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update activity
   * Update activity
   */
  async activitiesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling activitiesUpdate.');
    }
    if (requestParameters.activity === null || requestParameters.activity === undefined) {
      throw new RequiredError('activity', 'Required parameter requestParameters.activity was null or undefined when calling activitiesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/activities/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ActivityToJSON(requestParameters.activity)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateActivityResponseFromJSON(jsonValue));
  }
  /**
   * Update activity
   * Update activity
   */
  async activitiesUpdate(requestParameters, initOverrides) {
    const response = await this.activitiesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create company
   * Create company
   */
  async companiesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.company === null || requestParameters.company === undefined) {
      throw new RequiredError('company', 'Required parameter requestParameters.company was null or undefined when calling companiesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/companies`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CompanyToJSON(requestParameters.company)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateCompanyResponseFromJSON(jsonValue));
  }
  /**
   * Create company
   * Create company
   */
  async companiesAdd(requestParameters, initOverrides) {
    const response = await this.companiesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List companies
   * List companies
   */
  async companiesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/companies`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCompaniesResponseFromJSON(jsonValue));
  }
  /**
   * List companies
   * List companies
   */
  async companiesAll(requestParameters = {}, initOverrides) {
    const response = await this.companiesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete company
   * Delete company
   */
  async companiesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling companiesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/companies/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteCompanyResponseFromJSON(jsonValue));
  }
  /**
   * Delete company
   * Delete company
   */
  async companiesDelete(requestParameters, initOverrides) {
    const response = await this.companiesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get company
   * Get company
   */
  async companiesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling companiesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/companies/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCompanyResponseFromJSON(jsonValue));
  }
  /**
   * Get company
   * Get company
   */
  async companiesOne(requestParameters, initOverrides) {
    const response = await this.companiesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update company
   * Update company
   */
  async companiesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling companiesUpdate.');
    }
    if (requestParameters.company === null || requestParameters.company === undefined) {
      throw new RequiredError('company', 'Required parameter requestParameters.company was null or undefined when calling companiesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/companies/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: CompanyToJSON(requestParameters.company)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateCompanyResponseFromJSON(jsonValue));
  }
  /**
   * Update company
   * Update company
   */
  async companiesUpdate(requestParameters, initOverrides) {
    const response = await this.companiesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create contact
   * Create contact
   */
  async contactsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.contact === null || requestParameters.contact === undefined) {
      throw new RequiredError('contact', 'Required parameter requestParameters.contact was null or undefined when calling contactsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/contacts`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ContactToJSON(requestParameters.contact)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateContactResponseFromJSON(jsonValue));
  }
  /**
   * Create contact
   * Create contact
   */
  async contactsAdd(requestParameters, initOverrides) {
    const response = await this.contactsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List contacts
   * List contacts
   */
  async contactsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/contacts`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetContactsResponseFromJSON(jsonValue));
  }
  /**
   * List contacts
   * List contacts
   */
  async contactsAll(requestParameters = {}, initOverrides) {
    const response = await this.contactsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete contact
   * Delete contact
   */
  async contactsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling contactsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/contacts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteContactResponseFromJSON(jsonValue));
  }
  /**
   * Delete contact
   * Delete contact
   */
  async contactsDelete(requestParameters, initOverrides) {
    const response = await this.contactsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get contact
   * Get contact
   */
  async contactsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling contactsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/contacts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetContactResponseFromJSON(jsonValue));
  }
  /**
   * Get contact
   * Get contact
   */
  async contactsOne(requestParameters, initOverrides) {
    const response = await this.contactsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update contact
   * Update contact
   */
  async contactsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling contactsUpdate.');
    }
    if (requestParameters.contact === null || requestParameters.contact === undefined) {
      throw new RequiredError('contact', 'Required parameter requestParameters.contact was null or undefined when calling contactsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/contacts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ContactToJSON(requestParameters.contact)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateContactResponseFromJSON(jsonValue));
  }
  /**
   * Update contact
   * Update contact
   */
  async contactsUpdate(requestParameters, initOverrides) {
    const response = await this.contactsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create lead
   * Create lead
   */
  async leadsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.lead === null || requestParameters.lead === undefined) {
      throw new RequiredError('lead', 'Required parameter requestParameters.lead was null or undefined when calling leadsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/leads`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: LeadToJSON(requestParameters.lead)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateLeadResponseFromJSON(jsonValue));
  }
  /**
   * Create lead
   * Create lead
   */
  async leadsAdd(requestParameters, initOverrides) {
    const response = await this.leadsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List leads
   * List leads
   */
  async leadsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/leads`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetLeadsResponseFromJSON(jsonValue));
  }
  /**
   * List leads
   * List leads
   */
  async leadsAll(requestParameters = {}, initOverrides) {
    const response = await this.leadsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete lead
   * Delete lead
   */
  async leadsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling leadsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/leads/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteLeadResponseFromJSON(jsonValue));
  }
  /**
   * Delete lead
   * Delete lead
   */
  async leadsDelete(requestParameters, initOverrides) {
    const response = await this.leadsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get lead
   * Get lead
   */
  async leadsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling leadsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/leads/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetLeadResponseFromJSON(jsonValue));
  }
  /**
   * Get lead
   * Get lead
   */
  async leadsOne(requestParameters, initOverrides) {
    const response = await this.leadsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update lead
   * Update lead
   */
  async leadsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling leadsUpdate.');
    }
    if (requestParameters.lead === null || requestParameters.lead === undefined) {
      throw new RequiredError('lead', 'Required parameter requestParameters.lead was null or undefined when calling leadsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/leads/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: LeadToJSON(requestParameters.lead)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateLeadResponseFromJSON(jsonValue));
  }
  /**
   * Update lead
   * Update lead
   */
  async leadsUpdate(requestParameters, initOverrides) {
    const response = await this.leadsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create note
   * Create note
   */
  async notesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.note === null || requestParameters.note === undefined) {
      throw new RequiredError('note', 'Required parameter requestParameters.note was null or undefined when calling notesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/notes`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: NoteToJSON(requestParameters.note)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateNoteResponseFromJSON(jsonValue));
  }
  /**
   * Create note
   * Create note
   */
  async notesAdd(requestParameters, initOverrides) {
    const response = await this.notesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List notes
   * List notes
   */
  async notesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/notes`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetNotesResponseFromJSON(jsonValue));
  }
  /**
   * List notes
   * List notes
   */
  async notesAll(requestParameters = {}, initOverrides) {
    const response = await this.notesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete note
   * Delete note
   */
  async notesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling notesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/notes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteNoteResponseFromJSON(jsonValue));
  }
  /**
   * Delete note
   * Delete note
   */
  async notesDelete(requestParameters, initOverrides) {
    const response = await this.notesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get note
   * Get note
   */
  async notesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling notesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/notes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetNoteResponseFromJSON(jsonValue));
  }
  /**
   * Get note
   * Get note
   */
  async notesOne(requestParameters, initOverrides) {
    const response = await this.notesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update note
   * Update note
   */
  async notesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling notesUpdate.');
    }
    if (requestParameters.note === null || requestParameters.note === undefined) {
      throw new RequiredError('note', 'Required parameter requestParameters.note was null or undefined when calling notesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/notes/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: NoteToJSON(requestParameters.note)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateNoteResponseFromJSON(jsonValue));
  }
  /**
   * Update note
   * Update note
   */
  async notesUpdate(requestParameters, initOverrides) {
    const response = await this.notesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create opportunity
   * Create opportunity
   */
  async opportunitiesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.opportunity === null || requestParameters.opportunity === undefined) {
      throw new RequiredError('opportunity', 'Required parameter requestParameters.opportunity was null or undefined when calling opportunitiesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/opportunities`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: OpportunityToJSON(requestParameters.opportunity)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateOpportunityResponseFromJSON(jsonValue));
  }
  /**
   * Create opportunity
   * Create opportunity
   */
  async opportunitiesAdd(requestParameters, initOverrides) {
    const response = await this.opportunitiesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List opportunities
   * List opportunities
   */
  async opportunitiesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/opportunities`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetOpportunitiesResponseFromJSON(jsonValue));
  }
  /**
   * List opportunities
   * List opportunities
   */
  async opportunitiesAll(requestParameters = {}, initOverrides) {
    const response = await this.opportunitiesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete opportunity
   * Delete opportunity
   */
  async opportunitiesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling opportunitiesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/opportunities/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteOpportunityResponseFromJSON(jsonValue));
  }
  /**
   * Delete opportunity
   * Delete opportunity
   */
  async opportunitiesDelete(requestParameters, initOverrides) {
    const response = await this.opportunitiesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get opportunity
   * Get opportunity
   */
  async opportunitiesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling opportunitiesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/opportunities/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetOpportunityResponseFromJSON(jsonValue));
  }
  /**
   * Get opportunity
   * Get opportunity
   */
  async opportunitiesOne(requestParameters, initOverrides) {
    const response = await this.opportunitiesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update opportunity
   * Update opportunity
   */
  async opportunitiesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling opportunitiesUpdate.');
    }
    if (requestParameters.opportunity === null || requestParameters.opportunity === undefined) {
      throw new RequiredError('opportunity', 'Required parameter requestParameters.opportunity was null or undefined when calling opportunitiesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/opportunities/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: OpportunityToJSON(requestParameters.opportunity)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateOpportunityResponseFromJSON(jsonValue));
  }
  /**
   * Update opportunity
   * Update opportunity
   */
  async opportunitiesUpdate(requestParameters, initOverrides) {
    const response = await this.opportunitiesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create pipeline
   * Create pipeline
   */
  async pipelinesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
      throw new RequiredError('pipeline', 'Required parameter requestParameters.pipeline was null or undefined when calling pipelinesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/pipelines`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: PipelineToJSON(requestParameters.pipeline)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreatePipelineResponseFromJSON(jsonValue));
  }
  /**
   * Create pipeline
   * Create pipeline
   */
  async pipelinesAdd(requestParameters, initOverrides) {
    const response = await this.pipelinesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List pipelines
   * List pipelines
   */
  async pipelinesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/pipelines`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetPipelinesResponseFromJSON(jsonValue));
  }
  /**
   * List pipelines
   * List pipelines
   */
  async pipelinesAll(requestParameters = {}, initOverrides) {
    const response = await this.pipelinesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete pipeline
   * Delete pipeline
   */
  async pipelinesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling pipelinesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/pipelines/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeletePipelineResponseFromJSON(jsonValue));
  }
  /**
   * Delete pipeline
   * Delete pipeline
   */
  async pipelinesDelete(requestParameters, initOverrides) {
    const response = await this.pipelinesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get pipeline
   * Get pipeline
   */
  async pipelinesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling pipelinesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/pipelines/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetPipelineResponseFromJSON(jsonValue));
  }
  /**
   * Get pipeline
   * Get pipeline
   */
  async pipelinesOne(requestParameters, initOverrides) {
    const response = await this.pipelinesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update pipeline
   * Update pipeline
   */
  async pipelinesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling pipelinesUpdate.');
    }
    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
      throw new RequiredError('pipeline', 'Required parameter requestParameters.pipeline was null or undefined when calling pipelinesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/pipelines/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: PipelineToJSON(requestParameters.pipeline)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdatePipelineResponseFromJSON(jsonValue));
  }
  /**
   * Update pipeline
   * Update pipeline
   */
  async pipelinesUpdate(requestParameters, initOverrides) {
    const response = await this.pipelinesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create user
   * Create user
   */
  async usersAddRaw(requestParameters, initOverrides) {
    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new RequiredError('user', 'Required parameter requestParameters.user was null or undefined when calling usersAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/users`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: UserToJSON(requestParameters.user)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateUserResponseFromJSON(jsonValue));
  }
  /**
   * Create user
   * Create user
   */
  async usersAdd(requestParameters, initOverrides) {
    const response = await this.usersAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List users
   * List users
   */
  async usersAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/users`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetUsersResponseFromJSON(jsonValue));
  }
  /**
   * List users
   * List users
   */
  async usersAll(requestParameters = {}, initOverrides) {
    const response = await this.usersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete user
   * Delete user
   */
  async usersDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling usersDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteUserResponseFromJSON(jsonValue));
  }
  /**
   * Delete user
   * Delete user
   */
  async usersDelete(requestParameters, initOverrides) {
    const response = await this.usersDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get user
   * Get user
   */
  async usersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling usersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetUserResponseFromJSON(jsonValue));
  }
  /**
   * Get user
   * Get user
   */
  async usersOne(requestParameters, initOverrides) {
    const response = await this.usersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update user
   * Update user
   */
  async usersUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling usersUpdate.');
    }
    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new RequiredError('user', 'Required parameter requestParameters.user was null or undefined when calling usersUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/crm/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: UserToJSON(requestParameters.user)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateUserResponseFromJSON(jsonValue));
  }
  /**
   * Update user
   * Update user
   */
  async usersUpdate(requestParameters, initOverrides) {
    const response = await this.usersUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class EcommerceApi extends BaseAPI {
  /**
   * List Customers
   * List Customers
   */
  async customersAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ecommerce/customers`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetEcommerceCustomersResponseFromJSON(jsonValue));
  }
  /**
   * List Customers
   * List Customers
   */
  async customersAll(requestParameters = {}, initOverrides) {
    const response = await this.customersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Customer
   * Get Customer
   */
  async customersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling customersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ecommerce/customers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetEcommerceCustomerResponseFromJSON(jsonValue));
  }
  /**
   * Get Customer
   * Get Customer
   */
  async customersOne(requestParameters, initOverrides) {
    const response = await this.customersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Orders
   * List Orders
   */
  async ordersAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ecommerce/orders`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetEcommerceOrdersResponseFromJSON(jsonValue));
  }
  /**
   * List Orders
   * List Orders
   */
  async ordersAll(requestParameters = {}, initOverrides) {
    const response = await this.ordersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Order
   * Get Order
   */
  async ordersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ordersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ecommerce/orders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetEcommerceOrderResponseFromJSON(jsonValue));
  }
  /**
   * Get Order
   * Get Order
   */
  async ordersOne(requestParameters, initOverrides) {
    const response = await this.ordersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Products
   * List Products
   */
  async productsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ecommerce/products`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetProductsResponseFromJSON(jsonValue));
  }
  /**
   * List Products
   * List Products
   */
  async productsAll(requestParameters = {}, initOverrides) {
    const response = await this.productsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Product
   * Get Product
   */
  async productsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling productsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ecommerce/products/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetProductResponseFromJSON(jsonValue));
  }
  /**
   * Get Product
   * Get Product
   */
  async productsOne(requestParameters, initOverrides) {
    const response = await this.productsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Store
   * Get Store
   */
  async storesOneRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/ecommerce/store`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetStoreResponseFromJSON(jsonValue));
  }
  /**
   * Get Store
   * Get Store
   */
  async storesOne(requestParameters = {}, initOverrides) {
    const response = await this.storesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class FileStorageApi extends BaseAPI {
  /**
   * Create DriveGroup
   * Create DriveGroup
   */
  async driveGroupsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.driveGroup === null || requestParameters.driveGroup === undefined) {
      throw new RequiredError('driveGroup', 'Required parameter requestParameters.driveGroup was null or undefined when calling driveGroupsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/drive-groups`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: DriveGroupToJSON(requestParameters.driveGroup)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateDriveGroupResponseFromJSON(jsonValue));
  }
  /**
   * Create DriveGroup
   * Create DriveGroup
   */
  async driveGroupsAdd(requestParameters, initOverrides) {
    const response = await this.driveGroupsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List DriveGroups
   * List DriveGroups
   */
  async driveGroupsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/drive-groups`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetDriveGroupsResponseFromJSON(jsonValue));
  }
  /**
   * List DriveGroups
   * List DriveGroups
   */
  async driveGroupsAll(requestParameters = {}, initOverrides) {
    const response = await this.driveGroupsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete DriveGroup
   * Delete DriveGroup
   */
  async driveGroupsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling driveGroupsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/drive-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteDriveGroupResponseFromJSON(jsonValue));
  }
  /**
   * Delete DriveGroup
   * Delete DriveGroup
   */
  async driveGroupsDelete(requestParameters, initOverrides) {
    const response = await this.driveGroupsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get DriveGroup
   * Get DriveGroup
   */
  async driveGroupsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling driveGroupsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/drive-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetDriveGroupResponseFromJSON(jsonValue));
  }
  /**
   * Get DriveGroup
   * Get DriveGroup
   */
  async driveGroupsOne(requestParameters, initOverrides) {
    const response = await this.driveGroupsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update DriveGroup
   * Update DriveGroup
   */
  async driveGroupsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling driveGroupsUpdate.');
    }
    if (requestParameters.driveGroup === null || requestParameters.driveGroup === undefined) {
      throw new RequiredError('driveGroup', 'Required parameter requestParameters.driveGroup was null or undefined when calling driveGroupsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/drive-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: DriveGroupToJSON(requestParameters.driveGroup)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateDriveGroupResponseFromJSON(jsonValue));
  }
  /**
   * Update DriveGroup
   * Update DriveGroup
   */
  async driveGroupsUpdate(requestParameters, initOverrides) {
    const response = await this.driveGroupsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Drive
   * Create Drive
   */
  async drivesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.drive === null || requestParameters.drive === undefined) {
      throw new RequiredError('drive', 'Required parameter requestParameters.drive was null or undefined when calling drivesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/drives`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: DriveToJSON(requestParameters.drive)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateDriveResponseFromJSON(jsonValue));
  }
  /**
   * Create Drive
   * Create Drive
   */
  async drivesAdd(requestParameters, initOverrides) {
    const response = await this.drivesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Drives
   * List Drives
   */
  async drivesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/drives`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetDrivesResponseFromJSON(jsonValue));
  }
  /**
   * List Drives
   * List Drives
   */
  async drivesAll(requestParameters = {}, initOverrides) {
    const response = await this.drivesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Drive
   * Delete Drive
   */
  async drivesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling drivesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/drives/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteDriveResponseFromJSON(jsonValue));
  }
  /**
   * Delete Drive
   * Delete Drive
   */
  async drivesDelete(requestParameters, initOverrides) {
    const response = await this.drivesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Drive
   * Get Drive
   */
  async drivesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling drivesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/drives/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetDriveResponseFromJSON(jsonValue));
  }
  /**
   * Get Drive
   * Get Drive
   */
  async drivesOne(requestParameters, initOverrides) {
    const response = await this.drivesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Drive
   * Update Drive
   */
  async drivesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling drivesUpdate.');
    }
    if (requestParameters.drive === null || requestParameters.drive === undefined) {
      throw new RequiredError('drive', 'Required parameter requestParameters.drive was null or undefined when calling drivesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/drives/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: DriveToJSON(requestParameters.drive)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateDriveResponseFromJSON(jsonValue));
  }
  /**
   * Update Drive
   * Update Drive
   */
  async drivesUpdate(requestParameters, initOverrides) {
    const response = await this.drivesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Files
   * List Files
   */
  async filesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/files`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetFilesResponseFromJSON(jsonValue));
  }
  /**
   * List Files
   * List Files
   */
  async filesAll(requestParameters = {}, initOverrides) {
    const response = await this.filesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete File
   * Delete File
   */
  async filesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling filesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/files/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteFileResponseFromJSON(jsonValue));
  }
  /**
   * Delete File
   * Delete File
   */
  async filesDelete(requestParameters, initOverrides) {
    const response = await this.filesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Download File
   * Download File
   */
  async filesDownloadRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling filesDownload.');
    }
    const queryParameters = {};
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/files/{id}/download`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new BlobApiResponse(response);
  }
  /**
   * Download File
   * Download File
   */
  async filesDownload(requestParameters, initOverrides) {
    const response = await this.filesDownloadRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Export File
   * Export File
   */
  async filesExportRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling filesExport.');
    }
    if (requestParameters.format === null || requestParameters.format === undefined) {
      throw new RequiredError('format', 'Required parameter requestParameters.format was null or undefined when calling filesExport.');
    }
    const queryParameters = {};
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    if (requestParameters.format !== undefined) {
      queryParameters['format'] = requestParameters.format;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/files/{id}/export`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new BlobApiResponse(response);
  }
  /**
   * Export File
   * Export File
   */
  async filesExport(requestParameters, initOverrides) {
    const response = await this.filesExportRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get File
   * Get File
   */
  async filesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling filesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/files/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetFileResponseFromJSON(jsonValue));
  }
  /**
   * Get File
   * Get File
   */
  async filesOne(requestParameters, initOverrides) {
    const response = await this.filesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Search Files
   * Search Files
   */
  async filesSearchRaw(requestParameters, initOverrides) {
    if (requestParameters.filesSearch === null || requestParameters.filesSearch === undefined) {
      throw new RequiredError('filesSearch', 'Required parameter requestParameters.filesSearch was null or undefined when calling filesSearch.');
    }
    const queryParameters = {};
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/files/search`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: FilesSearchToJSON(requestParameters.filesSearch)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetFilesResponseFromJSON(jsonValue));
  }
  /**
   * Search Files
   * Search Files
   */
  async filesSearch(requestParameters, initOverrides) {
    const response = await this.filesSearchRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Rename or move File
   * Rename or move File
   */
  async filesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling filesUpdate.');
    }
    if (requestParameters.file === null || requestParameters.file === undefined) {
      throw new RequiredError('file', 'Required parameter requestParameters.file was null or undefined when calling filesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/files/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: UpdateFileRequestToJSON(requestParameters.file)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateFileResponseFromJSON(jsonValue));
  }
  /**
   * Rename or move File
   * Rename or move File
   */
  async filesUpdate(requestParameters, initOverrides) {
    const response = await this.filesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Folder
   * Create Folder
   */
  async foldersAddRaw(requestParameters, initOverrides) {
    if (requestParameters.folder === null || requestParameters.folder === undefined) {
      throw new RequiredError('folder', 'Required parameter requestParameters.folder was null or undefined when calling foldersAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/folders`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateFolderRequestToJSON(requestParameters.folder)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateFolderResponseFromJSON(jsonValue));
  }
  /**
   * Create Folder
   * Create Folder
   */
  async foldersAdd(requestParameters, initOverrides) {
    const response = await this.foldersAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Copy Folder
   * Copy Folder
   */
  async foldersCopyRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling foldersCopy.');
    }
    if (requestParameters.folder === null || requestParameters.folder === undefined) {
      throw new RequiredError('folder', 'Required parameter requestParameters.folder was null or undefined when calling foldersCopy.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/folders/{id}/copy`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CopyFolderRequestToJSON(requestParameters.folder)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateFolderResponseFromJSON(jsonValue));
  }
  /**
   * Copy Folder
   * Copy Folder
   */
  async foldersCopy(requestParameters, initOverrides) {
    const response = await this.foldersCopyRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Folder
   * Delete Folder
   */
  async foldersDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling foldersDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/folders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteFolderResponseFromJSON(jsonValue));
  }
  /**
   * Delete Folder
   * Delete Folder
   */
  async foldersDelete(requestParameters, initOverrides) {
    const response = await this.foldersDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Folder
   * Get Folder
   */
  async foldersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling foldersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/folders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetFolderResponseFromJSON(jsonValue));
  }
  /**
   * Get Folder
   * Get Folder
   */
  async foldersOne(requestParameters, initOverrides) {
    const response = await this.foldersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Rename or move Folder
   * Rename or move Folder
   */
  async foldersUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling foldersUpdate.');
    }
    if (requestParameters.folder === null || requestParameters.folder === undefined) {
      throw new RequiredError('folder', 'Required parameter requestParameters.folder was null or undefined when calling foldersUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/folders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: UpdateFolderRequestToJSON(requestParameters.folder)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateFolderResponseFromJSON(jsonValue));
  }
  /**
   * Rename or move Folder
   * Rename or move Folder
   */
  async foldersUpdate(requestParameters, initOverrides) {
    const response = await this.foldersUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Shared Link
   * Create Shared Link
   */
  async sharedLinksAddRaw(requestParameters, initOverrides) {
    if (requestParameters.sharedLink === null || requestParameters.sharedLink === undefined) {
      throw new RequiredError('sharedLink', 'Required parameter requestParameters.sharedLink was null or undefined when calling sharedLinksAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/shared-links`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: SharedLinkToJSON(requestParameters.sharedLink)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateSharedLinkResponseFromJSON(jsonValue));
  }
  /**
   * Create Shared Link
   * Create Shared Link
   */
  async sharedLinksAdd(requestParameters, initOverrides) {
    const response = await this.sharedLinksAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List SharedLinks
   * List SharedLinks
   */
  async sharedLinksAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/shared-links`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetSharedLinksResponseFromJSON(jsonValue));
  }
  /**
   * List SharedLinks
   * List SharedLinks
   */
  async sharedLinksAll(requestParameters = {}, initOverrides) {
    const response = await this.sharedLinksAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Shared Link
   * Delete Shared Link
   */
  async sharedLinksDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling sharedLinksDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/shared-links/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteSharedLinkResponseFromJSON(jsonValue));
  }
  /**
   * Delete Shared Link
   * Delete Shared Link
   */
  async sharedLinksDelete(requestParameters, initOverrides) {
    const response = await this.sharedLinksDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Shared Link
   * Get Shared Link
   */
  async sharedLinksOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling sharedLinksOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/shared-links/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetSharedLinkResponseFromJSON(jsonValue));
  }
  /**
   * Get Shared Link
   * Get Shared Link
   */
  async sharedLinksOne(requestParameters, initOverrides) {
    const response = await this.sharedLinksOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Shared Link
   * Update Shared Link
   */
  async sharedLinksUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling sharedLinksUpdate.');
    }
    if (requestParameters.sharedLink === null || requestParameters.sharedLink === undefined) {
      throw new RequiredError('sharedLink', 'Required parameter requestParameters.sharedLink was null or undefined when calling sharedLinksUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/shared-links/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: SharedLinkToJSON(requestParameters.sharedLink)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateSharedLinkResponseFromJSON(jsonValue));
  }
  /**
   * Update Shared Link
   * Update Shared Link
   */
  async sharedLinksUpdate(requestParameters, initOverrides) {
    const response = await this.sharedLinksUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Start an Upload Session. Upload sessions are used to upload large files, use the [Upload File](#operation/filesUpload) endpoint to upload smaller files (up to 100MB). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   * Start Upload Session
   */
  async uploadSessionsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.uploadSession === null || requestParameters.uploadSession === undefined) {
      throw new RequiredError('uploadSession', 'Required parameter requestParameters.uploadSession was null or undefined when calling uploadSessionsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/upload-sessions`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateUploadSessionRequestToJSON(requestParameters.uploadSession)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateUploadSessionResponseFromJSON(jsonValue));
  }
  /**
   * Start an Upload Session. Upload sessions are used to upload large files, use the [Upload File](#operation/filesUpload) endpoint to upload smaller files (up to 100MB). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   * Start Upload Session
   */
  async uploadSessionsAdd(requestParameters, initOverrides) {
    const response = await this.uploadSessionsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Abort Upload Session. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   * Abort Upload Session
   */
  async uploadSessionsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling uploadSessionsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/upload-sessions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteUploadSessionResponseFromJSON(jsonValue));
  }
  /**
   * Abort Upload Session. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   * Abort Upload Session
   */
  async uploadSessionsDelete(requestParameters, initOverrides) {
    const response = await this.uploadSessionsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Finish Upload Session. Only call this endpoint after all File parts have been uploaded to [Upload part of File](#operation/uploadSessionsUpload). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   * Finish Upload Session
   */
  async uploadSessionsFinishRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling uploadSessionsFinish.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (requestParameters.digest !== undefined && requestParameters.digest !== null) {
      headerParameters['digest'] = String(requestParameters.digest);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/upload-sessions/{id}/finish`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetFileResponseFromJSON(jsonValue));
  }
  /**
   * Finish Upload Session. Only call this endpoint after all File parts have been uploaded to [Upload part of File](#operation/uploadSessionsUpload). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   * Finish Upload Session
   */
  async uploadSessionsFinish(requestParameters, initOverrides) {
    const response = await this.uploadSessionsFinishRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Upload Session. Use the `part_size` to split your file into parts. Upload the parts to the [Upload part of File](#operation/uploadSessionsUpload) endpoint. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   * Get Upload Session
   */
  async uploadSessionsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling uploadSessionsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/file-storage/upload-sessions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetUploadSessionResponseFromJSON(jsonValue));
  }
  /**
   * Get Upload Session. Use the `part_size` to split your file into parts. Upload the parts to the [Upload part of File](#operation/uploadSessionsUpload) endpoint. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   * Get Upload Session
   */
  async uploadSessionsOne(requestParameters, initOverrides) {
    const response = await this.uploadSessionsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class HrisApi extends BaseAPI {
  /**
   * Create Company
   * Create Company
   */
  async companiesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.company === null || requestParameters.company === undefined) {
      throw new RequiredError('company', 'Required parameter requestParameters.company was null or undefined when calling companiesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/companies`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: HrisCompanyToJSON(requestParameters.company)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateHrisCompanyResponseFromJSON(jsonValue));
  }
  /**
   * Create Company
   * Create Company
   */
  async companiesAdd(requestParameters, initOverrides) {
    const response = await this.companiesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Companies
   * List Companies
   */
  async companiesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/companies`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetHrisCompaniesResponseFromJSON(jsonValue));
  }
  /**
   * List Companies
   * List Companies
   */
  async companiesAll(requestParameters = {}, initOverrides) {
    const response = await this.companiesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Company
   * Delete Company
   */
  async companiesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling companiesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/companies/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteHrisCompanyResponseFromJSON(jsonValue));
  }
  /**
   * Delete Company
   * Delete Company
   */
  async companiesDelete(requestParameters, initOverrides) {
    const response = await this.companiesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Company
   * Get Company
   */
  async companiesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling companiesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/companies/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetHrisCompanyResponseFromJSON(jsonValue));
  }
  /**
   * Get Company
   * Get Company
   */
  async companiesOne(requestParameters, initOverrides) {
    const response = await this.companiesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Company
   * Update Company
   */
  async companiesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling companiesUpdate.');
    }
    if (requestParameters.company === null || requestParameters.company === undefined) {
      throw new RequiredError('company', 'Required parameter requestParameters.company was null or undefined when calling companiesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/companies/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: HrisCompanyToJSON(requestParameters.company)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateHrisCompanyResponseFromJSON(jsonValue));
  }
  /**
   * Update Company
   * Update Company
   */
  async companiesUpdate(requestParameters, initOverrides) {
    const response = await this.companiesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Department
   * Create Department
   */
  async departmentsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.department === null || requestParameters.department === undefined) {
      throw new RequiredError('department', 'Required parameter requestParameters.department was null or undefined when calling departmentsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/departments`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: DepartmentToJSON(requestParameters.department)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateDepartmentResponseFromJSON(jsonValue));
  }
  /**
   * Create Department
   * Create Department
   */
  async departmentsAdd(requestParameters, initOverrides) {
    const response = await this.departmentsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Departments
   * List Departments
   */
  async departmentsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/departments`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetDepartmentsResponseFromJSON(jsonValue));
  }
  /**
   * List Departments
   * List Departments
   */
  async departmentsAll(requestParameters = {}, initOverrides) {
    const response = await this.departmentsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Department
   * Delete Department
   */
  async departmentsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling departmentsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/departments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteDepartmentResponseFromJSON(jsonValue));
  }
  /**
   * Delete Department
   * Delete Department
   */
  async departmentsDelete(requestParameters, initOverrides) {
    const response = await this.departmentsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Department
   * Get Department
   */
  async departmentsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling departmentsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/departments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetDepartmentResponseFromJSON(jsonValue));
  }
  /**
   * Get Department
   * Get Department
   */
  async departmentsOne(requestParameters, initOverrides) {
    const response = await this.departmentsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Department
   * Update Department
   */
  async departmentsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling departmentsUpdate.');
    }
    if (requestParameters.department === null || requestParameters.department === undefined) {
      throw new RequiredError('department', 'Required parameter requestParameters.department was null or undefined when calling departmentsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/departments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: DepartmentToJSON(requestParameters.department)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateDepartmentResponseFromJSON(jsonValue));
  }
  /**
   * Update Department
   * Update Department
   */
  async departmentsUpdate(requestParameters, initOverrides) {
    const response = await this.departmentsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List payrolls for employee
   * List Employee Payrolls
   */
  async employeePayrollsAllRaw(requestParameters, initOverrides) {
    if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
      throw new RequiredError('employeeId', 'Required parameter requestParameters.employeeId was null or undefined when calling employeePayrollsAll.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/payrolls/employees/{employee_id}`.replace(`{${'employee_id'}}`, encodeURIComponent(String(requestParameters.employeeId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetEmployeePayrollsResponseFromJSON(jsonValue));
  }
  /**
   * List payrolls for employee
   * List Employee Payrolls
   */
  async employeePayrollsAll(requestParameters, initOverrides) {
    const response = await this.employeePayrollsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get payroll for employee
   * Get Employee Payroll
   */
  async employeePayrollsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.payrollId === null || requestParameters.payrollId === undefined) {
      throw new RequiredError('payrollId', 'Required parameter requestParameters.payrollId was null or undefined when calling employeePayrollsOne.');
    }
    if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
      throw new RequiredError('employeeId', 'Required parameter requestParameters.employeeId was null or undefined when calling employeePayrollsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/payrolls/employees/{employee_id}/payrolls/{payroll_id}`.replace(`{${'payroll_id'}}`, encodeURIComponent(String(requestParameters.payrollId))).replace(`{${'employee_id'}}`, encodeURIComponent(String(requestParameters.employeeId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetEmployeePayrollResponseFromJSON(jsonValue));
  }
  /**
   * Get payroll for employee
   * Get Employee Payroll
   */
  async employeePayrollsOne(requestParameters, initOverrides) {
    const response = await this.employeePayrollsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List schedules for employee, a schedule is a work pattern, not the actual worked hours, for an employee.
   * List Employee Schedules
   */
  async employeeSchedulesAllRaw(requestParameters, initOverrides) {
    if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
      throw new RequiredError('employeeId', 'Required parameter requestParameters.employeeId was null or undefined when calling employeeSchedulesAll.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/schedules/employees/{employee_id}`.replace(`{${'employee_id'}}`, encodeURIComponent(String(requestParameters.employeeId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetEmployeeSchedulesResponseFromJSON(jsonValue));
  }
  /**
   * List schedules for employee, a schedule is a work pattern, not the actual worked hours, for an employee.
   * List Employee Schedules
   */
  async employeeSchedulesAll(requestParameters, initOverrides) {
    const response = await this.employeeSchedulesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Employee
   * Create Employee
   */
  async employeesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.employee === null || requestParameters.employee === undefined) {
      throw new RequiredError('employee', 'Required parameter requestParameters.employee was null or undefined when calling employeesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/employees`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: EmployeeToJSON(requestParameters.employee)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateEmployeeResponseFromJSON(jsonValue));
  }
  /**
   * Create Employee
   * Create Employee
   */
  async employeesAdd(requestParameters, initOverrides) {
    const response = await this.employeesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Employees
   * List Employees
   */
  async employeesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/employees`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetEmployeesResponseFromJSON(jsonValue));
  }
  /**
   * List Employees
   * List Employees
   */
  async employeesAll(requestParameters = {}, initOverrides) {
    const response = await this.employeesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Employee
   * Delete Employee
   */
  async employeesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling employeesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/employees/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteEmployeeResponseFromJSON(jsonValue));
  }
  /**
   * Delete Employee
   * Delete Employee
   */
  async employeesDelete(requestParameters, initOverrides) {
    const response = await this.employeesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Employee
   * Get Employee
   */
  async employeesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling employeesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/employees/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetEmployeeResponseFromJSON(jsonValue));
  }
  /**
   * Get Employee
   * Get Employee
   */
  async employeesOne(requestParameters, initOverrides) {
    const response = await this.employeesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Employee
   * Update Employee
   */
  async employeesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling employeesUpdate.');
    }
    if (requestParameters.employee === null || requestParameters.employee === undefined) {
      throw new RequiredError('employee', 'Required parameter requestParameters.employee was null or undefined when calling employeesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/employees/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: EmployeeToJSON(requestParameters.employee)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateEmployeeResponseFromJSON(jsonValue));
  }
  /**
   * Update Employee
   * Update Employee
   */
  async employeesUpdate(requestParameters, initOverrides) {
    const response = await this.employeesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Payroll
   * List Payroll
   */
  async payrollsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/payrolls`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetPayrollsResponseFromJSON(jsonValue));
  }
  /**
   * List Payroll
   * List Payroll
   */
  async payrollsAll(requestParameters = {}, initOverrides) {
    const response = await this.payrollsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Payroll
   * Get Payroll
   */
  async payrollsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.payrollId === null || requestParameters.payrollId === undefined) {
      throw new RequiredError('payrollId', 'Required parameter requestParameters.payrollId was null or undefined when calling payrollsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/payrolls/{payroll_id}`.replace(`{${'payroll_id'}}`, encodeURIComponent(String(requestParameters.payrollId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetPayrollResponseFromJSON(jsonValue));
  }
  /**
   * Get Payroll
   * Get Payroll
   */
  async payrollsOne(requestParameters, initOverrides) {
    const response = await this.payrollsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Time Off Request
   * Create Time Off Request
   */
  async timeOffRequestsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.timeOffRequest === null || requestParameters.timeOffRequest === undefined) {
      throw new RequiredError('timeOffRequest', 'Required parameter requestParameters.timeOffRequest was null or undefined when calling timeOffRequestsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/time-off-requests`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: TimeOffRequestToJSON(requestParameters.timeOffRequest)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateTimeOffRequestResponseFromJSON(jsonValue));
  }
  /**
   * Create Time Off Request
   * Create Time Off Request
   */
  async timeOffRequestsAdd(requestParameters, initOverrides) {
    const response = await this.timeOffRequestsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Time Off Requests
   * List Time Off Requests
   */
  async timeOffRequestsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/time-off-requests`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetTimeOffRequestsResponseFromJSON(jsonValue));
  }
  /**
   * List Time Off Requests
   * List Time Off Requests
   */
  async timeOffRequestsAll(requestParameters = {}, initOverrides) {
    const response = await this.timeOffRequestsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Time Off Request
   * Delete Time Off Request
   */
  async timeOffRequestsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling timeOffRequestsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/time-off-requests/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteTimeOffRequestResponseFromJSON(jsonValue));
  }
  /**
   * Delete Time Off Request
   * Delete Time Off Request
   */
  async timeOffRequestsDelete(requestParameters, initOverrides) {
    const response = await this.timeOffRequestsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Time Off Request
   * Get Time Off Request
   */
  async timeOffRequestsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling timeOffRequestsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/time-off-requests/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetTimeOffRequestResponseFromJSON(jsonValue));
  }
  /**
   * Get Time Off Request
   * Get Time Off Request
   */
  async timeOffRequestsOne(requestParameters, initOverrides) {
    const response = await this.timeOffRequestsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Time Off Request
   * Update Time Off Request
   */
  async timeOffRequestsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling timeOffRequestsUpdate.');
    }
    if (requestParameters.timeOffRequest === null || requestParameters.timeOffRequest === undefined) {
      throw new RequiredError('timeOffRequest', 'Required parameter requestParameters.timeOffRequest was null or undefined when calling timeOffRequestsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/hris/time-off-requests/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: TimeOffRequestToJSON(requestParameters.timeOffRequest)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateTimeOffRequestResponseFromJSON(jsonValue));
  }
  /**
   * Update Time Off Request
   * Update Time Off Request
   */
  async timeOffRequestsUpdate(requestParameters, initOverrides) {
    const response = await this.timeOffRequestsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class IssueTrackingApi extends BaseAPI {
  /**
   * List Tags
   * List Tags
   */
  async collectionTagsAllRaw(requestParameters, initOverrides) {
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling collectionTagsAll.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tags`.replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCollectionTagsResponseFromJSON(jsonValue));
  }
  /**
   * List Tags
   * List Tags
   */
  async collectionTagsAll(requestParameters, initOverrides) {
    const response = await this.collectionTagsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Comment
   * Create Comment
   */
  async ticketCommentsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling ticketCommentsAdd.');
    }
    if (requestParameters.ticketId === null || requestParameters.ticketId === undefined) {
      throw new RequiredError('ticketId', 'Required parameter requestParameters.ticketId was null or undefined when calling ticketCommentsAdd.');
    }
    if (requestParameters.ticketComment === null || requestParameters.ticketComment === undefined) {
      throw new RequiredError('ticketComment', 'Required parameter requestParameters.ticketComment was null or undefined when calling ticketCommentsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments`.replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${'ticket_id'}}`, encodeURIComponent(String(requestParameters.ticketId))),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CollectionTicketCommentToJSON(requestParameters.ticketComment)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateCommentResponseFromJSON(jsonValue));
  }
  /**
   * Create Comment
   * Create Comment
   */
  async ticketCommentsAdd(requestParameters, initOverrides) {
    const response = await this.ticketCommentsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Comments
   * List Comments
   */
  async ticketCommentsAllRaw(requestParameters, initOverrides) {
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling ticketCommentsAll.');
    }
    if (requestParameters.ticketId === null || requestParameters.ticketId === undefined) {
      throw new RequiredError('ticketId', 'Required parameter requestParameters.ticketId was null or undefined when calling ticketCommentsAll.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments`.replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${'ticket_id'}}`, encodeURIComponent(String(requestParameters.ticketId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCommentsResponseFromJSON(jsonValue));
  }
  /**
   * List Comments
   * List Comments
   */
  async ticketCommentsAll(requestParameters, initOverrides) {
    const response = await this.ticketCommentsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Comment
   * Delete Comment
   */
  async ticketCommentsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ticketCommentsDelete.');
    }
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling ticketCommentsDelete.');
    }
    if (requestParameters.ticketId === null || requestParameters.ticketId === undefined) {
      throw new RequiredError('ticketId', 'Required parameter requestParameters.ticketId was null or undefined when calling ticketCommentsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${'ticket_id'}}`, encodeURIComponent(String(requestParameters.ticketId))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteCommentResponseFromJSON(jsonValue));
  }
  /**
   * Delete Comment
   * Delete Comment
   */
  async ticketCommentsDelete(requestParameters, initOverrides) {
    const response = await this.ticketCommentsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Comment
   * Get Comment
   */
  async ticketCommentsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ticketCommentsOne.');
    }
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling ticketCommentsOne.');
    }
    if (requestParameters.ticketId === null || requestParameters.ticketId === undefined) {
      throw new RequiredError('ticketId', 'Required parameter requestParameters.ticketId was null or undefined when calling ticketCommentsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${'ticket_id'}}`, encodeURIComponent(String(requestParameters.ticketId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCommentResponseFromJSON(jsonValue));
  }
  /**
   * Get Comment
   * Get Comment
   */
  async ticketCommentsOne(requestParameters, initOverrides) {
    const response = await this.ticketCommentsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Comment
   * Update Comment
   */
  async ticketCommentsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ticketCommentsUpdate.');
    }
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling ticketCommentsUpdate.');
    }
    if (requestParameters.ticketId === null || requestParameters.ticketId === undefined) {
      throw new RequiredError('ticketId', 'Required parameter requestParameters.ticketId was null or undefined when calling ticketCommentsUpdate.');
    }
    if (requestParameters.ticketComment === null || requestParameters.ticketComment === undefined) {
      throw new RequiredError('ticketComment', 'Required parameter requestParameters.ticketComment was null or undefined when calling ticketCommentsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${'ticket_id'}}`, encodeURIComponent(String(requestParameters.ticketId))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: CollectionTicketCommentToJSON(requestParameters.ticketComment)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateCommentResponseFromJSON(jsonValue));
  }
  /**
   * Update Comment
   * Update Comment
   */
  async ticketCommentsUpdate(requestParameters, initOverrides) {
    const response = await this.ticketCommentsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Ticket
   * Create Ticket
   */
  async ticketsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling ticketsAdd.');
    }
    if (requestParameters.ticket === null || requestParameters.ticket === undefined) {
      throw new RequiredError('ticket', 'Required parameter requestParameters.ticket was null or undefined when calling ticketsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tickets`.replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: TicketToJSON(requestParameters.ticket)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateTicketResponseFromJSON(jsonValue));
  }
  /**
   * Create Ticket
   * Create Ticket
   */
  async ticketsAdd(requestParameters, initOverrides) {
    const response = await this.ticketsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Tickets
   * List Tickets
   */
  async ticketsAllRaw(requestParameters, initOverrides) {
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling ticketsAll.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tickets`.replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetTicketsResponseFromJSON(jsonValue));
  }
  /**
   * List Tickets
   * List Tickets
   */
  async ticketsAll(requestParameters, initOverrides) {
    const response = await this.ticketsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Ticket
   * Delete Ticket
   */
  async ticketsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.ticketId === null || requestParameters.ticketId === undefined) {
      throw new RequiredError('ticketId', 'Required parameter requestParameters.ticketId was null or undefined when calling ticketsDelete.');
    }
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling ticketsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tickets/{ticket_id}`.replace(`{${'ticket_id'}}`, encodeURIComponent(String(requestParameters.ticketId))).replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteTicketResponseFromJSON(jsonValue));
  }
  /**
   * Delete Ticket
   * Delete Ticket
   */
  async ticketsDelete(requestParameters, initOverrides) {
    const response = await this.ticketsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Ticket
   * Get Ticket
   */
  async ticketsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.ticketId === null || requestParameters.ticketId === undefined) {
      throw new RequiredError('ticketId', 'Required parameter requestParameters.ticketId was null or undefined when calling ticketsOne.');
    }
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling ticketsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tickets/{ticket_id}`.replace(`{${'ticket_id'}}`, encodeURIComponent(String(requestParameters.ticketId))).replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetTicketResponseFromJSON(jsonValue));
  }
  /**
   * Get Ticket
   * Get Ticket
   */
  async ticketsOne(requestParameters, initOverrides) {
    const response = await this.ticketsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Ticket
   * Update Ticket
   */
  async ticketsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.ticketId === null || requestParameters.ticketId === undefined) {
      throw new RequiredError('ticketId', 'Required parameter requestParameters.ticketId was null or undefined when calling ticketsUpdate.');
    }
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling ticketsUpdate.');
    }
    if (requestParameters.ticket === null || requestParameters.ticket === undefined) {
      throw new RequiredError('ticket', 'Required parameter requestParameters.ticket was null or undefined when calling ticketsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/tickets/{ticket_id}`.replace(`{${'ticket_id'}}`, encodeURIComponent(String(requestParameters.ticketId))).replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: TicketToJSON(requestParameters.ticket)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateTicketResponseFromJSON(jsonValue));
  }
  /**
   * Update Ticket
   * Update Ticket
   */
  async ticketsUpdate(requestParameters, initOverrides) {
    const response = await this.ticketsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Users
   * List Users
   */
  async collectionUsersAllRaw(requestParameters, initOverrides) {
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling collectionUsersAll.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/users`.replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCollectionUsersResponseFromJSON(jsonValue));
  }
  /**
   * List Users
   * List Users
   */
  async collectionUsersAll(requestParameters, initOverrides) {
    const response = await this.collectionUsersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get user
   * Get user
   */
  async collectionUsersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling collectionUsersOne.');
    }
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling collectionUsersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}/users/{id}`.replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCollectionUserResponseFromJSON(jsonValue));
  }
  /**
   * Get user
   * Get user
   */
  async collectionUsersOne(requestParameters, initOverrides) {
    const response = await this.collectionUsersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Collections
   * List Collections
   */
  async collectionsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.passThrough !== undefined) {
      queryParameters['pass_through'] = requestParameters.passThrough;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCollectionsResponseFromJSON(jsonValue));
  }
  /**
   * List Collections
   * List Collections
   */
  async collectionsAll(requestParameters = {}, initOverrides) {
    const response = await this.collectionsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Collection
   * Get Collection
   */
  async collectionsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
      throw new RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling collectionsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/issue-tracking/collections/{collection_id}`.replace(`{${'collection_id'}}`, encodeURIComponent(String(requestParameters.collectionId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetCollectionResponseFromJSON(jsonValue));
  }
  /**
   * Get Collection
   * Get Collection
   */
  async collectionsOne(requestParameters, initOverrides) {
    const response = await this.collectionsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class LeadApi extends BaseAPI {
  /**
   * Create lead
   * Create lead
   */
  async leadsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.lead === null || requestParameters.lead === undefined) {
      throw new RequiredError('lead', 'Required parameter requestParameters.lead was null or undefined when calling leadsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/lead/leads`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: LeadToJSON(requestParameters.lead)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateLeadResponseFromJSON(jsonValue));
  }
  /**
   * Create lead
   * Create lead
   */
  async leadsAdd(requestParameters, initOverrides) {
    const response = await this.leadsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List leads
   * List leads
   */
  async leadsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/lead/leads`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetLeadsResponseFromJSON(jsonValue));
  }
  /**
   * List leads
   * List leads
   */
  async leadsAll(requestParameters = {}, initOverrides) {
    const response = await this.leadsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete lead
   * Delete lead
   */
  async leadsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling leadsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/lead/leads/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteLeadResponseFromJSON(jsonValue));
  }
  /**
   * Delete lead
   * Delete lead
   */
  async leadsDelete(requestParameters, initOverrides) {
    const response = await this.leadsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get lead
   * Get lead
   */
  async leadsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling leadsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/lead/leads/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetLeadResponseFromJSON(jsonValue));
  }
  /**
   * Get lead
   * Get lead
   */
  async leadsOne(requestParameters, initOverrides) {
    const response = await this.leadsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update lead
   * Update lead
   */
  async leadsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling leadsUpdate.');
    }
    if (requestParameters.lead === null || requestParameters.lead === undefined) {
      throw new RequiredError('lead', 'Required parameter requestParameters.lead was null or undefined when calling leadsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/lead/leads/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: LeadToJSON(requestParameters.lead)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateLeadResponseFromJSON(jsonValue));
  }
  /**
   * Update lead
   * Update lead
   */
  async leadsUpdate(requestParameters, initOverrides) {
    const response = await this.leadsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class PosApi extends BaseAPI {
  /**
   * Create Item
   * Create Item
   */
  async itemsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.item === null || requestParameters.item === undefined) {
      throw new RequiredError('item', 'Required parameter requestParameters.item was null or undefined when calling itemsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/items`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ItemToJSON(requestParameters.item)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateItemResponseFromJSON(jsonValue));
  }
  /**
   * Create Item
   * Create Item
   */
  async itemsAdd(requestParameters, initOverrides) {
    const response = await this.itemsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Items
   * List Items
   */
  async itemsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/items`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetItemsResponseFromJSON(jsonValue));
  }
  /**
   * List Items
   * List Items
   */
  async itemsAll(requestParameters = {}, initOverrides) {
    const response = await this.itemsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Item
   * Delete Item
   */
  async itemsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling itemsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/items/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteItemResponseFromJSON(jsonValue));
  }
  /**
   * Delete Item
   * Delete Item
   */
  async itemsDelete(requestParameters, initOverrides) {
    const response = await this.itemsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Item
   * Get Item
   */
  async itemsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling itemsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/items/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetItemResponseFromJSON(jsonValue));
  }
  /**
   * Get Item
   * Get Item
   */
  async itemsOne(requestParameters, initOverrides) {
    const response = await this.itemsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Item
   * Update Item
   */
  async itemsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling itemsUpdate.');
    }
    if (requestParameters.item === null || requestParameters.item === undefined) {
      throw new RequiredError('item', 'Required parameter requestParameters.item was null or undefined when calling itemsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/items/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ItemToJSON(requestParameters.item)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateItemResponseFromJSON(jsonValue));
  }
  /**
   * Update Item
   * Update Item
   */
  async itemsUpdate(requestParameters, initOverrides) {
    const response = await this.itemsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Location
   * Create Location
   */
  async locationsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.location === null || requestParameters.location === undefined) {
      throw new RequiredError('location', 'Required parameter requestParameters.location was null or undefined when calling locationsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/locations`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: LocationToJSON(requestParameters.location)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateLocationResponseFromJSON(jsonValue));
  }
  /**
   * Create Location
   * Create Location
   */
  async locationsAdd(requestParameters, initOverrides) {
    const response = await this.locationsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Locations
   * List Locations
   */
  async locationsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/locations`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetLocationsResponseFromJSON(jsonValue));
  }
  /**
   * List Locations
   * List Locations
   */
  async locationsAll(requestParameters = {}, initOverrides) {
    const response = await this.locationsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Location
   * Delete Location
   */
  async locationsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling locationsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/locations/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteLocationResponseFromJSON(jsonValue));
  }
  /**
   * Delete Location
   * Delete Location
   */
  async locationsDelete(requestParameters, initOverrides) {
    const response = await this.locationsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Location
   * Get Location
   */
  async locationsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling locationsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/locations/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetLocationResponseFromJSON(jsonValue));
  }
  /**
   * Get Location
   * Get Location
   */
  async locationsOne(requestParameters, initOverrides) {
    const response = await this.locationsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Location
   * Update Location
   */
  async locationsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling locationsUpdate.');
    }
    if (requestParameters.location === null || requestParameters.location === undefined) {
      throw new RequiredError('location', 'Required parameter requestParameters.location was null or undefined when calling locationsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/locations/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: LocationToJSON(requestParameters.location)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateLocationResponseFromJSON(jsonValue));
  }
  /**
   * Update Location
   * Update Location
   */
  async locationsUpdate(requestParameters, initOverrides) {
    const response = await this.locationsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Merchant
   * Create Merchant
   */
  async merchantsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.merchant === null || requestParameters.merchant === undefined) {
      throw new RequiredError('merchant', 'Required parameter requestParameters.merchant was null or undefined when calling merchantsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/merchants`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: MerchantToJSON(requestParameters.merchant)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateMerchantResponseFromJSON(jsonValue));
  }
  /**
   * Create Merchant
   * Create Merchant
   */
  async merchantsAdd(requestParameters, initOverrides) {
    const response = await this.merchantsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Merchants
   * List Merchants
   */
  async merchantsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/merchants`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetMerchantsResponseFromJSON(jsonValue));
  }
  /**
   * List Merchants
   * List Merchants
   */
  async merchantsAll(requestParameters = {}, initOverrides) {
    const response = await this.merchantsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Merchant
   * Delete Merchant
   */
  async merchantsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling merchantsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/merchants/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteMerchantResponseFromJSON(jsonValue));
  }
  /**
   * Delete Merchant
   * Delete Merchant
   */
  async merchantsDelete(requestParameters, initOverrides) {
    const response = await this.merchantsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Merchant
   * Get Merchant
   */
  async merchantsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling merchantsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/merchants/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetMerchantResponseFromJSON(jsonValue));
  }
  /**
   * Get Merchant
   * Get Merchant
   */
  async merchantsOne(requestParameters, initOverrides) {
    const response = await this.merchantsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Merchant
   * Update Merchant
   */
  async merchantsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling merchantsUpdate.');
    }
    if (requestParameters.merchant === null || requestParameters.merchant === undefined) {
      throw new RequiredError('merchant', 'Required parameter requestParameters.merchant was null or undefined when calling merchantsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/merchants/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: MerchantToJSON(requestParameters.merchant)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateMerchantResponseFromJSON(jsonValue));
  }
  /**
   * Update Merchant
   * Update Merchant
   */
  async merchantsUpdate(requestParameters, initOverrides) {
    const response = await this.merchantsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Modifier Group
   * Create Modifier Group
   */
  async modifierGroupsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.modifierGroup === null || requestParameters.modifierGroup === undefined) {
      throw new RequiredError('modifierGroup', 'Required parameter requestParameters.modifierGroup was null or undefined when calling modifierGroupsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/modifier-groups`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ModifierGroupToJSON(requestParameters.modifierGroup)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateModifierGroupResponseFromJSON(jsonValue));
  }
  /**
   * Create Modifier Group
   * Create Modifier Group
   */
  async modifierGroupsAdd(requestParameters, initOverrides) {
    const response = await this.modifierGroupsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Modifier Groups
   * List Modifier Groups
   */
  async modifierGroupsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/modifier-groups`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetModifierGroupsResponseFromJSON(jsonValue));
  }
  /**
   * List Modifier Groups
   * List Modifier Groups
   */
  async modifierGroupsAll(requestParameters = {}, initOverrides) {
    const response = await this.modifierGroupsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Modifier Group
   * Delete Modifier Group
   */
  async modifierGroupsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling modifierGroupsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/modifier-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteModifierGroupResponseFromJSON(jsonValue));
  }
  /**
   * Delete Modifier Group
   * Delete Modifier Group
   */
  async modifierGroupsDelete(requestParameters, initOverrides) {
    const response = await this.modifierGroupsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Modifier Group
   * Get Modifier Group
   */
  async modifierGroupsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling modifierGroupsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/modifier-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetModifierGroupResponseFromJSON(jsonValue));
  }
  /**
   * Get Modifier Group
   * Get Modifier Group
   */
  async modifierGroupsOne(requestParameters, initOverrides) {
    const response = await this.modifierGroupsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Modifier Group
   * Update Modifier Group
   */
  async modifierGroupsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling modifierGroupsUpdate.');
    }
    if (requestParameters.modifierGroup === null || requestParameters.modifierGroup === undefined) {
      throw new RequiredError('modifierGroup', 'Required parameter requestParameters.modifierGroup was null or undefined when calling modifierGroupsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/modifier-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ModifierGroupToJSON(requestParameters.modifierGroup)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateModifierGroupResponseFromJSON(jsonValue));
  }
  /**
   * Update Modifier Group
   * Update Modifier Group
   */
  async modifierGroupsUpdate(requestParameters, initOverrides) {
    const response = await this.modifierGroupsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Modifier
   * Create Modifier
   */
  async modifiersAddRaw(requestParameters, initOverrides) {
    if (requestParameters.modifier === null || requestParameters.modifier === undefined) {
      throw new RequiredError('modifier', 'Required parameter requestParameters.modifier was null or undefined when calling modifiersAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/modifiers`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ModifierToJSON(requestParameters.modifier)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateModifierResponseFromJSON(jsonValue));
  }
  /**
   * Create Modifier
   * Create Modifier
   */
  async modifiersAdd(requestParameters, initOverrides) {
    const response = await this.modifiersAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Modifiers
   * List Modifiers
   */
  async modifiersAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/modifiers`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetModifiersResponseFromJSON(jsonValue));
  }
  /**
   * List Modifiers
   * List Modifiers
   */
  async modifiersAll(requestParameters = {}, initOverrides) {
    const response = await this.modifiersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Modifier
   * Delete Modifier
   */
  async modifiersDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling modifiersDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/modifiers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteModifierResponseFromJSON(jsonValue));
  }
  /**
   * Delete Modifier
   * Delete Modifier
   */
  async modifiersDelete(requestParameters, initOverrides) {
    const response = await this.modifiersDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Modifier
   * Get Modifier
   */
  async modifiersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling modifiersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/modifiers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetModifierResponseFromJSON(jsonValue));
  }
  /**
   * Get Modifier
   * Get Modifier
   */
  async modifiersOne(requestParameters, initOverrides) {
    const response = await this.modifiersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Modifier
   * Update Modifier
   */
  async modifiersUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling modifiersUpdate.');
    }
    if (requestParameters.modifier === null || requestParameters.modifier === undefined) {
      throw new RequiredError('modifier', 'Required parameter requestParameters.modifier was null or undefined when calling modifiersUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/modifiers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ModifierToJSON(requestParameters.modifier)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateModifierResponseFromJSON(jsonValue));
  }
  /**
   * Update Modifier
   * Update Modifier
   */
  async modifiersUpdate(requestParameters, initOverrides) {
    const response = await this.modifiersUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Order Type
   * Create Order Type
   */
  async orderTypesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.orderType === null || requestParameters.orderType === undefined) {
      throw new RequiredError('orderType', 'Required parameter requestParameters.orderType was null or undefined when calling orderTypesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/order-types`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: OrderTypeToJSON(requestParameters.orderType)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateOrderTypeResponseFromJSON(jsonValue));
  }
  /**
   * Create Order Type
   * Create Order Type
   */
  async orderTypesAdd(requestParameters, initOverrides) {
    const response = await this.orderTypesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Order Types
   * List Order Types
   */
  async orderTypesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/order-types`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetOrderTypesResponseFromJSON(jsonValue));
  }
  /**
   * List Order Types
   * List Order Types
   */
  async orderTypesAll(requestParameters = {}, initOverrides) {
    const response = await this.orderTypesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Order Type
   * Delete Order Type
   */
  async orderTypesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling orderTypesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/order-types/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteOrderTypeResponseFromJSON(jsonValue));
  }
  /**
   * Delete Order Type
   * Delete Order Type
   */
  async orderTypesDelete(requestParameters, initOverrides) {
    const response = await this.orderTypesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Order Type
   * Get Order Type
   */
  async orderTypesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling orderTypesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/order-types/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetOrderTypeResponseFromJSON(jsonValue));
  }
  /**
   * Get Order Type
   * Get Order Type
   */
  async orderTypesOne(requestParameters, initOverrides) {
    const response = await this.orderTypesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Order Type
   * Update Order Type
   */
  async orderTypesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling orderTypesUpdate.');
    }
    if (requestParameters.orderType === null || requestParameters.orderType === undefined) {
      throw new RequiredError('orderType', 'Required parameter requestParameters.orderType was null or undefined when calling orderTypesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/order-types/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: OrderTypeToJSON(requestParameters.orderType)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateOrderTypeResponseFromJSON(jsonValue));
  }
  /**
   * Update Order Type
   * Update Order Type
   */
  async orderTypesUpdate(requestParameters, initOverrides) {
    const response = await this.orderTypesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Order
   * Create Order
   */
  async ordersAddRaw(requestParameters, initOverrides) {
    if (requestParameters.order === null || requestParameters.order === undefined) {
      throw new RequiredError('order', 'Required parameter requestParameters.order was null or undefined when calling ordersAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/orders`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: OrderToJSON(requestParameters.order)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateOrderResponseFromJSON(jsonValue));
  }
  /**
   * Create Order
   * Create Order
   */
  async ordersAdd(requestParameters, initOverrides) {
    const response = await this.ordersAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Orders
   * List Orders
   */
  async ordersAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.locationId !== undefined) {
      queryParameters['location_id'] = requestParameters.locationId;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/orders`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetOrdersResponseFromJSON(jsonValue));
  }
  /**
   * List Orders
   * List Orders
   */
  async ordersAll(requestParameters = {}, initOverrides) {
    const response = await this.ordersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Order
   * Delete Order
   */
  async ordersDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ordersDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/orders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteOrderResponseFromJSON(jsonValue));
  }
  /**
   * Delete Order
   * Delete Order
   */
  async ordersDelete(requestParameters, initOverrides) {
    const response = await this.ordersDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Order
   * Get Order
   */
  async ordersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ordersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/orders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetOrderResponseFromJSON(jsonValue));
  }
  /**
   * Get Order
   * Get Order
   */
  async ordersOne(requestParameters, initOverrides) {
    const response = await this.ordersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Pay Order
   * Pay Order
   */
  async ordersPayRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ordersPay.');
    }
    if (requestParameters.order === null || requestParameters.order === undefined) {
      throw new RequiredError('order', 'Required parameter requestParameters.order was null or undefined when calling ordersPay.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/orders/{id}/pay`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: OrderToJSON(requestParameters.order)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateOrderResponseFromJSON(jsonValue));
  }
  /**
   * Pay Order
   * Pay Order
   */
  async ordersPay(requestParameters, initOverrides) {
    const response = await this.ordersPayRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Updates an open order by adding, replacing, or deleting fields. Square-only: Orders with a `completed` or `canceled` status cannot be updated. To pay for an order, use the [payments endpoint](#tag/Payments).
   * Update Order
   */
  async ordersUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ordersUpdate.');
    }
    if (requestParameters.order === null || requestParameters.order === undefined) {
      throw new RequiredError('order', 'Required parameter requestParameters.order was null or undefined when calling ordersUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/orders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: OrderToJSON(requestParameters.order)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateOrderResponseFromJSON(jsonValue));
  }
  /**
   * Updates an open order by adding, replacing, or deleting fields. Square-only: Orders with a `completed` or `canceled` status cannot be updated. To pay for an order, use the [payments endpoint](#tag/Payments).
   * Update Order
   */
  async ordersUpdate(requestParameters, initOverrides) {
    const response = await this.ordersUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Payment
   * Create Payment
   */
  async paymentsAddRaw(requestParameters, initOverrides) {
    if (requestParameters.payment === null || requestParameters.payment === undefined) {
      throw new RequiredError('payment', 'Required parameter requestParameters.payment was null or undefined when calling paymentsAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/payments`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: PosPaymentToJSON(requestParameters.payment)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreatePosPaymentResponseFromJSON(jsonValue));
  }
  /**
   * Create Payment
   * Create Payment
   */
  async paymentsAdd(requestParameters, initOverrides) {
    const response = await this.paymentsAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Payments
   * List Payments
   */
  async paymentsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/payments`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetPosPaymentsResponseFromJSON(jsonValue));
  }
  /**
   * List Payments
   * List Payments
   */
  async paymentsAll(requestParameters = {}, initOverrides) {
    const response = await this.paymentsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Payment
   * Delete Payment
   */
  async paymentsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling paymentsDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/payments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeletePosPaymentResponseFromJSON(jsonValue));
  }
  /**
   * Delete Payment
   * Delete Payment
   */
  async paymentsDelete(requestParameters, initOverrides) {
    const response = await this.paymentsDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Payment
   * Get Payment
   */
  async paymentsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling paymentsOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/payments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetPosPaymentResponseFromJSON(jsonValue));
  }
  /**
   * Get Payment
   * Get Payment
   */
  async paymentsOne(requestParameters, initOverrides) {
    const response = await this.paymentsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Payment
   * Update Payment
   */
  async paymentsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling paymentsUpdate.');
    }
    if (requestParameters.payment === null || requestParameters.payment === undefined) {
      throw new RequiredError('payment', 'Required parameter requestParameters.payment was null or undefined when calling paymentsUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/payments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: PosPaymentToJSON(requestParameters.payment)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdatePosPaymentResponseFromJSON(jsonValue));
  }
  /**
   * Update Payment
   * Update Payment
   */
  async paymentsUpdate(requestParameters, initOverrides) {
    const response = await this.paymentsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create Tender
   * Create Tender
   */
  async tendersAddRaw(requestParameters, initOverrides) {
    if (requestParameters.tender === null || requestParameters.tender === undefined) {
      throw new RequiredError('tender', 'Required parameter requestParameters.tender was null or undefined when calling tendersAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/tenders`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: TenderToJSON(requestParameters.tender)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateTenderResponseFromJSON(jsonValue));
  }
  /**
   * Create Tender
   * Create Tender
   */
  async tendersAdd(requestParameters, initOverrides) {
    const response = await this.tendersAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Tenders
   * List Tenders
   */
  async tendersAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/tenders`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetTendersResponseFromJSON(jsonValue));
  }
  /**
   * List Tenders
   * List Tenders
   */
  async tendersAll(requestParameters = {}, initOverrides) {
    const response = await this.tendersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Tender
   * Delete Tender
   */
  async tendersDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling tendersDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/tenders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteTenderResponseFromJSON(jsonValue));
  }
  /**
   * Delete Tender
   * Delete Tender
   */
  async tendersDelete(requestParameters, initOverrides) {
    const response = await this.tendersDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Tender
   * Get Tender
   */
  async tendersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling tendersOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/tenders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetTenderResponseFromJSON(jsonValue));
  }
  /**
   * Get Tender
   * Get Tender
   */
  async tendersOne(requestParameters, initOverrides) {
    const response = await this.tendersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Tender
   * Update Tender
   */
  async tendersUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling tendersUpdate.');
    }
    if (requestParameters.tender === null || requestParameters.tender === undefined) {
      throw new RequiredError('tender', 'Required parameter requestParameters.tender was null or undefined when calling tendersUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/pos/tenders/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: TenderToJSON(requestParameters.tender)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateTenderResponseFromJSON(jsonValue));
  }
  /**
   * Update Tender
   * Update Tender
   */
  async tendersUpdate(requestParameters, initOverrides) {
    const response = await this.tendersUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class SmsApi extends BaseAPI {
  /**
   * Create Message
   * Create Message
   */
  async messagesAddRaw(requestParameters, initOverrides) {
    if (requestParameters.message === null || requestParameters.message === undefined) {
      throw new RequiredError('message', 'Required parameter requestParameters.message was null or undefined when calling messagesAdd.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/sms/messages`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: MessageToJSON(requestParameters.message)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateMessageResponseFromJSON(jsonValue));
  }
  /**
   * Create Message
   * Create Message
   */
  async messagesAdd(requestParameters, initOverrides) {
    const response = await this.messagesAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List Messages
   * List Messages
   */
  async messagesAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/sms/messages`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetMessagesResponseFromJSON(jsonValue));
  }
  /**
   * List Messages
   * List Messages
   */
  async messagesAll(requestParameters = {}, initOverrides) {
    const response = await this.messagesAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete Message
   * Delete Message
   */
  async messagesDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling messagesDelete.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/sms/messages/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteMessageResponseFromJSON(jsonValue));
  }
  /**
   * Delete Message
   * Delete Message
   */
  async messagesDelete(requestParameters, initOverrides) {
    const response = await this.messagesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get Message
   * Get Message
   */
  async messagesOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling messagesOne.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/sms/messages/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetMessageResponseFromJSON(jsonValue));
  }
  /**
   * Get Message
   * Get Message
   */
  async messagesOne(requestParameters, initOverrides) {
    const response = await this.messagesOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update Message
   * Update Message
   */
  async messagesUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling messagesUpdate.');
    }
    if (requestParameters.message === null || requestParameters.message === undefined) {
      throw new RequiredError('message', 'Required parameter requestParameters.message was null or undefined when calling messagesUpdate.');
    }
    const queryParameters = {};
    if (requestParameters.raw !== undefined) {
      queryParameters['raw'] = requestParameters.raw;
    }
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.serviceId !== undefined && requestParameters.serviceId !== null) {
      headerParameters['x-apideck-service-id'] = String(requestParameters.serviceId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/sms/messages/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: MessageToJSON(requestParameters.message)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateMessageResponseFromJSON(jsonValue));
  }
  /**
   * Update Message
   * Update Message
   */
  async messagesUpdate(requestParameters, initOverrides) {
    const response = await this.messagesUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class VaultApi extends BaseAPI {
  /**
   * This endpoint returns custom settings and their defaults required by connection for a given resource.
   * Get resource settings
   */
  async connectionSettingsAllRaw(requestParameters, initOverrides) {
    if (requestParameters.unifiedApi === null || requestParameters.unifiedApi === undefined) {
      throw new RequiredError('unifiedApi', 'Required parameter requestParameters.unifiedApi was null or undefined when calling connectionSettingsAll.');
    }
    if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
      throw new RequiredError('serviceId', 'Required parameter requestParameters.serviceId was null or undefined when calling connectionSettingsAll.');
    }
    if (requestParameters.resource === null || requestParameters.resource === undefined) {
      throw new RequiredError('resource', 'Required parameter requestParameters.resource was null or undefined when calling connectionSettingsAll.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/connections/{unified_api}/{service_id}/{resource}/config`.replace(`{${'unified_api'}}`, encodeURIComponent(String(requestParameters.unifiedApi))).replace(`{${'service_id'}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${'resource'}}`, encodeURIComponent(String(requestParameters.resource))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetConnectionResponseFromJSON(jsonValue));
  }
  /**
   * This endpoint returns custom settings and their defaults required by connection for a given resource.
   * Get resource settings
   */
  async connectionSettingsAll(requestParameters, initOverrides) {
    const response = await this.connectionSettingsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update default values for a connection\'s resource settings
   * Update settings
   */
  async connectionSettingsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
      throw new RequiredError('serviceId', 'Required parameter requestParameters.serviceId was null or undefined when calling connectionSettingsUpdate.');
    }
    if (requestParameters.unifiedApi === null || requestParameters.unifiedApi === undefined) {
      throw new RequiredError('unifiedApi', 'Required parameter requestParameters.unifiedApi was null or undefined when calling connectionSettingsUpdate.');
    }
    if (requestParameters.resource === null || requestParameters.resource === undefined) {
      throw new RequiredError('resource', 'Required parameter requestParameters.resource was null or undefined when calling connectionSettingsUpdate.');
    }
    if (requestParameters.connection === null || requestParameters.connection === undefined) {
      throw new RequiredError('connection', 'Required parameter requestParameters.connection was null or undefined when calling connectionSettingsUpdate.');
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/connections/{unified_api}/{service_id}/{resource}/config`.replace(`{${'service_id'}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${'unified_api'}}`, encodeURIComponent(String(requestParameters.unifiedApi))).replace(`{${'resource'}}`, encodeURIComponent(String(requestParameters.resource))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ConnectionToJSON(requestParameters.connection)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateConnectionResponseFromJSON(jsonValue));
  }
  /**
   * Update default values for a connection\'s resource settings
   * Update settings
   */
  async connectionSettingsUpdate(requestParameters, initOverrides) {
    const response = await this.connectionSettingsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
   * Get all connections
   */
  async connectionsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.api !== undefined) {
      queryParameters['api'] = requestParameters.api;
    }
    if (requestParameters.configured !== undefined) {
      queryParameters['configured'] = requestParameters.configured;
    }
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/connections`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetConnectionsResponseFromJSON(jsonValue));
  }
  /**
   * This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
   * Get all connections
   */
  async connectionsAll(requestParameters = {}, initOverrides) {
    const response = await this.connectionsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Deletes a connection
   * Deletes a connection
   */
  async connectionsDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
      throw new RequiredError('serviceId', 'Required parameter requestParameters.serviceId was null or undefined when calling connectionsDelete.');
    }
    if (requestParameters.unifiedApi === null || requestParameters.unifiedApi === undefined) {
      throw new RequiredError('unifiedApi', 'Required parameter requestParameters.unifiedApi was null or undefined when calling connectionsDelete.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/connections/{unified_api}/{service_id}`.replace(`{${'service_id'}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${'unified_api'}}`, encodeURIComponent(String(requestParameters.unifiedApi))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new VoidApiResponse(response);
  }
  /**
   * Deletes a connection
   * Deletes a connection
   */
  async connectionsDelete(requestParameters, initOverrides) {
    await this.connectionsDeleteRaw(requestParameters, initOverrides);
  }
  /**
   * Import an authorized connection.
   * Import connection
   */
  async connectionsImportRaw(requestParameters, initOverrides) {
    if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
      throw new RequiredError('serviceId', 'Required parameter requestParameters.serviceId was null or undefined when calling connectionsImport.');
    }
    if (requestParameters.unifiedApi === null || requestParameters.unifiedApi === undefined) {
      throw new RequiredError('unifiedApi', 'Required parameter requestParameters.unifiedApi was null or undefined when calling connectionsImport.');
    }
    if (requestParameters.connection === null || requestParameters.connection === undefined) {
      throw new RequiredError('connection', 'Required parameter requestParameters.connection was null or undefined when calling connectionsImport.');
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/connections/{unified_api}/{service_id}/import`.replace(`{${'service_id'}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${'unified_api'}}`, encodeURIComponent(String(requestParameters.unifiedApi))),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ConnectionImportDataToJSON(requestParameters.connection)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateConnectionResponseFromJSON(jsonValue));
  }
  /**
   * Import an authorized connection.
   * Import connection
   */
  async connectionsImport(requestParameters, initOverrides) {
    const response = await this.connectionsImportRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get a connection
   * Get connection
   */
  async connectionsOneRaw(requestParameters, initOverrides) {
    if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
      throw new RequiredError('serviceId', 'Required parameter requestParameters.serviceId was null or undefined when calling connectionsOne.');
    }
    if (requestParameters.unifiedApi === null || requestParameters.unifiedApi === undefined) {
      throw new RequiredError('unifiedApi', 'Required parameter requestParameters.unifiedApi was null or undefined when calling connectionsOne.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/connections/{unified_api}/{service_id}`.replace(`{${'service_id'}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${'unified_api'}}`, encodeURIComponent(String(requestParameters.unifiedApi))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetConnectionResponseFromJSON(jsonValue));
  }
  /**
   * Get a connection
   * Get connection
   */
  async connectionsOne(requestParameters, initOverrides) {
    const response = await this.connectionsOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update a connection
   * Update connection
   */
  async connectionsUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
      throw new RequiredError('serviceId', 'Required parameter requestParameters.serviceId was null or undefined when calling connectionsUpdate.');
    }
    if (requestParameters.unifiedApi === null || requestParameters.unifiedApi === undefined) {
      throw new RequiredError('unifiedApi', 'Required parameter requestParameters.unifiedApi was null or undefined when calling connectionsUpdate.');
    }
    if (requestParameters.connection === null || requestParameters.connection === undefined) {
      throw new RequiredError('connection', 'Required parameter requestParameters.connection was null or undefined when calling connectionsUpdate.');
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/connections/{unified_api}/{service_id}`.replace(`{${'service_id'}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${'unified_api'}}`, encodeURIComponent(String(requestParameters.unifiedApi))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: ConnectionToJSON(requestParameters.connection)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateConnectionResponseFromJSON(jsonValue));
  }
  /**
   * Update a connection
   * Update connection
   */
  async connectionsUpdate(requestParameters, initOverrides) {
    const response = await this.connectionsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get consumer request counts within a given datetime range.
   * Consumer request counts
   */
  async consumerRequestCountsAllRaw(requestParameters, initOverrides) {
    if (requestParameters.consumerId === null || requestParameters.consumerId === undefined) {
      throw new RequiredError('consumerId', 'Required parameter requestParameters.consumerId was null or undefined when calling consumerRequestCountsAll.');
    }
    if (requestParameters.startDatetime === null || requestParameters.startDatetime === undefined) {
      throw new RequiredError('startDatetime', 'Required parameter requestParameters.startDatetime was null or undefined when calling consumerRequestCountsAll.');
    }
    if (requestParameters.endDatetime === null || requestParameters.endDatetime === undefined) {
      throw new RequiredError('endDatetime', 'Required parameter requestParameters.endDatetime was null or undefined when calling consumerRequestCountsAll.');
    }
    const queryParameters = {};
    if (requestParameters.startDatetime !== undefined) {
      queryParameters['start_datetime'] = requestParameters.startDatetime;
    }
    if (requestParameters.endDatetime !== undefined) {
      queryParameters['end_datetime'] = requestParameters.endDatetime;
    }
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/consumers/{consumer_id}/stats`.replace(`{${'consumer_id'}}`, encodeURIComponent(String(requestParameters.consumerId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => ConsumerRequestCountsInDateRangeResponseFromJSON(jsonValue));
  }
  /**
   * Get consumer request counts within a given datetime range.
   * Consumer request counts
   */
  async consumerRequestCountsAll(requestParameters, initOverrides) {
    const response = await this.consumerRequestCountsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create a consumer
   * Create consumer
   */
  async consumersAddRaw(requestParameters, initOverrides) {
    if (requestParameters.consumer === null || requestParameters.consumer === undefined) {
      throw new RequiredError('consumer', 'Required parameter requestParameters.consumer was null or undefined when calling consumersAdd.');
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/consumers`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ConsumerToJSON(requestParameters.consumer)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateConsumerResponseFromJSON(jsonValue));
  }
  /**
   * Create a consumer
   * Create consumer
   */
  async consumersAdd(requestParameters, initOverrides) {
    const response = await this.consumersAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * This endpoint includes all application consumers, along with an aggregated count of requests made.
   * Get all consumers
   */
  async consumersAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/consumers`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetConsumersResponseFromJSON(jsonValue));
  }
  /**
   * This endpoint includes all application consumers, along with an aggregated count of requests made.
   * Get all consumers
   */
  async consumersAll(requestParameters = {}, initOverrides) {
    const response = await this.consumersAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete consumer and all their connections, including credentials.
   * Delete consumer
   */
  async consumersDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.consumerId === null || requestParameters.consumerId === undefined) {
      throw new RequiredError('consumerId', 'Required parameter requestParameters.consumerId was null or undefined when calling consumersDelete.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/consumers/{consumer_id}`.replace(`{${'consumer_id'}}`, encodeURIComponent(String(requestParameters.consumerId))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteConsumerResponseFromJSON(jsonValue));
  }
  /**
   * Delete consumer and all their connections, including credentials.
   * Delete consumer
   */
  async consumersDelete(requestParameters, initOverrides) {
    const response = await this.consumersDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Consumer detail including their aggregated counts with the connections they have authorized.
   * Get consumer
   */
  async consumersOneRaw(requestParameters, initOverrides) {
    if (requestParameters.consumerId === null || requestParameters.consumerId === undefined) {
      throw new RequiredError('consumerId', 'Required parameter requestParameters.consumerId was null or undefined when calling consumersOne.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/consumers/{consumer_id}`.replace(`{${'consumer_id'}}`, encodeURIComponent(String(requestParameters.consumerId))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetConsumerResponseFromJSON(jsonValue));
  }
  /**
   * Consumer detail including their aggregated counts with the connections they have authorized.
   * Get consumer
   */
  async consumersOne(requestParameters, initOverrides) {
    const response = await this.consumersOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update consumer metadata such as name and email.
   * Update consumer
   */
  async consumersUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.consumerId === null || requestParameters.consumerId === undefined) {
      throw new RequiredError('consumerId', 'Required parameter requestParameters.consumerId was null or undefined when calling consumersUpdate.');
    }
    if (requestParameters.consumer === null || requestParameters.consumer === undefined) {
      throw new RequiredError('consumer', 'Required parameter requestParameters.consumer was null or undefined when calling consumersUpdate.');
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/consumers/{consumer_id}`.replace(`{${'consumer_id'}}`, encodeURIComponent(String(requestParameters.consumerId))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: UpdateConsumerRequestToJSON(requestParameters.consumer)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateConsumerResponseFromJSON(jsonValue));
  }
  /**
   * Update consumer metadata such as name and email.
   * Update consumer
   */
  async consumersUpdate(requestParameters, initOverrides) {
    const response = await this.consumersUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * This endpoint includes all consumer request logs.
   * Get all consumer request logs
   */
  async logsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/logs`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetLogsResponseFromJSON(jsonValue));
  }
  /**
   * This endpoint includes all consumer request logs.
   * Get all consumer request logs
   */
  async logsAll(requestParameters = {}, initOverrides) {
    const response = await this.logsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned URL to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
   * Create Session
   */
  async sessionsCreateRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.consumerId !== undefined && requestParameters.consumerId !== null) {
      headerParameters['x-apideck-consumer-id'] = String(requestParameters.consumerId);
    }
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/vault/sessions`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: SessionToJSON(requestParameters.session)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateSessionResponseFromJSON(jsonValue));
  }
  /**
   * Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned URL to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
   * Create Session
   */
  async sessionsCreate(requestParameters = {}, initOverrides) {
    const response = await this.sessionsCreateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/* tslint:disable */
/**
 *
 */
class WebhookApi extends BaseAPI {
  /**
   * List event logs
   * List event logs
   */
  async eventLogsAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter;
    }
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/logs`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetWebhookEventLogsResponseFromJSON(jsonValue));
  }
  /**
   * List event logs
   * List event logs
   */
  async eventLogsAll(requestParameters = {}, initOverrides) {
    const response = await this.eventLogsAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Create a webhook subscription to receive events
   * Create webhook subscription
   */
  async webhooksAddRaw(requestParameters, initOverrides) {
    if (requestParameters.webhook === null || requestParameters.webhook === undefined) {
      throw new RequiredError('webhook', 'Required parameter requestParameters.webhook was null or undefined when calling webhooksAdd.');
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/webhooks`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateWebhookRequestToJSON(requestParameters.webhook)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => CreateWebhookResponseFromJSON(jsonValue));
  }
  /**
   * Create a webhook subscription to receive events
   * Create webhook subscription
   */
  async webhooksAdd(requestParameters, initOverrides) {
    const response = await this.webhooksAddRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * List all webhook subscriptions
   * List webhook subscriptions
   */
  async webhooksAllRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.cursor !== undefined) {
      queryParameters['cursor'] = requestParameters.cursor;
    }
    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/webhooks`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetWebhooksResponseFromJSON(jsonValue));
  }
  /**
   * List all webhook subscriptions
   * List webhook subscriptions
   */
  async webhooksAll(requestParameters = {}, initOverrides) {
    const response = await this.webhooksAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Delete a webhook subscription
   * Delete webhook subscription
   */
  async webhooksDeleteRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling webhooksDelete.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/webhooks/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => DeleteWebhookResponseFromJSON(jsonValue));
  }
  /**
   * Delete a webhook subscription
   * Delete webhook subscription
   */
  async webhooksDelete(requestParameters, initOverrides) {
    const response = await this.webhooksDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Get the webhook subscription details
   * Get webhook subscription
   */
  async webhooksOneRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling webhooksOne.');
    }
    const queryParameters = {};
    const headerParameters = {};
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/webhooks/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => GetWebhookResponseFromJSON(jsonValue));
  }
  /**
   * Get the webhook subscription details
   * Get webhook subscription
   */
  async webhooksOne(requestParameters, initOverrides) {
    const response = await this.webhooksOneRaw(requestParameters, initOverrides);
    return await response.value();
  }
  /**
   * Update a webhook subscription
   * Update webhook subscription
   */
  async webhooksUpdateRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling webhooksUpdate.');
    }
    if (requestParameters.webhook === null || requestParameters.webhook === undefined) {
      throw new RequiredError('webhook', 'Required parameter requestParameters.webhook was null or undefined when calling webhooksUpdate.');
    }
    const queryParameters = {};
    const headerParameters = {};
    headerParameters['Content-Type'] = 'application/json';
    if (requestParameters.appId !== undefined && requestParameters.appId !== null) {
      headerParameters['x-apideck-app-id'] = String(requestParameters.appId);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // apiKey authentication
    }

    const response = await this.request({
      path: `/webhook/webhooks/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: UpdateWebhookRequestToJSON(requestParameters.webhook)
    }, initOverrides);
    return new JSONApiResponse(response, jsonValue => UpdateWebhookResponseFromJSON(jsonValue));
  }
  /**
   * Update a webhook subscription
   * Update webhook subscription
   */
  async webhooksUpdate(requestParameters, initOverrides) {
    const response = await this.webhooksUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

const toReadableStream = (input, partSize) => {
  return Readable.from(input, {
    objectMode: false,
    highWaterMark: partSize
  });
};
class Utils {
  constructor(apideck) {
    this.apideck = apideck;
  }
  async uploadFile(options) {
    var _options$appId, _options$consumerId, _options$serviceId, _options$parentFolder2;
    const appId = (_options$appId = options.appId) != null ? _options$appId : this.apideck.config.appId;
    const consumerId = (_options$consumerId = options.consumerId) != null ? _options$consumerId : this.apideck.config.consumerId;
    const serviceId = (_options$serviceId = options.serviceId) != null ? _options$serviceId : this.apideck.config.serviceId;
    if (options.size <= 4000000) {
      var _options$contentType, _options$parentFolder;
      const response = await this.apideck.fileStorage['fetchApi'](`https://unify.apideck.com/file-storage/files`, {
        method: 'POST',
        headers: {
          'Content-Type': (_options$contentType = options.contentType) != null ? _options$contentType : 'application/octet-stream',
          Authorization: `Bearer ${this.apideck.config.apiKey}`,
          'x-apideck-app-id': appId,
          'x-apideck-consumer-id': consumerId,
          'x-apideck-service-id': serviceId,
          'x-apideck-metadata': JSON.stringify({
            name: options.name,
            parent_folder_id: (_options$parentFolder = options.parentFolderId) != null ? _options$parentFolder : 'root'
          })
        },
        body: options.file
      });
      const {
        data: {
          id
        }
      } = await response.json();
      const fileResponse = await this.apideck.fileStorage['fetchApi'](`https://unify.apideck.com/file-storage/files/${id}`, {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${this.apideck.config.apiKey}`,
          'x-apideck-app-id': appId,
          'x-apideck-consumer-id': consumerId,
          'x-apideck-service-id': serviceId
        }
      });
      const {
        data: file
      } = await fileResponse.json();
      return file;
    }
    const {
      data: {
        id: sessionId
      }
    } = await this.apideck.fileStorage.uploadSessionsAdd({
      uploadSession: {
        size: options.size,
        name: options.name,
        parent_folder_id: (_options$parentFolder2 = options.parentFolderId) != null ? _options$parentFolder2 : 'root'
      },
      appId,
      consumerId,
      serviceId
    });
    const cleanSessionId = sessionId.replace('=', '');
    const {
      data: session
    } = await this.apideck.fileStorage.uploadSessionsOne({
      id: cleanSessionId,
      appId,
      consumerId,
      serviceId
    });
    const partSize = session.part_size;
    const stream = toReadableStream(options.file, partSize);
    stream.pause();
    let chunk = stream.read(partSize);
    let index = 0;
    while (chunk) {
      var _options$contentType2;
      await this.apideck.fileStorage['fetchApi'](`https://unify.apideck.com/file-storage/upload-sessions/${sessionId}?part_number=${index}`, {
        method: 'PUT',
        headers: {
          'Content-Type': (_options$contentType2 = options.contentType) != null ? _options$contentType2 : 'application/octet-stream',
          Authorization: `Bearer ${this.apideck.config.apiKey}`,
          'x-apideck-app-id': appId,
          'x-apideck-consumer-id': consumerId,
          'x-apideck-service-id': serviceId
        },
        body: chunk
      });
      chunk = stream.read(partSize);
      index++;
    }
    const {
      data
    } = await this.apideck.fileStorage.uploadSessionsFinish({
      id: cleanSessionId,
      body: {},
      appId,
      consumerId,
      serviceId
    });
    return data;
  }
}

const isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
class Apideck {
  constructor(config) {
    this.config = config;
    if (!isNode) {
      console.warn("THIS IS A SERVERSIDE (Node.JS) LIBRARY AND SHOULDN'T BE USED IN THE BROWSER AS YOU RISK LEAKING YOUR API KEYS.");
    }
    const configuration = new Configuration({
      fetchApi: (url, options) => fetch$1(url, {
        highWaterMark: 10000000,
        ...options
      }),
      basePath: config.basePath,
      apiKey: `Bearer ${config.apiKey}`,
      headers: {
        'x-apideck-app-id': config.appId,
        'x-apideck-consumer-id': config.consumerId || '',
        'x-apideck-service-id': (config == null ? void 0 : config.serviceId) || ''
      }
    });
    this.accounting = new AccountingApi(configuration);
    this.ats = new AtsApi(configuration);
    this.connector = new ConnectorApi(configuration);
    this.crm = new CrmApi(configuration);
    this.ecommerce = new EcommerceApi(configuration);
    this.fileStorage = new FileStorageApi(configuration);
    this.hris = new HrisApi(configuration);
    this.issueTracking = new IssueTrackingApi(configuration);
    this.lead = new LeadApi(configuration);
    this.pos = new PosApi(configuration);
    this.sms = new SmsApi(configuration);
    this.vault = new VaultApi(configuration);
    this.webhook = new WebhookApi(configuration);
    this.utils = new Utils(this);
  }
}

export default Apideck;
export { AccountingApi, AccountingEventType, AccountingEventTypeFromJSON, AccountingEventTypeFromJSONTyped, AccountingEventTypeToJSON, ActivitiesFilterFromJSON, ActivitiesFilterFromJSONTyped, ActivitiesFilterToJSON, ActivityAttendeeFromJSON, ActivityAttendeeFromJSONTyped, ActivityAttendeeStatus, ActivityAttendeeToJSON, ActivityFromJSON, ActivityFromJSONTyped, ActivityShowAs, ActivityToJSON, ActivityType, AddressFromJSON, AddressFromJSONTyped, AddressToJSON, AddressType, ApiFromJSON, ApiFromJSONTyped, ApiResourceCoverageCoverageFromJSON, ApiResourceCoverageCoverageFromJSONTyped, ApiResourceCoverageCoverageToJSON, ApiResourceCoverageFromJSON, ApiResourceCoverageFromJSONTyped, ApiResourceCoverageToJSON, ApiResourceFromJSON, ApiResourceFromJSONTyped, ApiResourceLinkedResourcesFromJSON, ApiResourceLinkedResourcesFromJSONTyped, ApiResourceLinkedResourcesToJSON, ApiResourceToJSON, ApiResourcesFromJSON, ApiResourcesFromJSONTyped, ApiResourcesToJSON, ApiStatus, ApiStatusFromJSON, ApiStatusFromJSONTyped, ApiStatusToJSON, ApiToJSON, ApiType, Apideck, ApisFilterFromJSON, ApisFilterFromJSONTyped, ApisFilterToJSON, ApplicantFromJSON, ApplicantFromJSONTyped, ApplicantSocialLinksFromJSON, ApplicantSocialLinksFromJSONTyped, ApplicantSocialLinksToJSON, ApplicantToJSON, ApplicantWebsitesFromJSON, ApplicantWebsitesFromJSONTyped, ApplicantWebsitesToJSON, ApplicantWebsitesType, ApplicantsFilterFromJSON, ApplicantsFilterFromJSONTyped, ApplicantsFilterToJSON, ApplicationFromJSON, ApplicationFromJSONTyped, ApplicationStageFromJSON, ApplicationStageFromJSONTyped, ApplicationStageToJSON, ApplicationStatus, ApplicationToJSON, AssigneeFromJSON, AssigneeFromJSONTyped, AssigneeToJSON, AtsActivityFromJSON, AtsActivityFromJSONTyped, AtsActivityToJSON, AtsApi, AtsEventType, AtsEventTypeFromJSON, AtsEventTypeFromJSONTyped, AtsEventTypeToJSON, AuthType, AuthTypeFromJSON, AuthTypeFromJSONTyped, AuthTypeToJSON, BASE_PATH, BadRequestResponseFromJSON, BadRequestResponseFromJSONTyped, BadRequestResponseToJSON, BalanceSheetAssetsCurrentAssetsAccountsFromJSON, BalanceSheetAssetsCurrentAssetsAccountsFromJSONTyped, BalanceSheetAssetsCurrentAssetsAccountsToJSON, BalanceSheetAssetsCurrentAssetsFromJSON, BalanceSheetAssetsCurrentAssetsFromJSONTyped, BalanceSheetAssetsCurrentAssetsToJSON, BalanceSheetAssetsFixedAssetsAccountsFromJSON, BalanceSheetAssetsFixedAssetsAccountsFromJSONTyped, BalanceSheetAssetsFixedAssetsAccountsToJSON, BalanceSheetAssetsFixedAssetsFromJSON, BalanceSheetAssetsFixedAssetsFromJSONTyped, BalanceSheetAssetsFixedAssetsToJSON, BalanceSheetAssetsFromJSON, BalanceSheetAssetsFromJSONTyped, BalanceSheetAssetsToJSON, BalanceSheetEquityFromJSON, BalanceSheetEquityFromJSONTyped, BalanceSheetEquityItemsFromJSON, BalanceSheetEquityItemsFromJSONTyped, BalanceSheetEquityItemsToJSON, BalanceSheetEquityToJSON, BalanceSheetFilterFromJSON, BalanceSheetFilterFromJSONTyped, BalanceSheetFilterToJSON, BalanceSheetFromJSON, BalanceSheetFromJSONTyped, BalanceSheetLiabilitiesAccountsFromJSON, BalanceSheetLiabilitiesAccountsFromJSONTyped, BalanceSheetLiabilitiesAccountsToJSON, BalanceSheetLiabilitiesFromJSON, BalanceSheetLiabilitiesFromJSONTyped, BalanceSheetLiabilitiesToJSON, BalanceSheetToJSON, BankAccountAccountType, BankAccountFromJSON, BankAccountFromJSONTyped, BankAccountToJSON, BaseAPI, BenefitFromJSON, BenefitFromJSONTyped, BenefitToJSON, BillFromJSON, BillFromJSONTyped, BillLineItemFromJSON, BillLineItemFromJSONTyped, BillLineItemToJSON, BillLineItemType, BillStatus, BillToJSON, BillsSortBy, BillsSortFromJSON, BillsSortFromJSONTyped, BillsSortToJSON, BlobApiResponse, BranchFromJSON, BranchFromJSONTyped, BranchToJSON, COLLECTION_FORMATS, CashDetailsFromJSON, CashDetailsFromJSONTyped, CashDetailsToJSON, CollectionFromJSON, CollectionFromJSONTyped, CollectionTagFromJSON, CollectionTagFromJSONTyped, CollectionTagToJSON, CollectionTicketCommentFromJSON, CollectionTicketCommentFromJSONTyped, CollectionTicketCommentToJSON, CollectionToJSON, CollectionUserFromJSON, CollectionUserFromJSONTyped, CollectionUserToJSON, CollectionsSortBy, CollectionsSortFromJSON, CollectionsSortFromJSONTyped, CollectionsSortToJSON, CommentsSortBy, CommentsSortFromJSON, CommentsSortFromJSONTyped, CommentsSortToJSON, CompaniesFilterFromJSON, CompaniesFilterFromJSONTyped, CompaniesFilterToJSON, CompaniesSortBy, CompaniesSortFromJSON, CompaniesSortFromJSONTyped, CompaniesSortToJSON, CompanyFromJSON, CompanyFromJSONTyped, CompanyInfoFiscalYearStartMonth, CompanyInfoFromJSON, CompanyInfoFromJSONTyped, CompanyInfoStatus, CompanyInfoToJSON, CompanyRowTypeFromJSON, CompanyRowTypeFromJSONTyped, CompanyRowTypeToJSON, CompanyToJSON, CompensationFromJSON, CompensationFromJSONTyped, CompensationToJSON, Configuration, ConnectionConfigurationFromJSON, ConnectionConfigurationFromJSONTyped, ConnectionConfigurationToJSON, ConnectionDefaultsFromJSON, ConnectionDefaultsFromJSONTyped, ConnectionDefaultsTarget, ConnectionDefaultsToJSON, ConnectionFromJSON, ConnectionFromJSONTyped, ConnectionImportDataCredentialsFromJSON, ConnectionImportDataCredentialsFromJSONTyped, ConnectionImportDataCredentialsToJSON, ConnectionImportDataFromJSON, ConnectionImportDataFromJSONTyped, ConnectionImportDataToJSON, ConnectionMetadataFromJSON, ConnectionMetadataFromJSONTyped, ConnectionMetadataToJSON, ConnectionState, ConnectionStateFromJSON, ConnectionStateFromJSONTyped, ConnectionStateToJSON, ConnectionStatus, ConnectionToJSON, ConnectionWebhookDisabledReason, ConnectionWebhookEvents, ConnectionWebhookFromJSON, ConnectionWebhookFromJSONTyped, ConnectionWebhookStatus, ConnectionWebhookToJSON, ConnectorApi, ConnectorAuthType, ConnectorDocAudience, ConnectorDocFormat, ConnectorDocFromJSON, ConnectorDocFromJSONTyped, ConnectorDocToJSON, ConnectorEventEventSource, ConnectorEventFromJSON, ConnectorEventFromJSONTyped, ConnectorEventToJSON, ConnectorFromJSON, ConnectorFromJSONTyped, ConnectorOauthCredentialsSource, ConnectorOauthGrantType, ConnectorOauthScopes1FromJSON, ConnectorOauthScopes1FromJSONTyped, ConnectorOauthScopes1ToJSON, ConnectorOauthScopesFromJSON, ConnectorOauthScopesFromJSONTyped, ConnectorOauthScopesToJSON, ConnectorResourceFromJSON, ConnectorResourceFromJSONTyped, ConnectorResourceToJSON, ConnectorSettingFromJSON, ConnectorSettingFromJSONTyped, ConnectorSettingToJSON, ConnectorSettingType, ConnectorStatus, ConnectorStatusFromJSON, ConnectorStatusFromJSONTyped, ConnectorStatusToJSON, ConnectorTlsSupportFromJSON, ConnectorTlsSupportFromJSONTyped, ConnectorTlsSupportToJSON, ConnectorToJSON, ConnectorUnifiedApisFromJSON, ConnectorUnifiedApisFromJSONTyped, ConnectorUnifiedApisToJSON, ConnectorsFilterFromJSON, ConnectorsFilterFromJSONTyped, ConnectorsFilterToJSON, ConsumerConnectionFromJSON, ConsumerConnectionFromJSONTyped, ConsumerConnectionState, ConsumerConnectionToJSON, ConsumerFromJSON, ConsumerFromJSONTyped, ConsumerMetadataFromJSON, ConsumerMetadataFromJSONTyped, ConsumerMetadataToJSON, ConsumerRequestCountsInDateRangeResponseDataFromJSON, ConsumerRequestCountsInDateRangeResponseDataFromJSONTyped, ConsumerRequestCountsInDateRangeResponseDataToJSON, ConsumerRequestCountsInDateRangeResponseFromJSON, ConsumerRequestCountsInDateRangeResponseFromJSONTyped, ConsumerRequestCountsInDateRangeResponseToJSON, ConsumerToJSON, ContactFromJSON, ContactFromJSONTyped, ContactGender, ContactToJSON, ContactType, ContactsFilterFromJSON, ContactsFilterFromJSONTyped, ContactsFilterToJSON, ContactsSortBy, ContactsSortFromJSON, ContactsSortFromJSONTyped, ContactsSortToJSON, CopyFolderRequestFromJSON, CopyFolderRequestFromJSONTyped, CopyFolderRequestToJSON, CreateActivityResponseFromJSON, CreateActivityResponseFromJSONTyped, CreateActivityResponseToJSON, CreateApplicantResponseFromJSON, CreateApplicantResponseFromJSONTyped, CreateApplicantResponseToJSON, CreateApplicationResponseFromJSON, CreateApplicationResponseFromJSONTyped, CreateApplicationResponseToJSON, CreateBillResponseFromJSON, CreateBillResponseFromJSONTyped, CreateBillResponseToJSON, CreateCommentResponseFromJSON, CreateCommentResponseFromJSONTyped, CreateCommentResponseToJSON, CreateCompanyResponseFromJSON, CreateCompanyResponseFromJSONTyped, CreateCompanyResponseToJSON, CreateConnectionResponseFromJSON, CreateConnectionResponseFromJSONTyped, CreateConnectionResponseToJSON, CreateConsumerResponseFromJSON, CreateConsumerResponseFromJSONTyped, CreateConsumerResponseToJSON, CreateContactResponseFromJSON, CreateContactResponseFromJSONTyped, CreateContactResponseToJSON, CreateCreditNoteResponseFromJSON, CreateCreditNoteResponseFromJSONTyped, CreateCreditNoteResponseToJSON, CreateCustomerResponseFromJSON, CreateCustomerResponseFromJSONTyped, CreateCustomerResponseToJSON, CreateDepartmentResponseFromJSON, CreateDepartmentResponseFromJSONTyped, CreateDepartmentResponseToJSON, CreateDriveGroupResponseFromJSON, CreateDriveGroupResponseFromJSONTyped, CreateDriveGroupResponseToJSON, CreateDriveResponseFromJSON, CreateDriveResponseFromJSONTyped, CreateDriveResponseToJSON, CreateEcommerceCustomerResponseFromJSON, CreateEcommerceCustomerResponseFromJSONTyped, CreateEcommerceCustomerResponseToJSON, CreateEcommerceOrderResponseFromJSON, CreateEcommerceOrderResponseFromJSONTyped, CreateEcommerceOrderResponseToJSON, CreateEmployeeResponseFromJSON, CreateEmployeeResponseFromJSONTyped, CreateEmployeeResponseToJSON, CreateFileRequestFromJSON, CreateFileRequestFromJSONTyped, CreateFileRequestToJSON, CreateFileResponseFromJSON, CreateFileResponseFromJSONTyped, CreateFileResponseToJSON, CreateFolderRequestFromJSON, CreateFolderRequestFromJSONTyped, CreateFolderRequestToJSON, CreateFolderResponseFromJSON, CreateFolderResponseFromJSONTyped, CreateFolderResponseToJSON, CreateHrisCompanyResponseFromJSON, CreateHrisCompanyResponseFromJSONTyped, CreateHrisCompanyResponseToJSON, CreateInvoiceItemResponseFromJSON, CreateInvoiceItemResponseFromJSONTyped, CreateInvoiceItemResponseToJSON, CreateInvoiceResponseFromJSON, CreateInvoiceResponseFromJSONTyped, CreateInvoiceResponseToJSON, CreateItemResponseFromJSON, CreateItemResponseFromJSONTyped, CreateItemResponseToJSON, CreateJobResponseFromJSON, CreateJobResponseFromJSONTyped, CreateJobResponseToJSON, CreateJournalEntryResponseFromJSON, CreateJournalEntryResponseFromJSONTyped, CreateJournalEntryResponseToJSON, CreateLeadResponseFromJSON, CreateLeadResponseFromJSONTyped, CreateLeadResponseToJSON, CreateLedgerAccountResponseFromJSON, CreateLedgerAccountResponseFromJSONTyped, CreateLedgerAccountResponseToJSON, CreateLocationResponseFromJSON, CreateLocationResponseFromJSONTyped, CreateLocationResponseToJSON, CreateMerchantResponseFromJSON, CreateMerchantResponseFromJSONTyped, CreateMerchantResponseToJSON, CreateMessageResponseFromJSON, CreateMessageResponseFromJSONTyped, CreateMessageResponseToJSON, CreateModifierGroupResponseFromJSON, CreateModifierGroupResponseFromJSONTyped, CreateModifierGroupResponseToJSON, CreateModifierResponseFromJSON, CreateModifierResponseFromJSONTyped, CreateModifierResponseToJSON, CreateNoteResponseFromJSON, CreateNoteResponseFromJSONTyped, CreateNoteResponseToJSON, CreateOpportunityResponseFromJSON, CreateOpportunityResponseFromJSONTyped, CreateOpportunityResponseToJSON, CreateOrderResponseFromJSON, CreateOrderResponseFromJSONTyped, CreateOrderResponseToJSON, CreateOrderTypeResponseFromJSON, CreateOrderTypeResponseFromJSONTyped, CreateOrderTypeResponseToJSON, CreatePaymentResponseFromJSON, CreatePaymentResponseFromJSONTyped, CreatePaymentResponseToJSON, CreatePipelineResponseFromJSON, CreatePipelineResponseFromJSONTyped, CreatePipelineResponseToJSON, CreatePosPaymentResponseFromJSON, CreatePosPaymentResponseFromJSONTyped, CreatePosPaymentResponseToJSON, CreateProductResponseFromJSON, CreateProductResponseFromJSONTyped, CreateProductResponseToJSON, CreatePurchaseOrderResponseFromJSON, CreatePurchaseOrderResponseFromJSONTyped, CreatePurchaseOrderResponseToJSON, CreateSessionResponseDataFromJSON, CreateSessionResponseDataFromJSONTyped, CreateSessionResponseDataToJSON, CreateSessionResponseFromJSON, CreateSessionResponseFromJSONTyped, CreateSessionResponseToJSON, CreateSharedLinkResponseFromJSON, CreateSharedLinkResponseFromJSONTyped, CreateSharedLinkResponseToJSON, CreateSupplierResponseFromJSON, CreateSupplierResponseFromJSONTyped, CreateSupplierResponseToJSON, CreateTaxRateResponseFromJSON, CreateTaxRateResponseFromJSONTyped, CreateTaxRateResponseToJSON, CreateTenderResponseFromJSON, CreateTenderResponseFromJSONTyped, CreateTenderResponseToJSON, CreateTicketResponseFromJSON, CreateTicketResponseFromJSONTyped, CreateTicketResponseToJSON, CreateTimeOffRequestResponseFromJSON, CreateTimeOffRequestResponseFromJSONTyped, CreateTimeOffRequestResponseToJSON, CreateUploadSessionRequestFromJSON, CreateUploadSessionRequestFromJSONTyped, CreateUploadSessionRequestToJSON, CreateUploadSessionResponseFromJSON, CreateUploadSessionResponseFromJSONTyped, CreateUploadSessionResponseToJSON, CreateUserResponseFromJSON, CreateUserResponseFromJSONTyped, CreateUserResponseToJSON, CreateWebhookRequestFromJSON, CreateWebhookRequestFromJSONTyped, CreateWebhookRequestToJSON, CreateWebhookResponseFromJSON, CreateWebhookResponseFromJSONTyped, CreateWebhookResponseToJSON, CreditNoteFromJSON, CreditNoteFromJSONTyped, CreditNoteStatus, CreditNoteToJSON, CreditNoteType, CrmApi, CrmEventType, CrmEventTypeFromJSON, CrmEventTypeFromJSONTyped, CrmEventTypeToJSON, Currency, CurrencyFromJSON, CurrencyFromJSONTyped, CurrencyToJSON, CustomFieldFromJSON, CustomFieldFromJSONTyped, CustomFieldToJSON, CustomerFromJSON, CustomerFromJSONTyped, CustomerStatus, CustomerToJSON, CustomersFilterFromJSON, CustomersFilterFromJSONTyped, CustomersFilterStatus, CustomersFilterToJSON, DeductionFromJSON, DeductionFromJSONTyped, DeductionToJSON, DeleteActivityResponseFromJSON, DeleteActivityResponseFromJSONTyped, DeleteActivityResponseToJSON, DeleteApplicantResponseFromJSON, DeleteApplicantResponseFromJSONTyped, DeleteApplicantResponseToJSON, DeleteApplicationResponseFromJSON, DeleteApplicationResponseFromJSONTyped, DeleteApplicationResponseToJSON, DeleteBillResponseFromJSON, DeleteBillResponseFromJSONTyped, DeleteBillResponseToJSON, DeleteCommentResponseFromJSON, DeleteCommentResponseFromJSONTyped, DeleteCommentResponseToJSON, DeleteCompanyResponseFromJSON, DeleteCompanyResponseFromJSONTyped, DeleteCompanyResponseToJSON, DeleteConsumerResponseFromJSON, DeleteConsumerResponseFromJSONTyped, DeleteConsumerResponseToJSON, DeleteContactResponseFromJSON, DeleteContactResponseFromJSONTyped, DeleteContactResponseToJSON, DeleteCreditNoteResponseFromJSON, DeleteCreditNoteResponseFromJSONTyped, DeleteCreditNoteResponseToJSON, DeleteCustomerResponseFromJSON, DeleteCustomerResponseFromJSONTyped, DeleteCustomerResponseToJSON, DeleteDepartmentResponseFromJSON, DeleteDepartmentResponseFromJSONTyped, DeleteDepartmentResponseToJSON, DeleteDriveGroupResponseFromJSON, DeleteDriveGroupResponseFromJSONTyped, DeleteDriveGroupResponseToJSON, DeleteDriveResponseFromJSON, DeleteDriveResponseFromJSONTyped, DeleteDriveResponseToJSON, DeleteEcommerceCustomerResponseFromJSON, DeleteEcommerceCustomerResponseFromJSONTyped, DeleteEcommerceCustomerResponseToJSON, DeleteEcommerceOrderResponseFromJSON, DeleteEcommerceOrderResponseFromJSONTyped, DeleteEcommerceOrderResponseToJSON, DeleteEmployeeResponseFromJSON, DeleteEmployeeResponseFromJSONTyped, DeleteEmployeeResponseToJSON, DeleteFileResponseFromJSON, DeleteFileResponseFromJSONTyped, DeleteFileResponseToJSON, DeleteFolderResponseFromJSON, DeleteFolderResponseFromJSONTyped, DeleteFolderResponseToJSON, DeleteHrisCompanyResponseFromJSON, DeleteHrisCompanyResponseFromJSONTyped, DeleteHrisCompanyResponseToJSON, DeleteInvoiceResponseFromJSON, DeleteInvoiceResponseFromJSONTyped, DeleteInvoiceResponseToJSON, DeleteItemResponseFromJSON, DeleteItemResponseFromJSONTyped, DeleteItemResponseToJSON, DeleteJobResponseFromJSON, DeleteJobResponseFromJSONTyped, DeleteJobResponseToJSON, DeleteJournalEntryResponseFromJSON, DeleteJournalEntryResponseFromJSONTyped, DeleteJournalEntryResponseToJSON, DeleteLeadResponseFromJSON, DeleteLeadResponseFromJSONTyped, DeleteLeadResponseToJSON, DeleteLedgerAccountResponseFromJSON, DeleteLedgerAccountResponseFromJSONTyped, DeleteLedgerAccountResponseToJSON, DeleteLocationResponseFromJSON, DeleteLocationResponseFromJSONTyped, DeleteLocationResponseToJSON, DeleteMerchantResponseFromJSON, DeleteMerchantResponseFromJSONTyped, DeleteMerchantResponseToJSON, DeleteMessageResponseFromJSON, DeleteMessageResponseFromJSONTyped, DeleteMessageResponseToJSON, DeleteModifierGroupResponseFromJSON, DeleteModifierGroupResponseFromJSONTyped, DeleteModifierGroupResponseToJSON, DeleteModifierResponseFromJSON, DeleteModifierResponseFromJSONTyped, DeleteModifierResponseToJSON, DeleteNoteResponseFromJSON, DeleteNoteResponseFromJSONTyped, DeleteNoteResponseToJSON, DeleteOpportunityResponseFromJSON, DeleteOpportunityResponseFromJSONTyped, DeleteOpportunityResponseToJSON, DeleteOrderResponseFromJSON, DeleteOrderResponseFromJSONTyped, DeleteOrderResponseToJSON, DeleteOrderTypeResponseFromJSON, DeleteOrderTypeResponseFromJSONTyped, DeleteOrderTypeResponseToJSON, DeletePaymentResponseFromJSON, DeletePaymentResponseFromJSONTyped, DeletePaymentResponseToJSON, DeletePipelineResponseFromJSON, DeletePipelineResponseFromJSONTyped, DeletePipelineResponseToJSON, DeletePosPaymentResponseFromJSON, DeletePosPaymentResponseFromJSONTyped, DeletePosPaymentResponseToJSON, DeleteProductResponseFromJSON, DeleteProductResponseFromJSONTyped, DeleteProductResponseToJSON, DeletePurchaseOrderResponseFromJSON, DeletePurchaseOrderResponseFromJSONTyped, DeletePurchaseOrderResponseToJSON, DeleteSharedLinkResponseFromJSON, DeleteSharedLinkResponseFromJSONTyped, DeleteSharedLinkResponseToJSON, DeleteSupplierResponseFromJSON, DeleteSupplierResponseFromJSONTyped, DeleteSupplierResponseToJSON, DeleteTaxRateResponseFromJSON, DeleteTaxRateResponseFromJSONTyped, DeleteTaxRateResponseToJSON, DeleteTenderResponseFromJSON, DeleteTenderResponseFromJSONTyped, DeleteTenderResponseToJSON, DeleteTicketResponseFromJSON, DeleteTicketResponseFromJSONTyped, DeleteTicketResponseToJSON, DeleteTimeOffRequestResponseFromJSON, DeleteTimeOffRequestResponseFromJSONTyped, DeleteTimeOffRequestResponseToJSON, DeleteUploadSessionResponseFromJSON, DeleteUploadSessionResponseFromJSONTyped, DeleteUploadSessionResponseToJSON, DeleteUserResponseFromJSON, DeleteUserResponseFromJSONTyped, DeleteUserResponseToJSON, DeleteWebhookResponseFromJSON, DeleteWebhookResponseFromJSONTyped, DeleteWebhookResponseToJSON, DepartmentFromJSON, DepartmentFromJSONTyped, DepartmentToJSON, DriveFromJSON, DriveFromJSONTyped, DriveGroupFromJSON, DriveGroupFromJSONTyped, DriveGroupToJSON, DriveGroupsFilterFromJSON, DriveGroupsFilterFromJSONTyped, DriveGroupsFilterToJSON, DriveToJSON, DrivesFilterFromJSON, DrivesFilterFromJSONTyped, DrivesFilterToJSON, EcommerceAddressFromJSON, EcommerceAddressFromJSONTyped, EcommerceAddressToJSON, EcommerceApi, EcommerceCustomerAddressesFromJSON, EcommerceCustomerAddressesFromJSONTyped, EcommerceCustomerAddressesToJSON, EcommerceCustomerAddressesType, EcommerceCustomerFromJSON, EcommerceCustomerFromJSONTyped, EcommerceCustomerStatus, EcommerceCustomerToJSON, EcommerceCustomersFilterFromJSON, EcommerceCustomersFilterFromJSONTyped, EcommerceCustomersFilterToJSON, EcommerceDiscountFromJSON, EcommerceDiscountFromJSONTyped, EcommerceDiscountToJSON, EcommerceOrderFromJSON, EcommerceOrderFromJSONTyped, EcommerceOrderFulfillmentStatus, EcommerceOrderLineItemFromJSON, EcommerceOrderLineItemFromJSONTyped, EcommerceOrderLineItemToJSON, EcommerceOrderPaymentStatus, EcommerceOrderStatus, EcommerceOrderStatusFromJSON, EcommerceOrderStatusFromJSONTyped, EcommerceOrderStatusToJSON, EcommerceOrderToJSON, EcommerceOrdersFilterFromJSON, EcommerceOrdersFilterFromJSONTyped, EcommerceOrdersFilterToJSON, EcommerceProductCategoriesFromJSON, EcommerceProductCategoriesFromJSONTyped, EcommerceProductCategoriesToJSON, EcommerceProductFromJSON, EcommerceProductFromJSONTyped, EcommerceProductImages1FromJSON, EcommerceProductImages1FromJSONTyped, EcommerceProductImages1ToJSON, EcommerceProductImagesFromJSON, EcommerceProductImagesFromJSONTyped, EcommerceProductImagesToJSON, EcommerceProductOptions1FromJSON, EcommerceProductOptions1FromJSONTyped, EcommerceProductOptions1ToJSON, EcommerceProductOptionsFromJSON, EcommerceProductOptionsFromJSONTyped, EcommerceProductOptionsToJSON, EcommerceProductStatus, EcommerceProductToJSON, EcommerceProductVariantsFromJSON, EcommerceProductVariantsFromJSONTyped, EcommerceProductVariantsToJSON, EcommerceStoreFromJSON, EcommerceStoreFromJSONTyped, EcommerceStoreToJSON, EmailFromJSON, EmailFromJSONTyped, EmailToJSON, EmailType, EmployeeCompensationFlsaStatus, EmployeeCompensationFromJSON, EmployeeCompensationFromJSONTyped, EmployeeCompensationToJSON, EmployeeEmploymentRoleFromJSON, EmployeeEmploymentRoleFromJSONTyped, EmployeeEmploymentRoleSubType, EmployeeEmploymentRoleToJSON, EmployeeEmploymentRoleType, EmployeeFromJSON, EmployeeFromJSONTyped, EmployeeJobFromJSON, EmployeeJobFromJSONTyped, EmployeeJobToJSON, EmployeeLeavingReason, EmployeeManagerFromJSON, EmployeeManagerFromJSONTyped, EmployeeManagerToJSON, EmployeePayrollFromJSON, EmployeePayrollFromJSONTyped, EmployeePayrollToJSON, EmployeePayrollsFromJSON, EmployeePayrollsFromJSONTyped, EmployeePayrollsToJSON, EmployeeSchedulesFromJSON, EmployeeSchedulesFromJSONTyped, EmployeeSchedulesToJSON, EmployeeToJSON, EmployeesFilterEmploymentStatus, EmployeesFilterFromJSON, EmployeesFilterFromJSONTyped, EmployeesFilterToJSON, EmployeesSortBy, EmployeesSortFromJSON, EmployeesSortFromJSONTyped, EmployeesSortToJSON, EmploymentStatus, EmploymentStatusFromJSON, EmploymentStatusFromJSONTyped, EmploymentStatusToJSON, ExecuteWebhookEventRequestFromJSON, ExecuteWebhookEventRequestFromJSONTyped, ExecuteWebhookEventRequestToJSON, ExecuteWebhookEventsRequestFromJSON, ExecuteWebhookEventsRequestFromJSONTyped, ExecuteWebhookEventsRequestToJSON, ExecuteWebhookResponseFromJSON, ExecuteWebhookResponseFromJSONTyped, ExecuteWebhookResponseToJSON, FileStorageApi, FileStorageEventType, FileStorageEventTypeFromJSON, FileStorageEventTypeFromJSONTyped, FileStorageEventTypeToJSON, FileType, FileTypeFromJSON, FileTypeFromJSONTyped, FileTypeToJSON, FilesFilterFromJSON, FilesFilterFromJSONTyped, FilesFilterToJSON, FilesSearchFromJSON, FilesSearchFromJSONTyped, FilesSearchToJSON, FilesSortBy, FilesSortFromJSON, FilesSortFromJSONTyped, FilesSortToJSON, FolderFromJSON, FolderFromJSONTyped, FolderToJSON, FormFieldFromJSON, FormFieldFromJSONTyped, FormFieldOptionFromJSON, FormFieldOptionFromJSONTyped, FormFieldOptionGroupFromJSON, FormFieldOptionGroupFromJSONTyped, FormFieldOptionGroupToJSON, FormFieldOptionToJSON, FormFieldToJSON, FormFieldType, Gender, GenderFromJSON, GenderFromJSONTyped, GenderToJSON, GetActivitiesResponseFromJSON, GetActivitiesResponseFromJSONTyped, GetActivitiesResponseToJSON, GetActivityResponseFromJSON, GetActivityResponseFromJSONTyped, GetActivityResponseToJSON, GetApiResourceCoverageResponseFromJSON, GetApiResourceCoverageResponseFromJSONTyped, GetApiResourceCoverageResponseToJSON, GetApiResourceResponseFromJSON, GetApiResourceResponseFromJSONTyped, GetApiResourceResponseToJSON, GetApiResponseFromJSON, GetApiResponseFromJSONTyped, GetApiResponseToJSON, GetApisResponseFromJSON, GetApisResponseFromJSONTyped, GetApisResponseToJSON, GetApplicantResponseFromJSON, GetApplicantResponseFromJSONTyped, GetApplicantResponseToJSON, GetApplicantsResponseFromJSON, GetApplicantsResponseFromJSONTyped, GetApplicantsResponseToJSON, GetApplicationResponseFromJSON, GetApplicationResponseFromJSONTyped, GetApplicationResponseToJSON, GetApplicationsResponseFromJSON, GetApplicationsResponseFromJSONTyped, GetApplicationsResponseToJSON, GetBalanceSheetResponseFromJSON, GetBalanceSheetResponseFromJSONTyped, GetBalanceSheetResponseToJSON, GetBillResponseFromJSON, GetBillResponseFromJSONTyped, GetBillResponseToJSON, GetBillsResponseFromJSON, GetBillsResponseFromJSONTyped, GetBillsResponseToJSON, GetCollectionResponseFromJSON, GetCollectionResponseFromJSONTyped, GetCollectionResponseToJSON, GetCollectionTagsResponseFromJSON, GetCollectionTagsResponseFromJSONTyped, GetCollectionTagsResponseToJSON, GetCollectionUserResponseFromJSON, GetCollectionUserResponseFromJSONTyped, GetCollectionUserResponseToJSON, GetCollectionUsersResponseFromJSON, GetCollectionUsersResponseFromJSONTyped, GetCollectionUsersResponseToJSON, GetCollectionsResponseFromJSON, GetCollectionsResponseFromJSONTyped, GetCollectionsResponseToJSON, GetCommentResponseFromJSON, GetCommentResponseFromJSONTyped, GetCommentResponseToJSON, GetCommentsResponseFromJSON, GetCommentsResponseFromJSONTyped, GetCommentsResponseToJSON, GetCompaniesResponseFromJSON, GetCompaniesResponseFromJSONTyped, GetCompaniesResponseToJSON, GetCompanyInfoResponseFromJSON, GetCompanyInfoResponseFromJSONTyped, GetCompanyInfoResponseToJSON, GetCompanyResponseFromJSON, GetCompanyResponseFromJSONTyped, GetCompanyResponseToJSON, GetConnectionResponseFromJSON, GetConnectionResponseFromJSONTyped, GetConnectionResponseToJSON, GetConnectionsResponseFromJSON, GetConnectionsResponseFromJSONTyped, GetConnectionsResponseToJSON, GetConnectorResourceResponseFromJSON, GetConnectorResourceResponseFromJSONTyped, GetConnectorResourceResponseToJSON, GetConnectorResponseFromJSON, GetConnectorResponseFromJSONTyped, GetConnectorResponseToJSON, GetConnectorsResponseFromJSON, GetConnectorsResponseFromJSONTyped, GetConnectorsResponseToJSON, GetConsumerResponseFromJSON, GetConsumerResponseFromJSONTyped, GetConsumerResponseToJSON, GetConsumersResponseDataFromJSON, GetConsumersResponseDataFromJSONTyped, GetConsumersResponseDataToJSON, GetConsumersResponseFromJSON, GetConsumersResponseFromJSONTyped, GetConsumersResponseToJSON, GetContactResponseFromJSON, GetContactResponseFromJSONTyped, GetContactResponseToJSON, GetContactsResponseFromJSON, GetContactsResponseFromJSONTyped, GetContactsResponseToJSON, GetCreditNoteResponseFromJSON, GetCreditNoteResponseFromJSONTyped, GetCreditNoteResponseToJSON, GetCreditNotesResponseFromJSON, GetCreditNotesResponseFromJSONTyped, GetCreditNotesResponseToJSON, GetCustomerResponseFromJSON, GetCustomerResponseFromJSONTyped, GetCustomerResponseToJSON, GetCustomersResponseFromJSON, GetCustomersResponseFromJSONTyped, GetCustomersResponseToJSON, GetDepartmentResponseFromJSON, GetDepartmentResponseFromJSONTyped, GetDepartmentResponseToJSON, GetDepartmentsResponseFromJSON, GetDepartmentsResponseFromJSONTyped, GetDepartmentsResponseToJSON, GetDriveGroupResponseFromJSON, GetDriveGroupResponseFromJSONTyped, GetDriveGroupResponseToJSON, GetDriveGroupsResponseFromJSON, GetDriveGroupsResponseFromJSONTyped, GetDriveGroupsResponseToJSON, GetDriveResponseFromJSON, GetDriveResponseFromJSONTyped, GetDriveResponseToJSON, GetDrivesResponseFromJSON, GetDrivesResponseFromJSONTyped, GetDrivesResponseToJSON, GetEcommerceCustomerResponseFromJSON, GetEcommerceCustomerResponseFromJSONTyped, GetEcommerceCustomerResponseToJSON, GetEcommerceCustomersResponseFromJSON, GetEcommerceCustomersResponseFromJSONTyped, GetEcommerceCustomersResponseToJSON, GetEcommerceOrderResponseFromJSON, GetEcommerceOrderResponseFromJSONTyped, GetEcommerceOrderResponseToJSON, GetEcommerceOrdersResponseFromJSON, GetEcommerceOrdersResponseFromJSONTyped, GetEcommerceOrdersResponseToJSON, GetEmployeePayrollResponseFromJSON, GetEmployeePayrollResponseFromJSONTyped, GetEmployeePayrollResponseToJSON, GetEmployeePayrollsResponseFromJSON, GetEmployeePayrollsResponseFromJSONTyped, GetEmployeePayrollsResponseToJSON, GetEmployeeResponseFromJSON, GetEmployeeResponseFromJSONTyped, GetEmployeeResponseToJSON, GetEmployeeSchedulesResponseFromJSON, GetEmployeeSchedulesResponseFromJSONTyped, GetEmployeeSchedulesResponseToJSON, GetEmployeesResponseFromJSON, GetEmployeesResponseFromJSONTyped, GetEmployeesResponseToJSON, GetFileResponseFromJSON, GetFileResponseFromJSONTyped, GetFileResponseToJSON, GetFilesResponseFromJSON, GetFilesResponseFromJSONTyped, GetFilesResponseToJSON, GetFolderResponseFromJSON, GetFolderResponseFromJSONTyped, GetFolderResponseToJSON, GetFoldersResponseFromJSON, GetFoldersResponseFromJSONTyped, GetFoldersResponseToJSON, GetHrisCompaniesResponseFromJSON, GetHrisCompaniesResponseFromJSONTyped, GetHrisCompaniesResponseToJSON, GetHrisCompanyResponseFromJSON, GetHrisCompanyResponseFromJSONTyped, GetHrisCompanyResponseToJSON, GetHrisJobResponseFromJSON, GetHrisJobResponseFromJSONTyped, GetHrisJobResponseToJSON, GetHrisJobsResponseFromJSON, GetHrisJobsResponseFromJSONTyped, GetHrisJobsResponseToJSON, GetInvoiceItemResponseFromJSON, GetInvoiceItemResponseFromJSONTyped, GetInvoiceItemResponseToJSON, GetInvoiceItemsResponseFromJSON, GetInvoiceItemsResponseFromJSONTyped, GetInvoiceItemsResponseToJSON, GetInvoiceResponseFromJSON, GetInvoiceResponseFromJSONTyped, GetInvoiceResponseToJSON, GetInvoicesResponseFromJSON, GetInvoicesResponseFromJSONTyped, GetInvoicesResponseToJSON, GetItemResponseFromJSON, GetItemResponseFromJSONTyped, GetItemResponseToJSON, GetItemsResponseFromJSON, GetItemsResponseFromJSONTyped, GetItemsResponseToJSON, GetJobResponseFromJSON, GetJobResponseFromJSONTyped, GetJobResponseToJSON, GetJobsResponseFromJSON, GetJobsResponseFromJSONTyped, GetJobsResponseToJSON, GetJournalEntriesResponseFromJSON, GetJournalEntriesResponseFromJSONTyped, GetJournalEntriesResponseToJSON, GetJournalEntryResponseFromJSON, GetJournalEntryResponseFromJSONTyped, GetJournalEntryResponseToJSON, GetLeadResponseFromJSON, GetLeadResponseFromJSONTyped, GetLeadResponseToJSON, GetLeadsResponseFromJSON, GetLeadsResponseFromJSONTyped, GetLeadsResponseToJSON, GetLedgerAccountResponseFromJSON, GetLedgerAccountResponseFromJSONTyped, GetLedgerAccountResponseToJSON, GetLedgerAccountsResponseFromJSON, GetLedgerAccountsResponseFromJSONTyped, GetLedgerAccountsResponseToJSON, GetLocationResponseFromJSON, GetLocationResponseFromJSONTyped, GetLocationResponseToJSON, GetLocationsResponseFromJSON, GetLocationsResponseFromJSONTyped, GetLocationsResponseToJSON, GetLogsResponseFromJSON, GetLogsResponseFromJSONTyped, GetLogsResponseToJSON, GetMerchantResponseFromJSON, GetMerchantResponseFromJSONTyped, GetMerchantResponseToJSON, GetMerchantsResponseFromJSON, GetMerchantsResponseFromJSONTyped, GetMerchantsResponseToJSON, GetMessageResponseFromJSON, GetMessageResponseFromJSONTyped, GetMessageResponseToJSON, GetMessagesResponseFromJSON, GetMessagesResponseFromJSONTyped, GetMessagesResponseToJSON, GetModifierGroupResponseFromJSON, GetModifierGroupResponseFromJSONTyped, GetModifierGroupResponseToJSON, GetModifierGroupsResponseFromJSON, GetModifierGroupsResponseFromJSONTyped, GetModifierGroupsResponseToJSON, GetModifierResponseFromJSON, GetModifierResponseFromJSONTyped, GetModifierResponseToJSON, GetModifiersResponseFromJSON, GetModifiersResponseFromJSONTyped, GetModifiersResponseToJSON, GetNoteResponseFromJSON, GetNoteResponseFromJSONTyped, GetNoteResponseToJSON, GetNotesResponseFromJSON, GetNotesResponseFromJSONTyped, GetNotesResponseToJSON, GetOpportunitiesResponseFromJSON, GetOpportunitiesResponseFromJSONTyped, GetOpportunitiesResponseToJSON, GetOpportunityResponseFromJSON, GetOpportunityResponseFromJSONTyped, GetOpportunityResponseToJSON, GetOrderResponseFromJSON, GetOrderResponseFromJSONTyped, GetOrderResponseToJSON, GetOrderTypeResponseFromJSON, GetOrderTypeResponseFromJSONTyped, GetOrderTypeResponseToJSON, GetOrderTypesResponseFromJSON, GetOrderTypesResponseFromJSONTyped, GetOrderTypesResponseToJSON, GetOrdersResponseFromJSON, GetOrdersResponseFromJSONTyped, GetOrdersResponseToJSON, GetPaymentResponseFromJSON, GetPaymentResponseFromJSONTyped, GetPaymentResponseToJSON, GetPaymentsResponseFromJSON, GetPaymentsResponseFromJSONTyped, GetPaymentsResponseToJSON, GetPayrollResponseFromJSON, GetPayrollResponseFromJSONTyped, GetPayrollResponseToJSON, GetPayrollsResponseFromJSON, GetPayrollsResponseFromJSONTyped, GetPayrollsResponseToJSON, GetPipelineResponseFromJSON, GetPipelineResponseFromJSONTyped, GetPipelineResponseToJSON, GetPipelinesResponseFromJSON, GetPipelinesResponseFromJSONTyped, GetPipelinesResponseToJSON, GetPosPaymentResponseFromJSON, GetPosPaymentResponseFromJSONTyped, GetPosPaymentResponseToJSON, GetPosPaymentsResponseFromJSON, GetPosPaymentsResponseFromJSONTyped, GetPosPaymentsResponseToJSON, GetProductResponseFromJSON, GetProductResponseFromJSONTyped, GetProductResponseToJSON, GetProductsResponseFromJSON, GetProductsResponseFromJSONTyped, GetProductsResponseToJSON, GetProfitAndLossResponseFromJSON, GetProfitAndLossResponseFromJSONTyped, GetProfitAndLossResponseToJSON, GetPurchaseOrderResponseFromJSON, GetPurchaseOrderResponseFromJSONTyped, GetPurchaseOrderResponseToJSON, GetPurchaseOrdersResponseFromJSON, GetPurchaseOrdersResponseFromJSONTyped, GetPurchaseOrdersResponseToJSON, GetSharedLinkResponseFromJSON, GetSharedLinkResponseFromJSONTyped, GetSharedLinkResponseToJSON, GetSharedLinksResponseFromJSON, GetSharedLinksResponseFromJSONTyped, GetSharedLinksResponseToJSON, GetStoreResponseFromJSON, GetStoreResponseFromJSONTyped, GetStoreResponseToJSON, GetStoresResponseFromJSON, GetStoresResponseFromJSONTyped, GetStoresResponseToJSON, GetSupplierResponseFromJSON, GetSupplierResponseFromJSONTyped, GetSupplierResponseToJSON, GetSuppliersResponseFromJSON, GetSuppliersResponseFromJSONTyped, GetSuppliersResponseToJSON, GetTaxRateResponseFromJSON, GetTaxRateResponseFromJSONTyped, GetTaxRateResponseToJSON, GetTaxRatesResponseFromJSON, GetTaxRatesResponseFromJSONTyped, GetTaxRatesResponseToJSON, GetTenderResponseFromJSON, GetTenderResponseFromJSONTyped, GetTenderResponseToJSON, GetTendersResponseFromJSON, GetTendersResponseFromJSONTyped, GetTendersResponseToJSON, GetTicketResponseFromJSON, GetTicketResponseFromJSONTyped, GetTicketResponseToJSON, GetTicketsResponseFromJSON, GetTicketsResponseFromJSONTyped, GetTicketsResponseToJSON, GetTimeOffRequestResponseFromJSON, GetTimeOffRequestResponseFromJSONTyped, GetTimeOffRequestResponseToJSON, GetTimeOffRequestsResponseFromJSON, GetTimeOffRequestsResponseFromJSONTyped, GetTimeOffRequestsResponseToJSON, GetUploadSessionResponseFromJSON, GetUploadSessionResponseFromJSONTyped, GetUploadSessionResponseToJSON, GetUserResponseFromJSON, GetUserResponseFromJSONTyped, GetUserResponseToJSON, GetUsersResponseFromJSON, GetUsersResponseFromJSONTyped, GetUsersResponseToJSON, GetWebhookEventLogsResponseFromJSON, GetWebhookEventLogsResponseFromJSONTyped, GetWebhookEventLogsResponseToJSON, GetWebhookResponseFromJSON, GetWebhookResponseFromJSONTyped, GetWebhookResponseToJSON, GetWebhooksResponseFromJSON, GetWebhooksResponseFromJSONTyped, GetWebhooksResponseToJSON, HrisApi, HrisCompanyFromJSON, HrisCompanyFromJSONTyped, HrisCompanyStatus, HrisCompanyToJSON, HrisEventType, HrisEventTypeFromJSON, HrisEventTypeFromJSONTyped, HrisEventTypeToJSON, HrisJobFromJSON, HrisJobFromJSONTyped, HrisJobLocationFromJSON, HrisJobLocationFromJSONTyped, HrisJobLocationToJSON, HrisJobToJSON, HrisJobsFromJSON, HrisJobsFromJSONTyped, HrisJobsToJSON, IntegrationState, IntegrationStateFromJSON, IntegrationStateFromJSONTyped, IntegrationStateToJSON, InvoiceFromJSON, InvoiceFromJSONTyped, InvoiceItemFromJSON, InvoiceItemFromJSONTyped, InvoiceItemSalesDetailsFromJSON, InvoiceItemSalesDetailsFromJSONTyped, InvoiceItemSalesDetailsToJSON, InvoiceItemToJSON, InvoiceItemType, InvoiceItemsFilterFromJSON, InvoiceItemsFilterFromJSONTyped, InvoiceItemsFilterToJSON, InvoiceLineItemFromJSON, InvoiceLineItemFromJSONTyped, InvoiceLineItemToJSON, InvoiceLineItemType, InvoiceResponseFromJSON, InvoiceResponseFromJSONTyped, InvoiceResponseToJSON, InvoiceStatus, InvoiceToJSON, InvoiceType, InvoicesSortBy, InvoicesSortFromJSON, InvoicesSortFromJSONTyped, InvoicesSortToJSON, IssueTrackingApi, IssueTrackingEventType, IssueTrackingEventTypeFromJSON, IssueTrackingEventTypeFromJSONTyped, IssueTrackingEventTypeToJSON, IssuesFilterFromJSON, IssuesFilterFromJSONTyped, IssuesFilterToJSON, ItemFromJSON, ItemFromJSONTyped, ItemPricingType, ItemProductType, ItemToJSON, JSONApiResponse, JobEmploymentTerms, JobFromJSON, JobFromJSONTyped, JobLinksFromJSON, JobLinksFromJSONTyped, JobLinksToJSON, JobLinksType, JobSalaryFromJSON, JobSalaryFromJSONTyped, JobSalaryToJSON, JobStatus, JobStatusFromJSON, JobStatusFromJSONTyped, JobStatusToJSON, JobToJSON, JobVisibility, JournalEntryFromJSON, JournalEntryFromJSONTyped, JournalEntryLineItemFromJSON, JournalEntryLineItemFromJSONTyped, JournalEntryLineItemToJSON, JournalEntryLineItemType, JournalEntryToJSON, LeadApi, LeadEventType, LeadEventTypeFromJSON, LeadEventTypeFromJSONTyped, LeadEventTypeToJSON, LeadFromJSON, LeadFromJSONTyped, LeadToJSON, LeadsFilterFromJSON, LeadsFilterFromJSONTyped, LeadsFilterToJSON, LeadsSortBy, LeadsSortFromJSON, LeadsSortFromJSONTyped, LeadsSortToJSON, LedgerAccountCategoriesFromJSON, LedgerAccountCategoriesFromJSONTyped, LedgerAccountCategoriesToJSON, LedgerAccountClassification, LedgerAccountFromJSON, LedgerAccountFromJSONTyped, LedgerAccountParentAccountFromJSON, LedgerAccountParentAccountFromJSONTyped, LedgerAccountParentAccountToJSON, LedgerAccountStatus, LedgerAccountToJSON, LedgerAccountType, LedgerAccountsFromJSON, LedgerAccountsFromJSONTyped, LedgerAccountsToJSON, LinkedConnectorResourceFromJSON, LinkedConnectorResourceFromJSONTyped, LinkedConnectorResourceToJSON, LinkedCustomerFromJSON, LinkedCustomerFromJSONTyped, LinkedCustomerToJSON, LinkedEcommerceCustomerFromJSON, LinkedEcommerceCustomerFromJSONTyped, LinkedEcommerceCustomerToJSON, LinkedEcommerceOrderFromJSON, LinkedEcommerceOrderFromJSONTyped, LinkedEcommerceOrderToJSON, LinkedFolderFromJSON, LinkedFolderFromJSONTyped, LinkedFolderToJSON, LinkedInvoiceItemFromJSON, LinkedInvoiceItemFromJSONTyped, LinkedInvoiceItemToJSON, LinkedLedgerAccountFromJSON, LinkedLedgerAccountFromJSONTyped, LinkedLedgerAccountToJSON, LinkedParentCustomerFromJSON, LinkedParentCustomerFromJSONTyped, LinkedParentCustomerToJSON, LinkedSupplierFromJSON, LinkedSupplierFromJSONTyped, LinkedSupplierToJSON, LinkedTaxRateFromJSON, LinkedTaxRateFromJSONTyped, LinkedTaxRateToJSON, LinkedTrackingCategoryFromJSON, LinkedTrackingCategoryFromJSONTyped, LinkedTrackingCategoryToJSON, LinksFromJSON, LinksFromJSONTyped, LinksToJSON, LocationFromJSON, LocationFromJSONTyped, LocationStatus, LocationToJSON, LogFromJSON, LogFromJSONTyped, LogOperationFromJSON, LogOperationFromJSONTyped, LogOperationToJSON, LogServiceFromJSON, LogServiceFromJSONTyped, LogServiceToJSON, LogToJSON, LogUnifiedApi, LogsFilterFromJSON, LogsFilterFromJSONTyped, LogsFilterToJSON, MerchantFromJSON, MerchantFromJSONTyped, MerchantStatus, MerchantToJSON, MessageDirection, MessageFromJSON, MessageFromJSONTyped, MessageStatus, MessageToJSON, MessageType, MetaCursorsFromJSON, MetaCursorsFromJSONTyped, MetaCursorsToJSON, MetaFromJSON, MetaFromJSONTyped, MetaToJSON, ModelErrorFromJSON, ModelErrorFromJSONTyped, ModelErrorToJSON, ModifierFromJSON, ModifierFromJSONTyped, ModifierGroupFilterFromJSON, ModifierGroupFilterFromJSONTyped, ModifierGroupFilterToJSON, ModifierGroupFromJSON, ModifierGroupFromJSONTyped, ModifierGroupSelectionType, ModifierGroupToJSON, ModifierToJSON, NotFoundResponseFromJSON, NotFoundResponseFromJSONTyped, NotFoundResponseToJSON, NotImplementedResponseFromJSON, NotImplementedResponseFromJSONTyped, NotImplementedResponseToJSON, NoteFromJSON, NoteFromJSONTyped, NoteToJSON, OAuthGrantType, OAuthGrantTypeFromJSON, OAuthGrantTypeFromJSONTyped, OAuthGrantTypeToJSON, OfferFromJSON, OfferFromJSONTyped, OfferToJSON, OpportunitiesFilterFromJSON, OpportunitiesFilterFromJSONTyped, OpportunitiesFilterToJSON, OpportunitiesSortBy, OpportunitiesSortFromJSON, OpportunitiesSortFromJSONTyped, OpportunitiesSortToJSON, OpportunityFromJSON, OpportunityFromJSONTyped, OpportunityToJSON, OrderCustomersFromJSON, OrderCustomersFromJSONTyped, OrderCustomersToJSON, OrderDiscountsFromJSON, OrderDiscountsFromJSONTyped, OrderDiscountsScope, OrderDiscountsToJSON, OrderDiscountsType, OrderFromJSON, OrderFromJSONTyped, OrderFulfillmentsFromJSON, OrderFulfillmentsFromJSONTyped, OrderFulfillmentsStatus, OrderFulfillmentsToJSON, OrderFulfillmentsType, OrderLineItemsFromJSON, OrderLineItemsFromJSONTyped, OrderLineItemsToJSON, OrderPaymentStatus, OrderPaymentsFromJSON, OrderPaymentsFromJSONTyped, OrderPaymentsToJSON, OrderPickupDetailsCurbsidePickupDetailsFromJSON, OrderPickupDetailsCurbsidePickupDetailsFromJSONTyped, OrderPickupDetailsCurbsidePickupDetailsToJSON, OrderPickupDetailsFromJSON, OrderPickupDetailsFromJSONTyped, OrderPickupDetailsRecipientFromJSON, OrderPickupDetailsRecipientFromJSONTyped, OrderPickupDetailsRecipientToJSON, OrderPickupDetailsScheduleType, OrderPickupDetailsToJSON, OrderRefundsFromJSON, OrderRefundsFromJSONTyped, OrderRefundsStatus, OrderRefundsToJSON, OrderSource, OrderStatus, OrderTendersCardEntryMethod, OrderTendersCardStatus, OrderTendersFromJSON, OrderTendersFromJSONTyped, OrderTendersToJSON, OrderTendersType, OrderToJSON, OrderTypeFromJSON, OrderTypeFromJSONTyped, OrderTypeToJSON, OwnerFromJSON, OwnerFromJSONTyped, OwnerToJSON, PaginationCoverageFromJSON, PaginationCoverageFromJSONTyped, PaginationCoverageMode, PaginationCoverageToJSON, PassThroughQueryFromJSON, PassThroughQueryFromJSONTyped, PassThroughQueryToJSON, PaymentAllocationsFromJSON, PaymentAllocationsFromJSONTyped, PaymentAllocationsToJSON, PaymentAllocationsType, PaymentCardCardBrand, PaymentCardCardType, PaymentCardFromJSON, PaymentCardFromJSONTyped, PaymentCardPrepaidType, PaymentCardToJSON, PaymentFrequency, PaymentFrequencyFromJSON, PaymentFrequencyFromJSONTyped, PaymentFrequencyToJSON, PaymentFromJSON, PaymentFromJSONTyped, PaymentRequiredResponseFromJSON, PaymentRequiredResponseFromJSONTyped, PaymentRequiredResponseToJSON, PaymentStatus, PaymentToJSON, PaymentType, PaymentUnit, PaymentUnitFromJSON, PaymentUnitFromJSONTyped, PaymentUnitToJSON, PaymentsFilterFromJSON, PaymentsFilterFromJSONTyped, PaymentsFilterToJSON, PayrollFromJSON, PayrollFromJSONTyped, PayrollToJSON, PayrollTotalsFromJSON, PayrollTotalsFromJSONTyped, PayrollTotalsToJSON, PayrollsFilterFromJSON, PayrollsFilterFromJSONTyped, PayrollsFilterToJSON, PersonFromJSON, PersonFromJSONTyped, PersonToJSON, PhoneNumberFromJSON, PhoneNumberFromJSONTyped, PhoneNumberToJSON, PhoneNumberType, PipelineFromJSON, PipelineFromJSONTyped, PipelineStagesFromJSON, PipelineStagesFromJSONTyped, PipelineStagesToJSON, PipelineToJSON, PosApi, PosBankAccountAchDetailsFromJSON, PosBankAccountAchDetailsFromJSONTyped, PosBankAccountAchDetailsToJSON, PosBankAccountFromJSON, PosBankAccountFromJSONTyped, PosBankAccountToJSON, PosPaymentCardDetailsFromJSON, PosPaymentCardDetailsFromJSONTyped, PosPaymentCardDetailsToJSON, PosPaymentExternalDetailsFromJSON, PosPaymentExternalDetailsFromJSONTyped, PosPaymentExternalDetailsToJSON, PosPaymentExternalDetailsType, PosPaymentFromJSON, PosPaymentFromJSONTyped, PosPaymentSource, PosPaymentStatus, PosPaymentToJSON, PriceFromJSON, PriceFromJSONTyped, PriceToJSON, ProbationPeriodFromJSON, ProbationPeriodFromJSONTyped, ProbationPeriodToJSON, ProfitAndLossExpensesFromJSON, ProfitAndLossExpensesFromJSONTyped, ProfitAndLossExpensesToJSON, ProfitAndLossFilterFromJSON, ProfitAndLossFilterFromJSONTyped, ProfitAndLossFilterToJSON, ProfitAndLossFromJSON, ProfitAndLossFromJSONTyped, ProfitAndLossGrossProfitFromJSON, ProfitAndLossGrossProfitFromJSONTyped, ProfitAndLossGrossProfitToJSON, ProfitAndLossIncomeFromJSON, ProfitAndLossIncomeFromJSONTyped, ProfitAndLossIncomeToJSON, ProfitAndLossNetIncomeFromJSON, ProfitAndLossNetIncomeFromJSONTyped, ProfitAndLossNetIncomeToJSON, ProfitAndLossNetOperatingIncomeFromJSON, ProfitAndLossNetOperatingIncomeFromJSONTyped, ProfitAndLossNetOperatingIncomeToJSON, ProfitAndLossRecordFromJSON, ProfitAndLossRecordFromJSONTyped, ProfitAndLossRecordToJSON, ProfitAndLossRecordsFromJSON, ProfitAndLossRecordsFromJSONTyped, ProfitAndLossRecordsToJSON, ProfitAndLossSectionFromJSON, ProfitAndLossSectionFromJSONTyped, ProfitAndLossSectionToJSON, ProfitAndLossToJSON, PurchaseOrderFromJSON, PurchaseOrderFromJSONTyped, PurchaseOrderStatus, PurchaseOrderToJSON, RequestCountAllocationFromJSON, RequestCountAllocationFromJSONTyped, RequestCountAllocationToJSON, RequestRateFromJSON, RequestRateFromJSONTyped, RequestRateToJSON, RequestRateUnit, RequiredError, ResolveWebhookEventRequestFromJSON, ResolveWebhookEventRequestFromJSONTyped, ResolveWebhookEventRequestToJSON, ResolveWebhookEventsRequestFromJSON, ResolveWebhookEventsRequestFromJSONTyped, ResolveWebhookEventsRequestToJSON, ResolveWebhookResponseFromJSON, ResolveWebhookResponseFromJSONTyped, ResolveWebhookResponseToJSON, ResourceStatus, ResourceStatusFromJSON, ResourceStatusFromJSONTyped, ResourceStatusToJSON, ScheduleFromJSON, ScheduleFromJSONTyped, ScheduleToJSON, ScheduleWorkPatternFromJSON, ScheduleWorkPatternFromJSONTyped, ScheduleWorkPatternOddWeeksFromJSON, ScheduleWorkPatternOddWeeksFromJSONTyped, ScheduleWorkPatternOddWeeksToJSON, ScheduleWorkPatternToJSON, ServiceChargeFromJSON, ServiceChargeFromJSONTyped, ServiceChargeToJSON, ServiceChargeType, ServiceChargesFromJSON, ServiceChargesFromJSONTyped, ServiceChargesToJSON, SessionFromJSON, SessionFromJSONTyped, SessionSettingsAllowActions, SessionSettingsFromJSON, SessionSettingsFromJSONTyped, SessionSettingsToJSON, SessionThemeFromJSON, SessionThemeFromJSONTyped, SessionThemeToJSON, SessionToJSON, SharedLinkFromJSON, SharedLinkFromJSONTyped, SharedLinkScope, SharedLinkTargetFromJSON, SharedLinkTargetFromJSONTyped, SharedLinkTargetToJSON, SharedLinkToJSON, SimpleFormFieldOptionFromJSON, SimpleFormFieldOptionFromJSONTyped, SimpleFormFieldOptionToJSON, SmsApi, SocialLinkFromJSON, SocialLinkFromJSONTyped, SocialLinkToJSON, SortDirection, SortDirectionFromJSON, SortDirectionFromJSONTyped, SortDirectionToJSON, Status, StatusFromJSON, StatusFromJSONTyped, StatusToJSON, SupplierFromJSON, SupplierFromJSONTyped, SupplierStatus, SupplierToJSON, SuppliersFilterFromJSON, SuppliersFilterFromJSONTyped, SuppliersFilterToJSON, SupportedPropertyChildPropertiesFromJSON, SupportedPropertyChildPropertiesFromJSONTyped, SupportedPropertyChildPropertiesToJSON, SupportedPropertyFromJSON, SupportedPropertyFromJSONTyped, SupportedPropertyToJSON, TagsFromJSON, TagsFromJSONTyped, TagsToJSON, TaxFromJSON, TaxFromJSONTyped, TaxRateFromJSON, TaxRateFromJSONTyped, TaxRateStatus, TaxRateToJSON, TaxRatesFilterFromJSON, TaxRatesFilterFromJSONTyped, TaxRatesFilterToJSON, TaxToJSON, TeamFromJSON, TeamFromJSONTyped, TeamToJSON, TenderFromJSON, TenderFromJSONTyped, TenderToJSON, TextApiResponse, TicketFromJSON, TicketFromJSONTyped, TicketPriority, TicketToJSON, TicketsSortBy, TicketsSortFromJSON, TicketsSortFromJSONTyped, TicketsSortToJSON, TimeOffRequestFromJSON, TimeOffRequestFromJSONTyped, TimeOffRequestNotesFromJSON, TimeOffRequestNotesFromJSONTyped, TimeOffRequestNotesToJSON, TimeOffRequestRequestType, TimeOffRequestStatus, TimeOffRequestToJSON, TimeOffRequestUnits, TimeOffRequestsFilterFromJSON, TimeOffRequestsFilterFromJSONTyped, TimeOffRequestsFilterTimeOffRequestStatus, TimeOffRequestsFilterToJSON, TooManyRequestsResponseDetailFromJSON, TooManyRequestsResponseDetailFromJSONTyped, TooManyRequestsResponseDetailToJSON, TooManyRequestsResponseFromJSON, TooManyRequestsResponseFromJSONTyped, TooManyRequestsResponseToJSON, TrackingItemFromJSON, TrackingItemFromJSONTyped, TrackingItemToJSON, UnauthorizedResponseFromJSON, UnauthorizedResponseFromJSONTyped, UnauthorizedResponseToJSON, UnexpectedErrorResponseFromJSON, UnexpectedErrorResponseFromJSONTyped, UnexpectedErrorResponseToJSON, UnifiedApiId, UnifiedApiIdFromJSON, UnifiedApiIdFromJSONTyped, UnifiedApiIdToJSON, UnifiedFileFromJSON, UnifiedFileFromJSONTyped, UnifiedFilePermissionsFromJSON, UnifiedFilePermissionsFromJSONTyped, UnifiedFilePermissionsToJSON, UnifiedFileToJSON, UnifiedIdFromJSON, UnifiedIdFromJSONTyped, UnifiedIdToJSON, UnprocessableResponseFromJSON, UnprocessableResponseFromJSONTyped, UnprocessableResponseToJSON, UpdateActivityResponseFromJSON, UpdateActivityResponseFromJSONTyped, UpdateActivityResponseToJSON, UpdateApplicantResponseFromJSON, UpdateApplicantResponseFromJSONTyped, UpdateApplicantResponseToJSON, UpdateApplicationResponseFromJSON, UpdateApplicationResponseFromJSONTyped, UpdateApplicationResponseToJSON, UpdateBillResponseFromJSON, UpdateBillResponseFromJSONTyped, UpdateBillResponseToJSON, UpdateCommentResponseFromJSON, UpdateCommentResponseFromJSONTyped, UpdateCommentResponseToJSON, UpdateCompanyResponseFromJSON, UpdateCompanyResponseFromJSONTyped, UpdateCompanyResponseToJSON, UpdateConnectionResponseFromJSON, UpdateConnectionResponseFromJSONTyped, UpdateConnectionResponseToJSON, UpdateConsumerRequestFromJSON, UpdateConsumerRequestFromJSONTyped, UpdateConsumerRequestToJSON, UpdateConsumerResponseFromJSON, UpdateConsumerResponseFromJSONTyped, UpdateConsumerResponseToJSON, UpdateContactResponseFromJSON, UpdateContactResponseFromJSONTyped, UpdateContactResponseToJSON, UpdateCreditNoteResponseFromJSON, UpdateCreditNoteResponseFromJSONTyped, UpdateCreditNoteResponseToJSON, UpdateCustomerResponseFromJSON, UpdateCustomerResponseFromJSONTyped, UpdateCustomerResponseToJSON, UpdateDepartmentResponseFromJSON, UpdateDepartmentResponseFromJSONTyped, UpdateDepartmentResponseToJSON, UpdateDriveGroupResponseFromJSON, UpdateDriveGroupResponseFromJSONTyped, UpdateDriveGroupResponseToJSON, UpdateDriveResponseFromJSON, UpdateDriveResponseFromJSONTyped, UpdateDriveResponseToJSON, UpdateEcommerceCustomerResponseFromJSON, UpdateEcommerceCustomerResponseFromJSONTyped, UpdateEcommerceCustomerResponseToJSON, UpdateEcommerceOrderResponseFromJSON, UpdateEcommerceOrderResponseFromJSONTyped, UpdateEcommerceOrderResponseToJSON, UpdateEmployeeResponseFromJSON, UpdateEmployeeResponseFromJSONTyped, UpdateEmployeeResponseToJSON, UpdateFileRequestFromJSON, UpdateFileRequestFromJSONTyped, UpdateFileRequestToJSON, UpdateFileResponseFromJSON, UpdateFileResponseFromJSONTyped, UpdateFileResponseToJSON, UpdateFolderRequestFromJSON, UpdateFolderRequestFromJSONTyped, UpdateFolderRequestToJSON, UpdateFolderResponseFromJSON, UpdateFolderResponseFromJSONTyped, UpdateFolderResponseToJSON, UpdateHrisCompanyResponseFromJSON, UpdateHrisCompanyResponseFromJSONTyped, UpdateHrisCompanyResponseToJSON, UpdateInvoiceItemsResponseFromJSON, UpdateInvoiceItemsResponseFromJSONTyped, UpdateInvoiceItemsResponseToJSON, UpdateInvoiceResponseFromJSON, UpdateInvoiceResponseFromJSONTyped, UpdateInvoiceResponseToJSON, UpdateItemResponseFromJSON, UpdateItemResponseFromJSONTyped, UpdateItemResponseToJSON, UpdateJobResponseFromJSON, UpdateJobResponseFromJSONTyped, UpdateJobResponseToJSON, UpdateJournalEntryResponseFromJSON, UpdateJournalEntryResponseFromJSONTyped, UpdateJournalEntryResponseToJSON, UpdateLeadResponseFromJSON, UpdateLeadResponseFromJSONTyped, UpdateLeadResponseToJSON, UpdateLedgerAccountResponseFromJSON, UpdateLedgerAccountResponseFromJSONTyped, UpdateLedgerAccountResponseToJSON, UpdateLocationResponseFromJSON, UpdateLocationResponseFromJSONTyped, UpdateLocationResponseToJSON, UpdateMerchantResponseFromJSON, UpdateMerchantResponseFromJSONTyped, UpdateMerchantResponseToJSON, UpdateMessageResponseFromJSON, UpdateMessageResponseFromJSONTyped, UpdateMessageResponseToJSON, UpdateModifierGroupResponseFromJSON, UpdateModifierGroupResponseFromJSONTyped, UpdateModifierGroupResponseToJSON, UpdateModifierResponseFromJSON, UpdateModifierResponseFromJSONTyped, UpdateModifierResponseToJSON, UpdateNoteResponseFromJSON, UpdateNoteResponseFromJSONTyped, UpdateNoteResponseToJSON, UpdateOpportunityResponseFromJSON, UpdateOpportunityResponseFromJSONTyped, UpdateOpportunityResponseToJSON, UpdateOrderResponseFromJSON, UpdateOrderResponseFromJSONTyped, UpdateOrderResponseToJSON, UpdateOrderTypeResponseFromJSON, UpdateOrderTypeResponseFromJSONTyped, UpdateOrderTypeResponseToJSON, UpdatePaymentResponseFromJSON, UpdatePaymentResponseFromJSONTyped, UpdatePaymentResponseToJSON, UpdatePipelineResponseFromJSON, UpdatePipelineResponseFromJSONTyped, UpdatePipelineResponseToJSON, UpdatePosPaymentResponseFromJSON, UpdatePosPaymentResponseFromJSONTyped, UpdatePosPaymentResponseToJSON, UpdateProductResponseFromJSON, UpdateProductResponseFromJSONTyped, UpdateProductResponseToJSON, UpdatePurchaseOrderResponseFromJSON, UpdatePurchaseOrderResponseFromJSONTyped, UpdatePurchaseOrderResponseToJSON, UpdateSharedLinkResponseFromJSON, UpdateSharedLinkResponseFromJSONTyped, UpdateSharedLinkResponseToJSON, UpdateSupplierResponseFromJSON, UpdateSupplierResponseFromJSONTyped, UpdateSupplierResponseToJSON, UpdateTaxRateResponseFromJSON, UpdateTaxRateResponseFromJSONTyped, UpdateTaxRateResponseToJSON, UpdateTenderResponseFromJSON, UpdateTenderResponseFromJSONTyped, UpdateTenderResponseToJSON, UpdateTicketResponseFromJSON, UpdateTicketResponseFromJSONTyped, UpdateTicketResponseToJSON, UpdateTimeOffRequestResponseFromJSON, UpdateTimeOffRequestResponseFromJSONTyped, UpdateTimeOffRequestResponseToJSON, UpdateUploadSessionResponseFromJSON, UpdateUploadSessionResponseFromJSONTyped, UpdateUploadSessionResponseToJSON, UpdateUserResponseFromJSON, UpdateUserResponseFromJSONTyped, UpdateUserResponseToJSON, UpdateWebhookRequestFromJSON, UpdateWebhookRequestFromJSONTyped, UpdateWebhookRequestToJSON, UpdateWebhookResponseFromJSON, UpdateWebhookResponseFromJSONTyped, UpdateWebhookResponseToJSON, UploadSessionFromJSON, UploadSessionFromJSONTyped, UploadSessionToJSON, UserFromJSON, UserFromJSONTyped, UserToJSON, VaultApi, VaultEventType, VaultEventTypeFromJSON, VaultEventTypeFromJSONTyped, VaultEventTypeToJSON, VirtualWebhooksFromJSON, VirtualWebhooksFromJSONTyped, VirtualWebhooksToJSON, VoidApiResponse, WalletDetailsFromJSON, WalletDetailsFromJSONTyped, WalletDetailsStatus, WalletDetailsToJSON, WebhookApi, WebhookDisabledReason, WebhookEventFromJSON, WebhookEventFromJSONTyped, WebhookEventLogAttemptsFromJSON, WebhookEventLogAttemptsFromJSONTyped, WebhookEventLogAttemptsToJSON, WebhookEventLogFromJSON, WebhookEventLogFromJSONTyped, WebhookEventLogServiceFromJSON, WebhookEventLogServiceFromJSONTyped, WebhookEventLogServiceToJSON, WebhookEventLogToJSON, WebhookEventLogsFilterFromJSON, WebhookEventLogsFilterFromJSONTyped, WebhookEventLogsFilterServiceFromJSON, WebhookEventLogsFilterServiceFromJSONTyped, WebhookEventLogsFilterServiceToJSON, WebhookEventLogsFilterToJSON, WebhookEventToJSON, WebhookEventType, WebhookEventTypeFromJSON, WebhookEventTypeFromJSONTyped, WebhookEventTypeToJSON, WebhookEventUnifiedApi, WebhookFromJSON, WebhookFromJSONTyped, WebhookSubscriptionFromJSON, WebhookSubscriptionFromJSONTyped, WebhookSubscriptionToJSON, WebhookSupportFromJSON, WebhookSupportFromJSONTyped, WebhookSupportManagedVia, WebhookSupportMode, WebhookSupportSubscriptionLevel, WebhookSupportToJSON, WebhookToJSON, WebsiteFromJSON, WebsiteFromJSONTyped, WebsiteToJSON, WebsiteType, canConsumeForm, exists, mapValues, querystring };
//# sourceMappingURL=node.esm.js.map
